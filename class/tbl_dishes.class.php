<?php

/**********************************************************************
tbl_dishes.class.php
Generated by STRUCTY 2013.04.12 11:49:43.
Copyright 2011 Structy, Frédéric Aebi. All rights reserved.
**********************************************************************/

define("TBL_DISHES", "tbl_dishes"); 

define('DISH_ID', 'dish_id'); 
define('DISH_NAME', 'dish_name'); 
define('DISH_CHEF_NOTES', 'dish_chef_notes'); 
define('DISH_INGRAD_ALLERGIC_CONTENTS', 'dish_ingrad_allergic_contents'); 

define('DISH_IS_NUTRITION_TEXT', 'dish_is_nutrition_text');

define('DISH_NUTRI_CAL_INFO', 'dish_nutri_cal_info');
define('DISH_ALLERGY', 'dish_allergy');
define('DISH_FOOD_WINE_PAIR', 'dish_food_wine_pair');

define('DISH_PAIR_NOTE', 'dish_pair_note');

define('DISH_NOTES', 'dish_notes'); 
define('DISH_IMG', 'dish_img'); 

define('DISH_WINERY', 'dish_winery'); 
define('DISH_TYPE_CAT', 'dish_type_cat'); 
define('DISH_ALCOHOL_PERCENT', 'dish_alcohol_percent'); 
define('DISH_VINTAGE', 'dish_vintage'); 
define('DISH_VARIETAL', 'dish_varietal'); 
define('DISH_REGION', 'dish_region'); 
define('DISH_COUNTRY', 'dish_country'); 
define('DISH_BOTTLE_PRICE', 'dish_bottle_price'); 
define('DISH_GLASS_PRICE', 'dish_glass_price'); 
define('DISH_WINEMAKING', 'dish_winemaking'); 
define('DISH_MATURITY', 'dish_maturity'); 
define('DISH_IS_DRINK', 'dish_is_drink'); 
define('DISH_ATTRIBUTES', 'dish_attributes');
define('DISH_FOOD_NOTES', 'dish_food_notes');
define('DISH_RESTAURENT', 'dish_restaurent'); 

define('DISH_ETHOR_MNU_ITM_ID', 'dish_ethor_mnu_itm_id');
define('DISH_ETHOR_MNU_ITM_IMG', 'dish_ethor_mnu_itm_img');

define('DISH_START_DATE', 'dish_start_date'); 
define('DISH_END_DATE', 'dish_end_date'); 

define("TBL_DISHES_ACTIVE_DATE",  DISH_START_DATE);
define("TBL_DISHES_DEACTIVE_DATE",  DISH_END_DATE);
$tbl_dishes_active_condition= " (".TBL_DISHES_DEACTIVE_DATE." is NULL OR ".TBL_DISHES_DEACTIVE_DATE." = 0 OR ".TBL_DISHES_DEACTIVE_DATE." > NOW( )) ";

class tbl_dishes {

	private $dish_id;
	private $dish_name;
	private $dish_chef_notes;
	private $dish_ingrad_allergic_contents;
	private $dish_nutri_cal_info;		
	private $dish_is_nutrition_text;	
	private $dish_allergy;
	private $dish_food_wine_pair;		
	private $dish_pair_note;	
	private $dish_notes;
	private $dish_img;
		
	private $dish_winery;
	private $dish_type_cat;
	private $dish_alcohol_percent;
	private $dish_vintage;
	private $dish_varietal;
	private $dish_region;
	private $dish_country;
	private $dish_bottle_price;
	private $dish_glass_price;
	private $dish_winemaking;
	private $dish_maturity;
	private $dish_is_drink;
	
	private $dish_attributes;
	private $dish_food_notes;
	
	private $dish_ethor_mnu_itm_id;
	private $dish_ethor_mnu_itm_img;
	
	private $dish_start_date;
	private $dish_end_date;
	private $dish_restaurent;
	private $tbl_dishes_active_date;
	private $tbl_dishes_deactive_date;

	public function setdish_id($pArg="0") {$this->dish_id=$pArg;}
	public function setdish_name($pArg="0") {$this->dish_name=$pArg;}
	public function setdish_chef_notes($pArg="0") {$this->dish_chef_notes=$pArg;}
	public function setdish_ingrad_allergic_contents($pArg="0") {$this->dish_ingrad_allergic_contents=$pArg;}
	
	public function setdish_is_nutrition_text($pArg="0") {$this->dish_is_nutrition_text=$pArg;}
		
	public function setdish_nutri_cal_info($pArg="0") {$this->dish_nutri_cal_info=$pArg;}	
	public function setdish_allergy($pArg="0") {$this->dish_allergy=$pArg;}
	public function setdish_food_wine_pair($pArg="0") {$this->dish_food_wine_pair=$pArg;}	
	
	public function setdish_pair_note($pArg="0") {$this->dish_pair_note=$pArg;}	
	
	public function setdish_notes($pArg="0") {$this->dish_notes=$pArg;}
	public function setdish_img($pArg="0") {$this->dish_img=$pArg;}
	
	public function setdish_winery($pArg="0") {$this->dish_winery=$pArg;}
	public function setdish_type_cat($pArg="0") {$this->dish_type_cat=$pArg;}
	public function setdish_alcohol_percent($pArg="0") {$this->dish_alcohol_percent=$pArg;}
	public function setdish_vintage($pArg="0") {$this->dish_vintage=$pArg;}
	public function setdish_varietal($pArg="0") {$this->dish_varietal=$pArg;}
	public function setdish_region($pArg="0") {$this->dish_region=$pArg;}
	public function setdish_country($pArg="0") {$this->dish_country=$pArg;}
	public function setdish_bottle_price($pArg="0") {$this->dish_bottle_price=$pArg;}
	public function setdish_glass_price($pArg="0") {$this->dish_glass_price=$pArg;}
	public function setdish_winemaking($pArg="0") {$this->dish_winemaking=$pArg;}
	public function setdish_maturity($pArg="0") {$this->dish_maturity=$pArg;}
	public function setdish_is_drink($pArg="0") {$this->dish_is_drink=$pArg;}
	
	public function setdish_attributes($pArg="0") {$this->dish_attributes=$pArg;}
	public function setdish_food_notes($pArg="0") {$this->dish_food_notes=$pArg;}
	
	public function setdish_ethor_mnu_itm_id($pArg="0") {$this->dish_ethor_mnu_itm_id=$pArg;}
	public function setdish_ethor_mnu_itm_img($pArg="0") {$this->dish_ethor_mnu_itm_img=$pArg;}
	
	public function setdish_start_date($pArg="0") {$this->dish_start_date=$pArg;}
	public function setdish_end_date($pArg="0") {$this->dish_end_date=$pArg;}
	public function setdish_restaurent($pArg='0') {$this->dish_restaurent = $pArg;}
	public function settbl_dishes_active_date($pArg="0") {$this->tbl_dishes_active_date=$pArg;}
	public function settbl_dishes_deactive_date($pArg="0") {$this->tbl_dishes_deactive_date=$pArg;}	
	

	public function getdish_id() {return $this->dish_id;}
	public function getdish_name() {return $this->dish_name;}
	public function getdish_chef_notes() {return $this->dish_chef_notes;}
	public function getdish_ingrad_allergic_contents() {return $this->dish_ingrad_allergic_contents;}
	
	public function getdish_is_nutrition_text() {return $this->dish_is_nutrition_text;}	
	
	public function getdish_nutri_cal_info() {return $this->dish_nutri_cal_info;}	
	public function getdish_allergy() {return $this->dish_allergy;}
	public function getdish_food_wine_pair() {return $this->dish_food_wine_pair;}	
	
	public function getdish_pair_note() {return $this->dish_pair_note;}	
	
	public function getdish_notes() {return $this->dish_notes;}
	public function getdish_img() {return $this->dish_img;}
	
	public function getdish_winery() {return $this->dish_winery;}
	public function getdish_type_cat() {return $this->dish_type_cat;}
	public function getdish_alcohol_percent() {return $this->dish_alcohol_percent;}
	public function getdish_vintage() {return $this->dish_vintage;}
	public function getdish_varietal() {return $this->dish_varietal;}
	public function getdish_region() {return $this->dish_region;}
	public function getdish_country() {return $this->dish_country;}
	public function getdish_bottle_price() {return $this->dish_bottle_price;}
	public function getdish_glass_price() {return $this->dish_glass_price;}
	public function getdish_winemaking() {return $this->dish_winemaking;}
	public function getdish_maturity() {return $this->dish_maturity;}
	public function getdish_is_drink() {return $this->dish_is_drink;}
	
	public function getdish_attributes() {return $this->dish_attributes;}
	public function getdish_food_notes() {return $this->dish_food_notes;}
	
	public function getdish_ethor_mnu_itm_id() {return $this->dish_ethor_mnu_itm_id;}
	public function getdish_ethor_mnu_itm_img() {return $this->dish_ethor_mnu_itm_img;}
	
	public function getdish_start_date() {return $this->dish_start_date;}
	public function getdish_end_date() {return $this->dish_end_date;}
	public function getdish_restaurent() {return $this->dish_restaurent;}
	public function gettbl_dishes_active_date($pArg="0") {return $this->tbl_dishes_active_date;}
	public function gettbl_dishes_deactive_date($pArg="0") {return $this->tbl_dishes_deactive_date;}

	public function readObject($array = array()) {
		$qry = "SELECT *".RET."FROM ".TBL_DISHES.RET;
		$and = "WHERE".RET;

		if($array[DISH_ID] != "") {
			$qry .= $and.DISH_ID." = '".$array[DISH_ID]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NAME] != "") {
			$qry .= $and.DISH_NAME." = '".$array[DISH_NAME]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_ALLERGY] != "") {
			$qry .= $and.DISH_ALLERGY." = '".$array[DISH_ALLERGY]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_FOOD_WINE_PAIR] != "") {
			$qry .= $and.DISH_FOOD_WINE_PAIR." = '".$array[DISH_FOOD_WINE_PAIR]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_PAIR_NOTE] != "") {
			$qry .= $and.DISH_PAIR_NOTE." = '".$array[DISH_PAIR_NOTE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_CHEF_NOTES] != "") {
			$qry .= $and.DISH_CHEF_NOTES." = '".$array[DISH_CHEF_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_INGRAD_ALLERGIC_CONTENTS] != "") {
			$qry .= $and.DISH_INGRAD_ALLERGIC_CONTENTS." = '".$array[DISH_INGRAD_ALLERGIC_CONTENTS]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_IS_NUTRITION_TEXT] != "") {
			$qry .= $and.DISH_IS_NUTRITION_TEXT." = '".$array[DISH_IS_NUTRITION_TEXT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NUTRI_CAL_INFO] != "") {
			$qry .= $and.DISH_NUTRI_CAL_INFO." = '".$array[DISH_NUTRI_CAL_INFO]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NOTES] != "") {
			$qry .= $and.DISH_NOTES." = '".$array[DISH_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IMG] != "") {
			$qry .= $and.DISH_IMG." = '".$array[DISH_IMG]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_WINERY] != "") {
			$qry .= $and.DISH_WINERY." = '".$array[DISH_WINERY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_TYPE_CAT] != "") {
			$qry .= $and.DISH_TYPE_CAT." = '".$array[DISH_TYPE_CAT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_ALCOHOL_PERCENT] != "") {
			$qry .= $and.DISH_ALCOHOL_PERCENT." = '".$array[DISH_ALCOHOL_PERCENT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VINTAGE] != "") {
			$qry .= $and.DISH_VINTAGE." = '".$array[DISH_VINTAGE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VARIETAL] != "") {
			$qry .= $and.DISH_VARIETAL." = '".$array[DISH_VARIETAL]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_REGION] != "") {
			$qry .= $and.DISH_REGION." = '".$array[DISH_REGION]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_COUNTRY] != "") {
			$qry .= $and.DISH_COUNTRY." = '".$array[DISH_COUNTRY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_BOTTLE_PRICE] != "") {
			$qry .= $and.DISH_BOTTLE_PRICE." = '".$array[DISH_BOTTLE_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_GLASS_PRICE] != "") {
			$qry .= $and.DISH_GLASS_PRICE." = '".$array[DISH_GLASS_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_WINEMAKING] != "") {
			$qry .= $and.DISH_WINEMAKING." = '".$array[DISH_WINEMAKING]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_MATURITY] != "") {
			$qry .= $and.DISH_MATURITY." = '".$array[DISH_MATURITY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IS_DRINK] != "") {
			$qry .= $and.DISH_IS_DRINK." = '".$array[DISH_IS_DRINK]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_RESTAURENT] != "") {
			$qry .= $and.DISH_RESTAURENT." = '".$array[DISH_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_RESTAURENT] != "") {
			$qry .= $and.DISH_RESTAURENT." = '".$array[DISH_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}		

		if($array[DISH_ETHOR_MNU_ITM_ID] != "") {
			$qry .= $and.DISH_ETHOR_MNU_ITM_ID." = '".$array[DISH_ETHOR_MNU_ITM_ID]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_END_DATE] != "") {
			$qry .= $and.DISH_END_DATE." = '".$array[DISH_END_DATE]."'".RET;
			$and = "AND".RET;
		}

	$result = mysql_query($qry);
		if($result) {
			while ($row = mysql_fetch_array($result)) {
				$record = $row;
				break;//end after first record
			}
			if(count($record[0]) == 0) {
				return array();
			} else {
				$this->setdish_id($record[DISH_ID]);
				$this->setdish_name($record[DISH_NAME]);
				$this->setdish_chef_notes($record[DISH_CHEF_NOTES]);
				$this->setdish_ingrad_allergic_contents($record[DISH_INGRAD_ALLERGIC_CONTENTS]);
				
				$this->setdish_is_nutrition_text($record[DISH_IS_NUTRITION_TEXT]);
				
				$this->setdish_nutri_cal_info($record[DISH_NUTRI_CAL_INFO]);
				$this->setdish_notes($record[DISH_NOTES]);				
				$this->setdish_allergy($record[DISH_ALLERGY]);
				$this->setdish_food_wine_pair($record[DISH_FOOD_WINE_PAIR]);
				
				$this->setdish_pair_note($record[DISH_PAIR_NOTE]);
								
				$this->setdish_img($record[DISH_IMG]);
				
				$this->setdish_winery($record[DISH_WINERY]);
				$this->setdish_type_cat($record[DISH_TYPE_CAT]);
				$this->setdish_alcohol_percent($record[DISH_ALCOHOL_PERCENT]);
				$this->setdish_vintage($record[DISH_VINTAGE]);
				$this->setdish_varietal($record[DISH_VARIETAL]);
				$this->setdish_region($record[DISH_REGION]);
				$this->setdish_country($record[DISH_COUNTRY]);
				$this->setdish_bottle_price($record[DISH_BOTTLE_PRICE]);
				$this->setdish_glass_price($record[DISH_GLASS_PRICE]);
				$this->setdish_winemaking($record[DISH_WINEMAKING]);
				$this->setdish_maturity($record[DISH_MATURITY]);
				$this->setdish_is_drink($record[DISH_IS_DRINK]);
				
				$this->setdish_attributes($record[DISH_ATTRIBUTES]);
				$this->setdish_food_notes($record[DISH_FOOD_NOTES]);
				
				$this->setdish_ethor_mnu_itm_id($record[DISH_ETHOR_MNU_ITM_ID]);
				$this->setdish_ethor_mnu_itm_img($record[DISH_ETHOR_MNU_ITM_IMG]);
				
				$this->setdish_start_date($record[DISH_START_DATE]);
				$this->setdish_end_date($record[DISH_END_DATE]);
				$this->setdish_restaurent($record[DISH_RESTAURENT]);
				$this->settbl_dishes_active_date($record[TBL_DISHES_ACTIVE_DATE]);
				$this->settbl_dishes_deactive_date($record[TBL_DISHES_DEACTIVE_DATE]);
				return true;
			}
		}
	}

	public static function readArray($array = array(),&$result_found=0,$isArray=1) {
		global $tbl_dishes_active_condition;
		$qry = "SELECT *".RET."FROM ".TBL_DISHES.RET;
		$and = "WHERE".RET;

		if($array[DISH_ID] != "") {
			$qry .= $and.DISH_ID." = '".$array[DISH_ID]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NAME] != "") {
			$qry .= $and.DISH_NAME." LIKE '%".$array[DISH_NAME]."%'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_CHEF_NOTES] != "") {
			$qry .= $and.DISH_CHEF_NOTES." = '".$array[DISH_CHEF_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_INGRAD_ALLERGIC_CONTENTS] != "") {
			$qry .= $and.DISH_INGRAD_ALLERGIC_CONTENTS." = '".$array[DISH_INGRAD_ALLERGIC_CONTENTS]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_ALLERGY] != "") {
			$qry .= $and.DISH_ALLERGY." = '".$array[DISH_ALLERGY]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_FOOD_WINE_PAIR] != "") {
			$qry .= $and.DISH_FOOD_WINE_PAIR." = '".$array[DISH_FOOD_WINE_PAIR]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_PAIR_NOTE] != "") {
			$qry .= $and.DISH_PAIR_NOTE." = '".$array[DISH_PAIR_NOTE]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_IS_NUTRITION_TEXT] != "") {
			$qry .= $and.DISH_IS_NUTRITION_TEXT." = '".$array[DISH_IS_NUTRITION_TEXT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NUTRI_CAL_INFO] != "") {
			$qry .= $and.DISH_NUTRI_CAL_INFO." = '".$array[DISH_NUTRI_CAL_INFO]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_NOTES] != "") {
			$qry .= $and.DISH_NOTES." = '".$array[DISH_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IMG] != "") {
			$qry .= $and.DISH_IMG." = '".$array[DISH_IMG]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_WINERY] != "") {
			$qry .= $and.DISH_WINERY." = '".$array[DISH_WINERY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_TYPE_CAT] != "") {
			$qry .= $and.DISH_TYPE_CAT." = '".$array[DISH_TYPE_CAT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_ALCOHOL_PERCENT] != "") {
			$qry .= $and.DISH_ALCOHOL_PERCENT." = '".$array[DISH_ALCOHOL_PERCENT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VINTAGE] != "") {
			$qry .= $and.DISH_VINTAGE." = '".$array[DISH_VINTAGE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VARIETAL] != "") {
			$qry .= $and.DISH_VARIETAL." = '".$array[DISH_VARIETAL]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_REGION] != "") {
			$qry .= $and.DISH_REGION." = '".$array[DISH_REGION]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_COUNTRY] != "") {
			$qry .= $and.DISH_COUNTRY." = '".$array[DISH_COUNTRY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_BOTTLE_PRICE] != "") {
			$qry .= $and.DISH_BOTTLE_PRICE." = '".$array[DISH_BOTTLE_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_GLASS_PRICE] != "") {
			$qry .= $and.DISH_GLASS_PRICE." = '".$array[DISH_GLASS_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_WINEMAKING] != "") {
			$qry .= $and.DISH_WINEMAKING." = '".$array[DISH_WINEMAKING]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_MATURITY] != "") {
			$qry .= $and.DISH_MATURITY." = '".$array[DISH_MATURITY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IS_DRINK] != "") {
			$qry .= $and.DISH_IS_DRINK." = '".$array[DISH_IS_DRINK]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_RESTAURENT] != "") {
			$qry .= $and.DISH_RESTAURENT." = '".$array[DISH_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_ETHOR_MNU_ITM_ID] != "") {
			$qry .= $and.DISH_ETHOR_MNU_ITM_ID." = '".$array[DISH_ETHOR_MNU_ITM_ID]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_START_DATE] != "") {
			$qry .= $and.DISH_START_DATE." = '".$array[DISH_START_DATE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_END_DATE] != "") {
			$qry .= $and.DISH_END_DATE." = '".$array[DISH_END_DATE]."'".RET;
			$and = "AND".RET;
		}

		if(is_gt_zero_num($array["isActive"])) {
			$qry .= $and.$tbl_dishes_active_condition;;
			$and = "AND".RET;
		}

		if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		$qry .=" ORDER BY ".$array[SORT_ON]." ".$array[SORT_BY];		}

		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {
			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];
		}else{
			$qry_with_limit  = $qry;
		}
		//echo $qry_with_limit;
		$result = mysql_query ($qry_with_limit);
		$r1 = mysql_query($qry);
		if($r1){
			$result_found = mysql_num_rows($r1);
		}
		$class_objects = array();
		if($result) {
			while ($record = mysql_fetch_assoc($result)) {
				$isActive= 0;
				//..check deactive date is not set or 0
				if((is_not_empty($record[TBL_DISHES_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_DISHES_DEACTIVE_DATE]))== false)){
					$isActive = 1; 
				}else{
					//..check the deactive date is greater than todays date
					if(strtotime($record[TBL_DISHES_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){
						$isActive = 1;
					}
				}

				if($isArray){
					$class_object = array();
					$class_object["dish_id"]=$record[DISH_ID];
					$class_object["dish_name"]=$record[DISH_NAME];
					$class_object["dish_chef_notes"]=$record[DISH_CHEF_NOTES];
					$class_object["dish_ingrad_allergic_contents"]=$record[DISH_INGRAD_ALLERGIC_CONTENTS];
					
					$class_object["dish_is_nutrition_text"]=$record[DISH_IS_NUTRITION_TEXT];
					
					$class_object["dish_nutri_cal_info"]=$record[DISH_NUTRI_CAL_INFO];
					$class_object["dish_notes"]=$record[DISH_NOTES];
					$class_object["dish_img"]=$record[DISH_IMG];
					
					$class_object["dish_winery"]=$record[DISH_WINERY];					
					$class_object["dish_type_cat"]=$record[DISH_TYPE_CAT];
					$class_object["dish_alcohol_percent"]=$record[DISH_ALCOHOL_PERCENT];
					$class_object["dish_vintage"]=$record[DISH_VINTAGE];
					$class_object["dish_varietal"]=$record[DISH_VARIETAL];
					$class_object["dish_region"]=$record[DISH_REGION];
					$class_object["dish_country"]=$record[DISH_COUNTRY];
					$class_object["dish_bottle_price"]=$record[DISH_BOTTLE_PRICE];
					$class_object["dish_glass_price"]=$record[DISH_GLASS_PRICE];
					$class_object["dish_winemaking"]=$record[DISH_WINEMAKING];
					$class_object["dish_maturity"]=$record[DISH_MATURITY];
					$class_object["dish_is_drink"]=$record[DISH_IS_DRINK];
					
					$class_object["dish_attributes"]=$record[DISH_ATTRIBUTES];
					$class_object["dish_food_notes"]=$record[DISH_FOOD_NOTES];
					
					$class_object["dish_ethor_mnu_itm_id"]=$record[DISH_ETHOR_MNU_ITM_ID];
					$class_object["dish_ethor_mnu_itm_img"]=$record[DISH_ETHOR_MNU_ITM_IMG];
				
					$class_object["dish_allergy"]=$record[DISH_ALLERGY];
					$class_object["dish_food_wine_pair"]=$record[DISH_FOOD_WINE_PAIR];
					
					$class_object["dish_pair_note"]=$record[DISH_PAIR_NOTE];
										
					$class_object[DISH_RESTAURENT]=$record[DISH_RESTAURENT];
					$class_object["dish_start_date"]=$record[DISH_START_DATE];
					$class_object["dish_end_date"]=$record[DISH_END_DATE];
					//..add the menu/submenu listed 
					$class_object['submenu'] = tbl_submenu_dishes::readArray(array(SBMNU_DISH_DISH=>$record[DISH_ID]));	
					
					if(is_not_empty($record["dish_attributes"])){					
							$lst_dish_attr=DB::ExecQry('SELECT * FROM `'.TBL_DISH_ATTRIB.'` WHERE `'.DISH_ATTRIB_ID.'` IN ('.trim($record["dish_attributes"]).');');
							$class_object["attrib_details"] =$lst_dish_attr;
					}
					
					if(is_not_empty($record["dish_allergy"])){					
							$lst_allergies=DB::ExecQry('SELECT * FROM `'.TBL_ALLERGY_LIST.'` WHERE `'.ALERGY_ID.'` IN ('.trim($record["dish_allergy"]).');');
							$class_object["allergy_details"] =$lst_allergies;
					}
					
					$class_object["isActive"]=$isActive;
				}else{
					$class_object = new tbl_dishes();
					$class_object->setdish_id($record[DISH_ID]);
					$class_object->setdish_name($record[DISH_NAME]);
					$class_object->setdish_chef_notes($record[DISH_CHEF_NOTES]);
					$class_object->setdish_ingrad_allergic_contents($record[DISH_INGRAD_ALLERGIC_CONTENTS]);
					
					$class_object->setdish_is_nutrition_text($record[DISH_IS_NUTRITION_TEXT]);
					
					$class_object->setdish_nutri_cal_info($record[DISH_NUTRI_CAL_INFO]);
					$class_object->setdish_notes($record[DISH_NOTES]);
					$class_object->setdish_img($record[DISH_IMG]);
					
					$class_object->setdish_winery($record[DISH_WINERY]);
					$class_object->setdish_type_cat($record[DISH_TYPE_CAT]);
					$class_object->setdish_alcohol_percent($record[DISH_ALCOHOL_PERCENT]);
					$class_object->setdish_vintage($record[DISH_VINTAGE]);
					$class_object->setdish_varietal($record[DISH_VARIETAL]);
					$class_object->setdish_region($record[DISH_REGION]);
					$class_object->setdish_country($record[DISH_COUNTRY]);
					$class_object->setdish_bottle_price($record[DISH_BOTTLE_PRICE]);
					$class_object->setdish_glass_price($record[DISH_GLASS_PRICE]);
					$class_object->setdish_winemaking($record[DISH_WINEMAKING]);
					$class_object->setdish_maturity($record[DISH_MATURITY]);
					$class_object->setdish_is_drink($record[DISH_IS_DRINK]);
					
					$class_object->setdish_attributes($record[DISH_ATTRIBUTES]);
					$class_object->setdish_food_notes($record[DISH_FOOD_NOTES]);
					
					$class_object->setdish_ethor_mnu_itm_id($record[DISH_ETHOR_MNU_ITM_ID]);
					$class_object->setdish_ethor_mnu_itm_img($record[DISH_ETHOR_MNU_ITM_IMG]);
					
					$class_object->setdish_allergy($record[DISH_ALLERGY]);
					$class_object->setdish_food_wine_pair($record[DISH_FOOD_WINE_PAIR]);	
					
					$class_object->setdish_pair_note($record[DISH_PAIR_NOTE]);
								
					$class_object->setdish_restaurent($record[DISH_RESTAURENT]);
					$class_object->setdish_start_date($record[DISH_START_DATE]);
					$class_object->setdish_end_date($record[DISH_END_DATE]);
				}
				$class_objects[$record[DISH_ID]] = $class_object;
			}
		}
		return $class_objects;
	}//..End readArray
	
	
	//..Function for the dish rating 
	public static function readArray_fdk($array = array(),&$result_found=0,$isArray=1,$fts_is_restaurant=0) {
		global $tbl_dishes_active_condition;
		//$qry = "SELECT *".RET."FROM ".TBL_DISHES.RET;
		//$and = "WHERE".RET;
		$qry="";
		
		$and = " AND ";		
		//$and = "WHERE".RET;		
		
		if($array[DISH_ID] != "") {
			$qry .= $and.DISH_ID." = ".$array[DISH_ID]."".RET;
			$and = "AND".RET;
		}
		
		if($array[RECOMM_TABLE] != "") {
			$qry .= $and.RECOMM_TABLE." = ".$array[RECOMM_TABLE]."".RET;
			$and = "AND".RET;
		}
		
		if($array[FDBK_RESTAURENT] != "") {
			$qry .= $and.FDBK_RESTAURENT." = '".$array[FDBK_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}

		if(($array['fts_start_date'] != "") && ($array['fts_start_date'] != "")) {
			$qry .= $and."`f`.`start_date` >= '".date('Y-m-d 00:00:00',strtotime($array['fts_start_date']))."' AND `f`.`start_date` <= '".date('Y-m-d 23:59:59',strtotime($array['fts_end_date']))."'".RET;
			$and = "AND".RET;
		}		

		if(is_gt_zero_num($array["isActive"])) {
			$tbl_feedbk_active_condition= " (( `f`.`end_date` is NULL OR `f`.`end_date` = 0 OR `f`.`end_date` > CURDATE() ) AND {$tbl_dishes_active_condition} ) ";
			$qry .= $and.$tbl_feedbk_active_condition;
			$and = "AND".RET;
		}		
		
		if(is_gt_zero_num($fts_is_restaurant)){
			$sql="SELECT `f`.*,`r`.`restaurent_name`,`r`.`restaurent_img`,
					AVG(`f`.`recomm_rating`) `star_overall`,
					AVG(`f`.`recomm_QOS_rating`) `star_QOS`,
					AVG(`f`.`recomm_QOF_rating`) `star_QOF`,
					AVG(`f`.`recomm_ambience_rating`) `star_ambience`  
					FROM `tbl_feedback` as `f` 		
					INNER JOIN `tbl_restaurent` as `r` ON `r`.`restaurent_id`=`f`.`post_id`		
					WHERE
					`post_type`='Business' {$qry} 
					GROUP BY `post_id` 
					ORDER BY `star_overall` DESC";
			
		}else{
			$sql= "SELECT d.*,AVG(`f`.`recomm_rating`) `star_rating`  
					FROM `tbl_feedback` as `f` 
					INNER JOIN `tbl_submenu_dishes` as `smd` ON `smd`.`sbmnu_dish_id`=`f`.`post_id`
					INNER JOIN `tbl_dishes` as `d` ON `smd`.`sbmnu_dish_dish`=`d`.`dish_id`
					WHERE
					`post_type`='SubMenuDish' {$qry} 
					GROUP BY `post_id` 
					ORDER BY `star_rating` DESC";				
	}	
		$qry=$sql;		

		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {
			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];
		}else{
			$qry_with_limit  = $qry;
		}

		$result = mysql_query ($qry_with_limit);
		$r1 = mysql_query($qry);
		if($r1){
			$result_found = mysql_num_rows($r1);
		}
		$class_objects = array();
		if($result) {
			while ($record = mysql_fetch_assoc($result)) {
				$isActive= 0;
				//..check deactive date is not set or 0
				if((is_not_empty($record[TBL_DISHES_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_DISHES_DEACTIVE_DATE]))== false)){
					$isActive = 1; 
				}else{
					//..check the deactive date is greater than todays date
					if(strtotime($record[TBL_DISHES_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){
						$isActive = 1;
					}
				}

				if($isArray){
					$class_object = array();
					if(is_gt_zero_num($fts_is_restaurant)){
						$class_object["restaurent_name"]=$record['restaurent_name'];
						$class_object["restaurent_img"]=$record['restaurent_img'];
						
						$class_object["star_overall"]=ceil($record['star_overall'] * 2);	
						$class_object["star_QOS"]=ceil($record['star_QOS'] * 2);	
						$class_object["star_QOF"]=ceil($record['star_QOF'] * 2);	
						$class_object["star_ambience"]=ceil($record['star_ambience'] * 2);
						
						$class_object['id']=$record[ID];
						$class_object['post_id']=$record[POST_ID];
						$class_object['post_title']=$record[POST_TITLE];
						$class_object['post_type']=$record[POST_TYPE];
						$class_object['customer_name']=$record['customer_name'];
						$class_object[USER_ID]=$record[USER_ID];
						$class_object[USER_TYPE]=$record[USER_TYPE];
						$class_object['recomm_title']=$record[RECOMM_TITLE];
						$class_object['recomm_desc']=$record[RECOMM_DESC];
						$class_object['recomm_rating']=$record[RECOMM_RATING];
						$class_object['rate']=ceil($record[RECOMM_RATING] *2);
						$class_object['recomm_QOS_rating']=$record[RECOMM_QOS_RATING];
						$class_object['recomm_QOF_rating']=$record[RECOMM_QOF_RATING];
						$class_object['recomm_ambience_rating']=$record[RECOMM_AMBIENCE_RATING];
						
						$class_object['recomm_email']=$record[RECOMM_EMAIL];
						$class_object['recomm_phone']=$record[RECOMM_PHONE];
						$class_object['recomm_table']=$record[RECOMM_TABLE];					
					
						$class_object['start_date']=$record[START_DATE];
						$class_object['end_date']=$record[END_DATE];
						$class_object['isActive']=$isActive;
						$class_object['fdbk_restaurent']=$record[FDBK_RESTAURENT];
					}else{
						$class_object["dish_id"]=$record[DISH_ID];
						$class_object["dish_name"]=$record[DISH_NAME];
						$class_object["dish_chef_notes"]=$record[DISH_CHEF_NOTES];
						$class_object["dish_ingrad_allergic_contents"]=$record[DISH_INGRAD_ALLERGIC_CONTENTS];
						$class_object["dish_nutri_cal_info"]=$record[DISH_NUTRI_CAL_INFO];
						$class_object["dish_notes"]=$record[DISH_NOTES];
						$class_object["dish_img"]=$record[DISH_IMG];
						
						$class_object["dish_allergy"]=$record[DISH_ALLERGY];
						$class_object["dish_food_wine_pair"]=$record[DISH_FOOD_WINE_PAIR];
						
						$class_object[DISH_RESTAURENT]=$record[DISH_RESTAURENT];
						$class_object["dish_start_date"]=$record[DISH_START_DATE];
						$class_object["dish_end_date"]=$record[DISH_END_DATE];
						//..Add the menu/submenu listed 
						$class_object['submenu'] = tbl_submenu_dishes::readArray(array(SBMNU_DISH_DISH=>$record[DISH_ID]));
						$class_object["star_rating"]=ceil($record['star_rating'] * 2);					
						
						$class_object["isActive"]=$isActive;	
					}					
				}else{
					$class_object = new tbl_dishes();
					$class_object->setdish_id($record[DISH_ID]);
					$class_object->setdish_name($record[DISH_NAME]);
					$class_object->setdish_chef_notes($record[DISH_CHEF_NOTES]);
					$class_object->setdish_ingrad_allergic_contents($record[DISH_INGRAD_ALLERGIC_CONTENTS]);
					$class_object->setdish_nutri_cal_info($record[DISH_NUTRI_CAL_INFO]);
					$class_object->setdish_notes($record[DISH_NOTES]);
					$class_object->setdish_img($record[DISH_IMG]);
					
					$class_object->setdish_allergy($record[DISH_ALLERGY]);
					$class_object->setdish_food_wine_pair($record[DISH_FOOD_WINE_PAIR]);
					
					$class_object->setdish_pair_note($record[DISH_PAIR_NOTE]);
					
					$class_object->setdish_restaurent($record[DISH_RESTAURENT]);
					$class_object->setdish_start_date($record[DISH_START_DATE]);
					$class_object->setdish_end_date($record[DISH_END_DATE]);
				}
				if(is_gt_zero_num($fts_is_restaurant)){
					$class_objects[$record[ID]] = $class_object;
				}else{
					$class_objects[$record[DISH_ID]] = $class_object;
				}
			}
		}
		return $class_objects;
	}//..End readArray_fdk

	public function insert() {
		if($this->getdish_id() != '') {
			$qry  = "UPDATE ".TBL_DISHES.RET."SET".RET."
			".DISH_ID." = '".$this->getdish_id()."',".RET."
			".DISH_NAME." = '".$this->getdish_name()."',".RET."
			".DISH_CHEF_NOTES." = '".$this->getdish_chef_notes()."',".RET."
			".DISH_INGRAD_ALLERGIC_CONTENTS." = '".$this->getdish_ingrad_allergic_contents()."',".RET."			
			".DISH_ALLERGY." = '".$this->getdish_allergy()."',".RET."
			".DISH_FOOD_WINE_PAIR." = '".$this->getdish_food_wine_pair()."',".RET."	
			
			".DISH_PAIR_NOTE." = '".$this->getdish_pair_note()."',".RET."	
			
			".DISH_IS_NUTRITION_TEXT." = '".$this->getdish_is_nutrition_text()."',".RET."
			
			".DISH_NUTRI_CAL_INFO." = '".$this->getdish_nutri_cal_info()."',".RET."
			".DISH_NOTES." = '".$this->getdish_notes()."',".RET."
			".DISH_IMG." = '".$this->getdish_img()."',".RET."
			
			".DISH_WINERY." = '".$this->getdish_winery()."',".RET."
			".DISH_TYPE_CAT." = '".$this->getdish_type_cat()."',".RET."
			".DISH_ALCOHOL_PERCENT." = '".$this->getdish_alcohol_percent()."',".RET."
			".DISH_VINTAGE." = '".$this->getdish_vintage()."',".RET."
			".DISH_VARIETAL." = '".$this->getdish_varietal()."',".RET."
			".DISH_REGION." = '".$this->getdish_region()."',".RET."
			".DISH_COUNTRY." = '".$this->getdish_country()."',".RET."
			".DISH_BOTTLE_PRICE." = '".$this->getdish_bottle_price()."',".RET."
			".DISH_GLASS_PRICE." = '".$this->getdish_glass_price()."',".RET."
			".DISH_WINEMAKING." = '".$this->getdish_winemaking()."',".RET."
			".DISH_MATURITY." = '".$this->getdish_maturity()."',".RET."
			".DISH_IS_DRINK." = '".$this->getdish_is_drink()."',".RET."
			
			".DISH_ATTRIBUTES." = '".$this->getdish_attributes()."',".RET."
			".DISH_FOOD_NOTES." = '".$this->getdish_food_notes()."',".RET."
			
			
			".DISH_RESTAURENT." = '".$this->getdish_restaurent()."',".RET."
			".DISH_START_DATE." = '".$this->getdish_start_date()."',".RET."
			".DISH_END_DATE." = '".$this->getdish_end_date()."'".RET.
			"WHERE ".DISH_ID." = ".$this->getdish_id().RET;
// echo $qry;
//".DISH_ETHOR_MNU_ITM_ID." = '".$this->getdish_ethor_mnu_itm_id()."',".RET."
//".DISH_ETHOR_MNU_ITM_IMG." = '".$this->getdish_ethor_mnu_itm_img()."',".RET."

			mysql_query($qry);
		} else {
			$qry  = "INSERT INTO ".TBL_DISHES." (".RET.
			"".DISH_NAME.", ".DISH_CHEF_NOTES.", ".DISH_INGRAD_ALLERGIC_CONTENTS.", ".DISH_IS_NUTRITION_TEXT.", ".DISH_NUTRI_CAL_INFO.", ".DISH_ALLERGY.", ".DISH_FOOD_WINE_PAIR.", ".DISH_PAIR_NOTE.", ".DISH_NOTES.", ".DISH_IMG.", ".DISH_WINERY.", ".DISH_TYPE_CAT.", ".DISH_ALCOHOL_PERCENT.", ".DISH_VINTAGE.", ".DISH_VARIETAL.", ".DISH_REGION.", ".DISH_COUNTRY.", ".DISH_BOTTLE_PRICE.", ".DISH_GLASS_PRICE.", ".DISH_WINEMAKING.", ".DISH_MATURITY.", ".DISH_IS_DRINK.",".DISH_ATTRIBUTES.",".DISH_FOOD_NOTES.",".DISH_RESTAURENT.",".DISH_ETHOR_MNU_ITM_ID.",".DISH_ETHOR_MNU_ITM_IMG.", ".DISH_START_DATE.", ".DISH_END_DATE.RET.
				") VALUES (".RET.
			"'".$this->getdish_name()."',".RET.
			"'".$this->getdish_chef_notes()."',".RET.
			"'".$this->getdish_ingrad_allergic_contents()."',".RET.
			
			"'".$this->getdish_is_nutrition_text()."',".RET.
			
			"'".$this->getdish_nutri_cal_info()."',".RET.			
			"'".$this->getdish_allergy()."',".RET.
			"'".$this->getdish_food_wine_pair()."',".RET.			
			
			"'".$this->getdish_pair_note()."',".RET.	
			
			"'".$this->getdish_notes()."',".RET.
			"'".$this->getdish_img()."',".RET.
			
			"'".$this->getdish_winery()."',".RET.
			"'".$this->getdish_type_cat()."',".RET.
			"'".$this->getdish_alcohol_percent()."',".RET.
			"'".$this->getdish_vintage()."',".RET.
			"'".$this->getdish_varietal()."',".RET.
			"'".$this->getdish_region()."',".RET.
			"'".$this->getdish_country()."',".RET.
			"'".$this->getdish_bottle_price()."',".RET.
			"'".$this->getdish_glass_price()."',".RET.
			"'".$this->getdish_winemaking()."',".RET.
			"'".$this->getdish_maturity()."',".RET.
			"'".$this->getdish_is_drink()."',".RET.
			
			"'".$this->getdish_attributes()."',".RET.
			"'".$this->getdish_food_notes()."',".RET.
			
			"'".$this->getdish_restaurent()."',".RET.
			
			"'".$this->getdish_ethor_mnu_itm_id()."',".RET.
			"'".$this->getdish_ethor_mnu_itm_img()."',".RET.
			
			"'".$this->getdish_start_date()."',".RET.
			"'".$this->getdish_end_date()."'".RET.
			")".RET;
//echo $qry;
			$res = mysql_query($qry);
			$this->setdish_id(mysql_insert_id());
		}
	}//..End Insert

	public static function delete($array = array()) {
		$qry = "DELETE".RET."FROM ".TBL_DISHES.RET;
		$and = "WHERE".RET;

		if($array[DISH_ID] != "") {
			$qry .= $and.DISH_ID." IN (".$array[DISH_ID].")".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NAME] != "") {
			$qry .= $and.DISH_NAME." = '".$array[DISH_NAME]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_CHEF_NOTES] != "") {
			$qry .= $and.DISH_CHEF_NOTES." = '".$array[DISH_CHEF_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_INGRAD_ALLERGIC_CONTENTS] != "") {
			$qry .= $and.DISH_INGRAD_ALLERGIC_CONTENTS." = '".$array[DISH_INGRAD_ALLERGIC_CONTENTS]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_IS_NUTRITION_TEXT] != "") {
			$qry .= $and.DISH_IS_NUTRITION_TEXT." = '".$array[DISH_IS_NUTRITION_TEXT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NUTRI_CAL_INFO] != "") {
			$qry .= $and.DISH_NUTRI_CAL_INFO." = '".$array[DISH_NUTRI_CAL_INFO]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_ALLERGY] != "") {
			$qry .= $and.DISH_ALLERGY." = '".$array[DISH_ALLERGY]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_FOOD_WINE_PAIR] != "") {
			$qry .= $and.DISH_FOOD_WINE_PAIR." = '".$array[DISH_FOOD_WINE_PAIR]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_NOTES] != "") {
			$qry .= $and.DISH_NOTES." = '".$array[DISH_NOTES]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IMG] != "") {
			$qry .= $and.DISH_IMG." = '".$array[DISH_IMG]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_WINERY] != "") {
			$qry .= $and.DISH_WINERY." = '".$array[DISH_WINERY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_TYPE_CAT] != "") {
			$qry .= $and.DISH_TYPE_CAT." = '".$array[DISH_TYPE_CAT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_ALCOHOL_PERCENT] != "") {
			$qry .= $and.DISH_ALCOHOL_PERCENT." = '".$array[DISH_ALCOHOL_PERCENT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VINTAGE] != "") {
			$qry .= $and.DISH_VINTAGE." = '".$array[DISH_VINTAGE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_VARIETAL] != "") {
			$qry .= $and.DISH_VARIETAL." = '".$array[DISH_VARIETAL]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_REGION] != "") {
			$qry .= $and.DISH_REGION." = '".$array[DISH_REGION]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_COUNTRY] != "") {
			$qry .= $and.DISH_COUNTRY." = '".$array[DISH_COUNTRY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_BOTTLE_PRICE] != "") {
			$qry .= $and.DISH_BOTTLE_PRICE." = '".$array[DISH_BOTTLE_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_GLASS_PRICE] != "") {
			$qry .= $and.DISH_GLASS_PRICE." = '".$array[DISH_GLASS_PRICE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_WINEMAKING] != "") {
			$qry .= $and.DISH_WINEMAKING." = '".$array[DISH_WINEMAKING]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_MATURITY] != "") {
			$qry .= $and.DISH_MATURITY." = '".$array[DISH_MATURITY]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_IS_DRINK] != "") {
			$qry .= $and.DISH_IS_DRINK." = '".$array[DISH_IS_DRINK]."'".RET;
			$and = "AND".RET;
		}
		
		if($array[DISH_RESTAURENT] != "") {
			$qry .= $and.DISH_RESTAURENT." = '".$array[DISH_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_START_DATE] != "") {
			$qry .= $and.DISH_START_DATE." = '".$array[DISH_START_DATE]."'".RET;
			$and = "AND".RET;
		}

		if($array[DISH_END_DATE] != "") {
			$qry .= $and.DISH_END_DATE." = '".$array[DISH_END_DATE]."'".RET;
			$and = "AND".RET;
		}

		$res = mysql_query($qry);
		if($res){
			return OPERATION_SUCCESS;
		};
		return OPERATION_FAIL;
	}//..End Delete

	public function isAlreadyThere($dish_name ,$dish_chef_notes ,$dish_ingrad_allergic_contents ,$dish_nutri_cal_info ,$dish_notes ,$dish_img,$dish_restaurent) {
		$unique_arr = array();
			//$unique_arr[DISH_ID]=$dish_id;
				//$unique_arr[DISH_NAME]=$dish_name;
				//$unique_arr[DISH_RESTAURENT]=$dish_restaurent;
			//$unique_arr[DISH_CHEF_NOTES]=$dish_chef_notes;
			//$unique_arr[DISH_INGRAD_ALLERGIC_CONTENTS]=$dish_ingrad_allergic_contents;
			//$unique_arr[DISH_NUTRI_CAL_INFO]=$dish_nutri_cal_info;
			//$unique_arr[DISH_NOTES]=$dish_notes;
			//$unique_arr[DISH_IMG]=$dish_img;
			//$unique_arr[DISH_START_DATE]=$dish_start_date;
			//$unique_arr[DISH_END_DATE]=$dish_end_date;
		if(is_not_empty($unique_arr)){
			return $this->readObject($unique_arr);
		}
		return false;
	}//..isAlreadyThere

	public function create($dish_name ,$dish_chef_notes ,$dish_ingrad_allergic_contents ,$dish_nutri_cal_info ,$dish_notes ,$dish_img ,$dish_winery ,$dish_type_cat ,$dish_alcohol_percent ,$dish_vintage ,$dish_varietal ,$dish_region ,$dish_country ,$dish_bottle_price ,$dish_glass_price ,$dish_winemaking ,$dish_maturity ,$dish_is_drink ,$dish_restaurent=0,$dish_allergy='',$dish_food_wine_pair='',$dish_attributes='',$dish_pair_note='',$dish_is_nutrition_text=0,$dish_food_notes='',$dish_ethor_mnu_itm_id='',$dish_ethor_mnu_itm_img='') {
		if(is_not_empty($dish_name)){
			if($this->isAlreadyThere($dish_name ,$dish_chef_notes ,$dish_ingrad_allergic_contents ,$dish_nutri_cal_info ,$dish_notes ,$dish_img,$dish_restaurent )){
				return OPERATION_DUPLICATE;
			}else{
				$this->setdish_id("");
				$this->setdish_name($dish_name);
				$this->setdish_chef_notes($dish_chef_notes);
				$this->setdish_ingrad_allergic_contents($dish_ingrad_allergic_contents);
				
				$this->setdish_is_nutrition_text($dish_is_nutrition_text);
				
				$this->setdish_nutri_cal_info($dish_nutri_cal_info);				
				$this->setdish_allergy($dish_allergy);
				//$this->setdish_food_wine_pair($dish_food_wine_pair);	
				
				$this->setdish_pair_note($dish_pair_note);
							
				$this->setdish_notes($dish_notes);
				$this->setdish_img($dish_img);
				
				$this->setdish_winery($dish_winery);
				$this->setdish_type_cat($dish_type_cat);
				$this->setdish_alcohol_percent($dish_alcohol_percent);
				$this->setdish_vintage($dish_vintage);
				$this->setdish_varietal($dish_varietal);
				$this->setdish_region($dish_region);
				$this->setdish_country($dish_country);
				$this->setdish_bottle_price($dish_bottle_price);
				$this->setdish_glass_price($dish_glass_price);
				$this->setdish_winemaking($dish_winemaking);
				$this->setdish_maturity($dish_maturity);
				$this->setdish_is_drink($dish_is_drink);
				
				$this->setdish_attributes($dish_attributes);
				$this->setdish_food_notes($dish_food_notes);		
				
				$this->setdish_ethor_mnu_itm_id($dish_ethor_mnu_itm_id);
				$this->setdish_ethor_mnu_itm_img($dish_ethor_mnu_itm_img);			
				
				$this->setdish_restaurent($dish_restaurent);
				$this->setdish_start_date(date(DATE_FORMAT));
				$this->insert();
				
				$lst_insert_id=$this->getdish_id();
				//..Add food pairing if there are any
				if(is_gt_zero_num($lst_insert_id) && is_not_empty($dish_food_wine_pair)){
					$objtbl_food_pairing= new tbl_food_pairing();
					foreach($dish_food_wine_pair as $_each_dish){						
						$isSuccess = $objtbl_food_pairing->create($lst_insert_id, $_each_dish,'','');								
					}
					unset($objtbl_food_pairing);								
				}
				//..if dish is of is_drink type then add options to that dish
				if(is_gt_zero_num($lst_insert_id) && is_gt_zero_num($dish_is_drink)){
					self::addWineFullOrGlassOptions($lst_insert_id);					
				}
				return $lst_insert_id;
			}
		}
		return OPERATION_FAIL;
	}//..create

	public function update($dish_id, $dish_name, $dish_chef_notes, $dish_ingrad_allergic_contents, $dish_nutri_cal_info, $dish_notes, $dish_img,$dish_winery ,$dish_type_cat ,$dish_alcohol_percent ,$dish_vintage ,$dish_varietal ,$dish_region ,$dish_country ,$dish_bottle_price ,$dish_glass_price ,$dish_winemaking ,$dish_maturity ,$dish_is_drink ,$dish_restaurent=0,$dish_allergy='',$dish_food_wine_pair='',$dish_attributes='',$dish_pair_note='',$dish_is_nutrition_text=0,$dish_food_notes='',$dish_ethor_mnu_itm_id='',$dish_ethor_mnu_itm_img='') {
		if(is_gt_zero_num($dish_id)){
			if ($this->readObject(array(DISH_ID=>$dish_id))){
			
				$is_fnd=DB::ExecScalarQry('SELECT COUNT(`'.DISH_ID.'`) as `fnd` FROM `'.TBL_DISHES.'` WHERE `'.DISH_ID.'` != '.$dish_id.' AND `'.DISH_RESTAURENT.'` = '.$dish_restaurent.' AND `'.DISH_NAME.'` = "'.trim($dish_name).'";',0);	
				
				if(is_gt_zero_num($is_fnd)==FALSE){
					$this->setdish_name($dish_name);
					$this->setdish_chef_notes($dish_chef_notes);
					$this->setdish_ingrad_allergic_contents($dish_ingrad_allergic_contents);
					
					$this->setdish_is_nutrition_text($dish_is_nutrition_text);
					
					$this->setdish_nutri_cal_info($dish_nutri_cal_info);				
					$this->setdish_allergy($dish_allergy);
					//$this->setdish_food_wine_pair($dish_food_wine_pair);		
					$this->setdish_pair_note($dish_pair_note);		
					$this->setdish_notes($dish_notes);				
					$this->setdish_restaurent($dish_restaurent);
					if(is_not_empty($dish_img))
						$this->setdish_img($dish_img);
				
					$this->setdish_winery($dish_winery);
					$this->setdish_type_cat($dish_type_cat);
					$this->setdish_alcohol_percent($dish_alcohol_percent);
					$this->setdish_vintage($dish_vintage);
					$this->setdish_varietal($dish_varietal);
					$this->setdish_region($dish_region);
					$this->setdish_country($dish_country);
					$this->setdish_bottle_price($dish_bottle_price);
					$this->setdish_glass_price($dish_glass_price);
					$this->setdish_winemaking($dish_winemaking);
					$this->setdish_maturity($dish_maturity);
					$this->setdish_is_drink($dish_is_drink);	
					
					$this->setdish_attributes($dish_attributes);
					$this->setdish_food_notes($dish_food_notes);
					
					//...ethor import fields
					if(is_not_empty($dish_ethor_mnu_itm_id))
						$this->setdish_ethor_mnu_itm_id($dish_ethor_mnu_itm_id);
					if(is_not_empty($dish_ethor_mnu_itm_img))
						$this->setdish_ethor_mnu_itm_img($dish_ethor_mnu_itm_img);
						
					$this->insert();
	 				
					//..Add food pairing if there are any
					$objtbl_food_pairing= new tbl_food_pairing();				
					//..first delete any records there
					$isSuccess = $objtbl_food_pairing->delete(array(FOOD_PAIR_MAIN_DISH=>$dish_id));
					if(is_not_empty($dish_food_wine_pair)){					
						foreach($dish_food_wine_pair as $_each_dish){						
							$isSuccess = $objtbl_food_pairing->create($dish_id,$_each_dish,'','');
						}												
					}
					unset($objtbl_food_pairing);
					//..If dish is of is_drink type then update price for the all submenu dishes
					if(is_gt_zero_num($dish_id) && is_gt_zero_num($dish_is_drink)&& is_gt_zero_num($dish_bottle_price)&& is_gt_zero_num($dish_glass_price)){
						tbl_submenu_dishes::updateBottleGlassPrice($dish_id);					
					}
					
					return OPERATION_SUCCESS;	 	
				}else{
					return OPERATION_DUPLICATE;
				}
			}
		}
		return OPERATION_FAIL;
	}//..update
	
	public function delete_img($dish_id){
		if(is_not_empty($dish_id)){
			//if ($this->readObject(array(DISH_ID=>$dish_id))){
				$qry  = 'UPDATE '.TBL_DISHES.RET.'SET'.RET.'
			'.DISH_IMG.' = "" WHERE '.DISH_ID.' IN ('.$dish_id.')';
				$res = mysql_query($qry);
				if($res){
					//tbl_submenu_dishes::mkActiveDeactiveByDish($dish_id,1);
					return 1;
				}
			//}
		}
		return 0;
	}//..end activate

	public function activate($dish_id){
		if(is_not_empty($dish_id)){
			//if ($this->readObject(array(DISH_ID=>$dish_id))){
				$qry  = 'UPDATE '.TBL_DISHES.RET.'SET'.RET.'
			'.TBL_DISHES_DEACTIVE_DATE.' = \''.date(EMPTY_DATE_FORMAT).'\' WHERE '.DISH_ID.' IN ('.$dish_id.')';
				$res = mysql_query($qry);
				if($res){
					//tbl_submenu_dishes::mkActiveDeactiveByDish($dish_id,1);
					return 1;
				}
			//}
		}
		return 0;
	}//..end activate

	public function deactivate($dish_id){
		if(is_not_empty($dish_id)){
			//if ($this->readObject(array(DISH_ID=>$dish_id))){
				$qry  = 'UPDATE '.TBL_DISHES.RET.'SET'.RET.'
			'.TBL_DISHES_DEACTIVE_DATE.' = \''.date(DATE_FORMAT).'\' WHERE '.DISH_ID.' IN ('.$dish_id.') ';
				$res = mysql_query($qry);
				if($res){
					tbl_submenu_dishes::mkActiveDeactiveByDish($dish_id,0);
					return 1;
				}
			//}
		}
		return 0;
	}//..end deactivate

	public static function GetInfo($dish_id) {
		$info = array();
		if($dish_id != ""){
			$obj_tbl_dishes = new tbl_dishes();
			if($obj_tbl_dishes->readObject(array("dish_id"=>$dish_id))){
				$info["dish_id"]=$obj_tbl_dishes->getdish_id();
				$info["dish_name"]=$obj_tbl_dishes->getdish_name();
				$info["dish_chef_notes"]=$obj_tbl_dishes->getdish_chef_notes();
				$info["dish_ingrad_allergic_contents"]=$obj_tbl_dishes->getdish_ingrad_allergic_contents();
				
				$info["dish_is_nutrition_text"]=$obj_tbl_dishes->getdish_is_nutrition_text();
				//echo "--".$info["dish_is_nutrition_text"];
				if(($info["dish_is_nutrition_text"])==0){			
							$info["nutrition_details"] =tbl_nutrition::GetInfo(0,$info["dish_id"]);
				}
				
				$info["dish_nutri_cal_info"]=$obj_tbl_dishes->getdish_nutri_cal_info();				
				$info["dish_allergy"]=$obj_tbl_dishes->getdish_allergy();
				
				$info["dish_pair_note"]=$obj_tbl_dishes->getdish_pair_note();	
			//$info["dish_food_wine_pair"]=$obj_tbl_dishes->getdish_food_wine_pair();		
				//$info["dish_food_wine_pair"] = tbl_food_pairing::readArray(array(FOOD_PAIR_MAIN_DISH=>$dish_id),$result_found,1);
				//echo 'SELECT GROUP_CONCAT(DISTINCT(`'.FOOD_PAIR_PAIRED_DISH.'`)) as `lst_paired_dishes` FROM `'.TBL_FOOD_PAIRING.'` WHERE `'.FOOD_PAIR_MAIN_DISH.'` ='.$dish_id.';';
				
				$lst_paired_dishes_1=DB::ExecScalarQry('SELECT GROUP_CONCAT(DISTINCT(`'.FOOD_PAIR_PAIRED_DISH.'`)) as `lst_paired_dishes` FROM `'.TBL_FOOD_PAIRING.'` WHERE `'.FOOD_PAIR_MAIN_DISH.'` ='.$dish_id.';');
				
				/*$lst_paired_dishes_2=DB::ExecScalarQry('SELECT GROUP_CONCAT(DISTINCT(`'.FOOD_PAIR_MAIN_DISH.'`)) as `lst_paired_dishes` FROM `'.TBL_FOOD_PAIRING.'` WHERE `'.FOOD_PAIR_PAIRED_DISH.'` ='.$dish_id.';');	*/			
							
				$lst_paired_dishes=array();
				if(is_not_empty($lst_paired_dishes_1)){
						$lst_paired_dishes=explode(',',$lst_paired_dishes_1);						
				}
				/*if(is_not_empty($lst_paired_dishes_2)){
						$lst_paired_dishes=array_merge($lst_paired_dishes, explode(',',$lst_paired_dishes_2));
;						
				}		*/	
				//print_r($lst_paired_dishes);	
				if(is_not_empty($lst_paired_dishes)){
						$info["dish_food_wine_pair"] = array_unique($lst_paired_dishes);
						//echo 'SELECT * FROM `'.TBL_DISHES.'` WHERE `'.DISH_ID.'` IN ('.implode(',',$lst_paired_dishes).') ORDER BY `'.DISH_IS_DRINK.'` ASC;';
						$lst_paired_dish_arr=DB::ExecQry('SELECT * FROM `'.TBL_DISHES.'` WHERE `'.DISH_ID.'` IN ('.implode(',',$lst_paired_dishes).') ORDER BY `'.DISH_IS_DRINK.'` ASC;');
						$info["paired_dishes_details"] =$lst_paired_dish_arr;
				}
				//print_r($info["dish_food_wine_pair"]);
				//print_r($info["paired_dishes_details"]);				
					
				$info["dish_notes"]=$obj_tbl_dishes->getdish_notes();
				$info["dish_notes_short"]= get_elipsis($info["dish_notes"],100,'...');
				$info["dish_img"]=$obj_tbl_dishes->getdish_img();
				
				$info["dish_winery"]=$obj_tbl_dishes->getdish_winery();
				$info["dish_type_cat"]=$obj_tbl_dishes->getdish_type_cat();
				$info["dish_alcohol_percent"]=$obj_tbl_dishes->getdish_alcohol_percent();
				$info["dish_vintage"]=$obj_tbl_dishes->getdish_vintage();
				$info["dish_varietal"]=$obj_tbl_dishes->getdish_varietal();
				$info["dish_region"]=$obj_tbl_dishes->getdish_region();
				$info["dish_country"]=$obj_tbl_dishes->getdish_country();
				if(is_not_empty($info["dish_country"])){
						$country_nm=DB::ExecScalarQry('SELECT `country_name` FROM `hm_country` WHERE `country_iso`="'.$info["dish_country"].'"');
						$info["dish_country_nm"]=$country_nm;
				}else{
						$info["dish_country_nm"]='';
				}
				$info["dish_bottle_price"]=$obj_tbl_dishes->getdish_bottle_price();
				$info["dish_glass_price"]=$obj_tbl_dishes->getdish_glass_price();
				$info["dish_winemaking"]=$obj_tbl_dishes->getdish_winemaking();
				$info["dish_maturity"]=$obj_tbl_dishes->getdish_maturity();
				$info["dish_is_drink"]=$obj_tbl_dishes->getdish_is_drink();
				
				$info["dish_attributes"]=$obj_tbl_dishes->getdish_attributes();
				if(is_not_empty($info["dish_attributes"])){		
						$info["dish_attributes_arr"]=explode(',',$info["dish_attributes"]);
									
						$lst_dish_attr=DB::ExecQry('SELECT * FROM `'.TBL_DISH_ATTRIB.'` WHERE `'.DISH_ATTRIB_ID.'` IN ('.trim($info["dish_attributes"]).');');
						$info["attrib_details"] =$lst_dish_attr;
				}		
				
				$info["dish_food_notes"]=$obj_tbl_dishes->getdish_food_notes();
				if(is_not_empty($info["dish_food_notes"])){		
						$info["dish_food_notes_arr"]=explode(',',$info["dish_food_notes"]);
									
						$lst_food_notes=DB::ExecQry('SELECT * FROM `'.TBL_FOOD_NOTES.'` WHERE `'.FDNOTE_ID.'` IN ('.trim($info["dish_food_notes"]).');');
						$info["food_notes_details"] =$lst_food_notes;
				}			
				
				if(is_not_empty($info["dish_allergy"])){			
							$info["dish_allergy_arr"]=explode(',',$info["dish_allergy"]);
									
							$lst_allergies=DB::ExecQry('SELECT * FROM `'.TBL_ALLERGY_LIST.'` WHERE `'.ALERGY_ID.'` IN ('.trim($info["dish_allergy"]).');');
							$info["allergy_details"] =$lst_allergies;
					}
				//$one_line_info=array($info["dish_winery"],$info["dish_region"],$info["dish_country"]);
				if((is_not_empty($info["dish_country_nm"])==false) || ($info["dish_country"]=='AF')){
				$one_line_info=array($info["dish_winery"],$info["dish_region"]);
				}else{
				$one_line_info=array($info["dish_winery"],$info["dish_region"],$info["dish_country_nm"]);
				}

				$one_line_info=array_filter($one_line_info);
				if(is_not_empty($one_line_info)){
						$info["one_line_info"]=implode('-',$one_line_info);	
				}			
				
				$info["dish_ethor_mnu_itm_id"]=$obj_tbl_dishes->getdish_ethor_mnu_itm_id();
				$info["dish_ethor_mnu_itm_img"]=$obj_tbl_dishes->getdish_ethor_mnu_itm_img();
				
				$info["dish_start_date"]=$obj_tbl_dishes->getdish_start_date();
				$info["dish_end_date"]=$obj_tbl_dishes->getdish_end_date();
				$info[DISH_RESTAURENT]=$obj_tbl_dishes->getdish_restaurent();
				$info["isActive"] = 0;
				//..check deactive date is not set or 0
				if((is_not_empty($obj_tbl_dishes->gettbl_dishes_deactive_date())==false)  || (is_gt_zero_num(strtotime($obj_tbl_dishes->gettbl_dishes_deactive_date()))== false)){
					$info["isActive"] = 1;
				}else{
					//..check the deactive date is greater than todays date
					if(strtotime($obj_tbl_dishes->gettbl_dishes_deactive_date()) > strtotime(date(DATE_FORMAT))){
						$info["isActive"] = 1;
					}
				}
			}
		unset($obj_tbl_dishes);
		return $info;
		}
	}//..End GetInfo
	
	
	public static function GetFields($data,$where=""){
		global $tbl_dishes_active_condition;
		$arr = array();
		if(is_not_empty($data)){
			$qry ='SELECT '.$data['key_field'].','.$data['value_field'].' FROM '.TBL_DISHES.' WHERE '.DISH_RESTAURENT.'='.$_SESSION[SES_RESTAURANT];
			if(is_gt_zero_num($data['isActive'])){
				$qry .= ' AND '.$tbl_dishes_active_condition;			
			}
			if(is_not_empty($where)){
				$qry .= ' AND '.$where;	
			}
			$qry .=' ORDER BY '.DISH_NAME.' ASC;';
			$res = mysql_query($qry); 
			//echo $qry;
			if($res){
				while($row=mysql_fetch_assoc($res)){
					$arr[$row[$data['key_field']]] = $row[$data['value_field']];
				}
			}
		}
		return $arr;
	}//.. End of GetFields
	
	public static function deletePrevDishImg($dish_id,$save_path="") {
		if(is_gt_zero_num($dish_id)){
			$obj_tbl_dishes = new tbl_dishes();
			if ($obj_tbl_dishes->readObject(array(DISH_ID=>$dish_id))){				
				$dish_img=$obj_tbl_dishes->getdish_img();
				if(is_not_empty($dish_img))
					unlink($save_path.$dish_img);
			}
		}		
	}//..Delete previous dish image 
	
	//..third report
	public function rpt_show_graph($time_period,$restaurant,$start_date='',$end_date='',$table='',$show_overall=0,$fts_graph_type=1){
		$group_on=array('post_id');
		$amount_type='AVG';
		$x_axis='';
		$y_axis='';
		$img_src = '';
		$rpt_lbl_cond='';
		
		//..get groupon condition	
		if($time_period == 'daily'){			
			$x_axis='day';
			$x_axis_title = 'Date';	
			$date_cond = '%Y%m%d';
			$rpt_lbl_cond .='daily rating';			
		}elseif($time_period == 'monthly'){
			$date_cond = '%m';
			$x_axis='mon';
			$x_axis_title = 'month';
			$rpt_lbl_cond .='monthly rating';
		}elseif($time_period == 'annually'){
			$date_cond = '%Y';
			$x_axis='yr';
			$x_axis_title = 'year';
			$rpt_lbl_cond .='annually rating';
		} 
		//..Dish filter
		/*	if(is_gt_zero_num($dish)){
			$cond .= " AND ".DISH_ID." = ".$dish."".RET;
			$dish_det=tbl_dishes::GetInfo($dish);
			if(is_not_empty($dish_det))
				$rpt_lbl_cond .=' for \''.$dish_det[DISH_NAME].'\'';
		}
		*/
		//..Table FILTER
		if(is_not_empty($table)){
				$cond .= ' AND `'.RECOMM_TABLE.'` = '.$table.'';
				$table_info=tbl_dining_table::GetInfo($table);
				$rpt_lbl_cond .=' from '.$table_info["table_number"];
		}		
				
		if($restaurant != "") {
			$qry .= $and.FDBK_RESTAURENT." = '".$array[FDBK_RESTAURENT]."'".RET;
			$and = "AND".RET;
		}
		
		if((is_not_empty($start_date)) && (is_not_empty($end_date))){
				$cond .= " AND `f`.`start_date` >= '".date('Y-m-d 00:00:00',strtotime($start_date))."' AND `f`.`start_date` <= '".date('Y-m-d 23:59:59',strtotime($end_date))."'";
				 $rpt_lbl_cond .=' for period ['.date('m/d/y',strtotime($start_date)).' -'.date('m/d/y',strtotime($end_date)).'] ';
		}	

		$qry= "					
					SELECT 
					SQL_NO_CACHE YEAR(`start_date`) as `yr`, 
					MONTHNAME(`start_date`) as `mon`,MONTH(`start_date`) as `mon_num`,
					DAYOFMONTH(`start_date`) as `day`,
					`f`.`post_id`,`f`.`start_date`,
					`r`.`restaurent_name`,`r`.`restaurent_img`,
					`t`.`table_number`,
					AVG(`f`.`recomm_rating`) `star_overall`,
					AVG(`f`.`recomm_QOS_rating`) `star_QOS`, 
					AVG(`f`.`recomm_QOF_rating`) `star_QOF`,
					AVG(`f`.`recomm_ambience_rating`) `star_ambience` 
					FROM `tbl_feedback` as `f` 
					INNER JOIN `tbl_restaurent` as `r` ON `r`.`restaurent_id`=`f`.`post_id`
					INNER JOIN `tbl_dining_table` as `t` ON `t`.`table_id`=`f`.`recomm_table`
					WHERE
					`post_type`='Business' {$cond}					
					GROUP BY
					DATE_FORMAT(`f`.`start_date`,'{$date_cond}'),`post_id` 
					ORDER BY `f`.`start_date` ASC";
	
	 $res = mysql_query($qry); 	
	 //echo "qry=$qry ";	 	

	 $cnt=0;
	 
	 $report_op=self::getGrpahImage($res,$group_on,$x_axis_title,$y_axis_title,$rpt_lbl,$rpt_lbl_cond,$x_axis,'rating',$show_overall,$time_period,$fts_graph_type);
	 
	 return $report_op; 
	
	}
	//..following functions for the showing statistical graphs
	public static function getGrpahImage($res,$group_on,$x_axis_title,$y_axis_title,$rpt_lbl,$rpt_lbl_cond,$x_axis,$y_axis,$show_overall,$time_period,$fts_graph_type){
		$third_dimension='-'; 
	 $report_op='';
	 $cnt=0;
	 if(($res) && (mysql_num_rows($res)>0)){
		$tmparr=array();
		$tmparr1=array();
		$_datay=array();
		$grfld_arr=array(); 		
	
		while($row = mysql_fetch_assoc($res)){
				if($time_period == 'daily'){
					$_tmp_val=$row['mon_num'].'/'.$row[$x_axis];
					$tmparr1[$_tmp_val]=$_tmp_val;	
				}
				$tmparr[$row[$x_axis]]=$row[$x_axis];	
			
				
				if($show_overall==1){
					$_datay['1_Overall'][$row[$x_axis]]=$row['star_overall'];
				}else{					
					$_datay['2_QOS'][$row[$x_axis]]=$row['star_QOS'];
					$_datay['3_QOF'][$row[$x_axis]]=$row['star_QOF'];
					$_datay['4_Ambience'][$row[$x_axis]]=$row['star_ambience'];
				}								
		}		
		
		if(is_not_empty($tmparr)) {
				$datax=array_keys($tmparr);
		}
		if(is_not_empty($tmparr1)) {
				$datax1=array_keys($tmparr1);
		}
		unset($row);		
		
		//print_r($_datax);
		//print_r($_datay);
		
		//..final logic to fetch based on the data based on the 3rd dimension 
		$input_data=0;
		$datay=array();
		if(is_not_empty($_datay)){
			foreach($_datay as $_third_dim => $row ){
					$input_data=count($row);
					//echo "$input_data //";
					foreach($datax as $key =>$value){					
						$legend=$_third_dim.'_'.get_elipsis($grfld_arr[$_third_dim],20);
				
						if(is_not_empty($row[$value])){
							$datay[$legend][$key]=$row[$value];						
						}else{
							$datay[$legend][$key]=0;	 
						}					
					}
			}
		}	
		if($time_period == 'daily'){
			$datax=$datax1;
		}
			
	//print_r(array($datax,$datay));exit;	
	
	/*$datax=Array ('0' => 'March','1' => 'April');	 
	$datay=Array (
	'2_QOS_' => Array('0' =>3.4000,'1' =>0), 
	'3_QOF_' => Array('0' =>3.6000,'1' =>0 ),
	'4_Ambience_' => Array('0' =>3.0000,'1' =>0)
	);	
	print_r($datax);
	print_r($datay);*/
	//exit;
	
	 if($fts_graph_type==0){
	 		$img_src = print_on_graph($datax,$datay,$x_axis_title,$y_axis_title,"{$rpt_lbl} {$rpt_lbl_cond}");
	 }else{
	 	 if($input_data>1){
		 		$img_src = print_line_graph($datax,$datay,$x_axis_title,$y_axis_title,"{$rpt_lbl} {$rpt_lbl_cond}");
		 }else{
		 		$img_src ='';
		 }	 	 
	 }	


	 }else{
	 	$img_src = "";
	 }		
	 //return $img_src;
	 $report_op=array('img_src'=>$img_src,'title'=>"{$rpt_lbl} {$rpt_lbl_cond}");
	 return $report_op;	
	}
	
	public static function getVintage(){
		$output=array();
		for ($i = 1970; $i <= 2020; $i++) {
		   $output[$i]=$i;
		}
		return $output;
	}	
	
	//..Function to add automatically dish options 
	public static function addWineFullOrGlassOptions($dish_opt_dish_id){
		$objtbl_dish_options=new tbl_dish_options();
		$dish_opt_id = $objtbl_dish_options->create($dish_opt_dish_id, 'DRINK TYPE', 'dropdown', 0,1);
		unset($objtbl_dish_options);
		if(is_gt_zero_num($dish_opt_id)){
			$objtbl_dish_options_values=new tbl_dish_options_values();
			$isSuccess = $objtbl_dish_options_values->create($dish_opt_id, 'Bottle');
			$isSuccess = $objtbl_dish_options_values->create($dish_opt_id, 'Glass');
			unset($objtbl_dish_options_values);
		}		
	}


	public function getDaysMonthYears($start_dt,$end_dt,$diff='MONTH'){
		$d1 = strtotime($start_dt);
		$d2 = strtotime($end_dt);
		$min_date = min($d1, $d2);
		$max_date = max($d1, $d2);
		$i = 0;
		$output=array();
		while (($min_date = strtotime("+1 {$diff}", $min_date)) <= $max_date) {
				$output[]=date('M',$min_date);
		    $i++;
		}		
	}
}//..End tbl_dishes

?>