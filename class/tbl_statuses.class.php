<?php/**********************************************************************tbl_statuses.class.phpGenerated by STRUCTY 2013.10.23 12:12:36.Copyright 2011 Structy, Frédéric Aebi. All rights reserved.**********************************************************************/define('TBL_STATUSES', 'tbl_statuses'); define('STATUS_ID', 'status_id'); define('STATUS_NAME', 'status_name'); define('STATUS_DESC', 'status_desc'); define('STATUS_EVENT', 'status_event'); define('STATUS_CONTROL', 'status_control'); define('STATUS_PREV', 'status_prev'); define('STATUS_NEXT', 'status_next');define('STATUS_PREV_MUST','status_prev_must');define('STATUS_NEXT_MUST','status_next_must'); define('STATUS_EXP_TIME', 'status_exp_time'); define('STATUS_COLOR', 'status_color'); define('STATUS_HIDDEN', 'status_hidden'); define('STATUS_RESTAURANT', 'status_restaurant'); define('STATUS_IS_OPTIONAL', 'status_is_optional'); define('STATUS_START_DATE', 'status_start_date'); define('STATUS_END_DATE', 'status_end_date'); //..constant defined for the status wise notification//1) Requestdefine('STS_REQST_INITIATED',1);define('STS_REQST_IN_PROCESS',2);define('STS_REQST_COMPLETED',3);define('STS_REQST_WO_SERVER',29);define('STS_REQST_WO_SESSION',28);define('STS_REQST_CANCELLED',4);define('STS_REQST_DELAYED',5);define('STS_REQST_CUST_PAY_CASH',36);//..Now added to order//2) Orderdefine('STS_ORDER_PLACED',22);define('STS_ORDER_CONFIRMED',13);define('STS_ORDER_CONFIRM_DELAY', 31);define('STS_ORDER_UPDATE',25);define('STS_ORDER_READY_TO_PICK',14);define('STS_ORDER_DELAYED',15);define('STS_ORDER_READY',16); define('STS_ORDER_CANCELLED',17);define('STS_ORDER_RESTORED',27);define('STS_ORDER_DELIVERED',18);define('STS_ORDER_PLACED_WO_SERVER',30);define('STS_ORDER_PLACED_WO_SESSION',23);define('STS_ONLINE_ORDER_PLACED',24);define('STS_ORDER_EXCEED',21); define('STS_ORDER_GOING_TO_DELAY',38);//3) Tabledefine('STS_TBL_OCCUPIED',6);define('STS_TBL_ORDERED',7);define('STS_TBL_DINING',8);define('STS_TBL_DESERT',9);define('STS_TBL_CHECK_PAID',10);define('STS_TBL_CLEANING',11);define('STS_TBL_AVAILABLE',12);define('STS_TBL_QRCD_WO_SCHEDULE',35);//4) Promotiondefine('STS_PROM_CLAIM_WO_SESSION',26); define('STS_PROM_REQST',32); define('STS_PROM_CONFIRM',33); define('TBL_STATUSES_ACTIVE_DATE',  STATUS_START_DATE);define('TBL_STATUSES_DEACTIVE_DATE',  STATUS_END_DATE);$tbl_statuses_active_condition= ' ('.TBL_STATUSES_DEACTIVE_DATE.' is NULL OR '.TBL_STATUSES_DEACTIVE_DATE.' = 0 OR '.TBL_STATUSES_DEACTIVE_DATE.' > CURDATE( )) ';class tbl_statuses {	private $status_id;	private $status_name;	private $status_desc;	private $status_event;	private $status_control;	private $status_prev;	private $status_next;	private $status_prev_must;	private $status_next_must;	private $status_exp_time;	private $status_color;	private $status_hidden;	private $status_restaurant;		private $status_is_optional;		private $status_start_date;	private $status_end_date;	private $tbl_statuses_active_date;	private $tbl_statuses_deactive_date;	public function setstatus_id($pArg='0') {$this->status_id=$pArg;}	public function setstatus_name($pArg='0') {$this->status_name=$pArg;}	public function setstatus_desc($pArg='0') {$this->status_desc=$pArg;}	public function setstatus_event($pArg='0') {$this->status_event=$pArg;}	public function setstatus_control($pArg='0') {$this->status_control=$pArg;}	public function setstatus_prev($pArg='0') {$this->status_prev=$pArg;}	public function setstatus_next($pArg='0') {$this->status_next=$pArg;}	public function setstatus_prev_must($pArg='0') {$this->status_prev_must=$pArg;}	public function setstatus_next_must($pArg='0') {$this->status_next_must=$pArg;}	public function setstatus_exp_time($pArg='0') {$this->status_exp_time=$pArg;}	public function setstatus_color($pArg='0') {$this->status_color=$pArg;}	public function setstatus_hidden($pArg='0') {$this->status_hidden=$pArg;}	public function setstatus_restaurant($pArg='0') {$this->status_restaurant=$pArg;}		public function setstatus_is_optional($pArg='0') {$this->status_is_optional=$pArg;}		public function setstatus_start_date($pArg='0') {$this->status_start_date=$pArg;}	public function setstatus_end_date($pArg='0') {$this->status_end_date=$pArg;}	public function settbl_statuses_active_date($pArg='0') {$this->tbl_statuses_active_date=$pArg;}	public function settbl_statuses_deactive_date($pArg='0') {$this->tbl_statuses_deactive_date=$pArg;}	public function getstatus_id() {return $this->status_id;}	public function getstatus_name() {return $this->status_name;}	public function getstatus_desc() {return $this->status_desc;}	public function getstatus_event() {return $this->status_event;}	public function getstatus_control() {return $this->status_control;}	public function getstatus_prev() {return $this->status_prev;}	public function getstatus_next() {return $this->status_next;}	public function getstatus_prev_must() {return $this->status_prev_must;}	public function getstatus_next_must() {return $this->status_next_must;}	public function getstatus_exp_time() {return $this->status_exp_time;}	public function getstatus_color() {return $this->status_color;}	public function getstatus_hidden() {return $this->status_hidden;}	public function getstatus_restaurant() {return $this->status_restaurant;}		public function getstatus_is_optional() {return $this->status_is_optional;}		public function getstatus_start_date() {return $this->status_start_date;}	public function getstatus_end_date() {return $this->status_end_date;}	public function gettbl_statuses_active_date() {return $this->tbl_statuses_active_date;}	public function gettbl_statuses_deactive_date(){return $this->tbl_statuses_deactive_date;}	public function readObject($array = array()) {		$qry = "SELECT *".RET."FROM ".TBL_STATUSES.RET;		$and = "WHERE".RET;		if($array[STATUS_ID] != "") {			$qry .= $and.STATUS_ID." = '".$array[STATUS_ID]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NAME] != "") {			$qry .= $and.STATUS_NAME." = '".$array[STATUS_NAME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_DESC] != "") {			$qry .= $and.STATUS_DESC." = '".$array[STATUS_DESC]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_EVENT] != "") {			$qry .= $and.STATUS_EVENT." = '".$array[STATUS_EVENT]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_CONTROL] != "") {			$qry .= $and.STATUS_CONTROL." = '".$array[STATUS_CONTROL]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_PREV] != "") {			$qry .= $and.STATUS_PREV." = '".$array[STATUS_PREV]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT] != "") {			$qry .= $and.STATUS_NEXT." = '".$array[STATUS_NEXT]."'".RET;			$and = "AND".RET;		}				if($array[STATUS_PREV_MUST] != "") {			$qry .= $and.STATUS_PREV_MUST." = '".$array[STATUS_PREV_MUST]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT_MUST] != "") {			$qry .= $and.STATUS_NEXT_MUST." = '".$array[STATUS_NEXT_MUST]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_EXP_TIME] != "") {			$qry .= $and.STATUS_EXP_TIME." = '".$array[STATUS_EXP_TIME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_COLOR] != "") {			$qry .= $and.STATUS_COLOR." = '".$array[STATUS_COLOR]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_HIDDEN] != "") {			$qry .= $and.STATUS_HIDDEN." = '".$array[STATUS_HIDDEN]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_RESTAURANT] != "") {			$qry .= $and."(".STATUS_RESTAURANT." = '".$array[STATUS_RESTAURANT]."' OR ".STATUS_RESTAURANT."=".STS_DFLT_RESTAURANT.")".RET;			$and = "AND".RET;		}				if($array[STATUS_IS_OPTIONAL] != "") {			$qry .= $and.STATUS_IS_OPTIONAL." = ".$array[STATUS_IS_OPTIONAL]."".RET;			$and = "AND".RET;		}		if($array[STATUS_START_DATE] != "") {			$qry .= $and.STATUS_START_DATE." = '".$array[STATUS_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_END_DATE] != "") {			$qry .= $and.STATUS_END_DATE." = '".$array[STATUS_END_DATE]."'".RET;			$and = "AND".RET;		}	$result = mysql_query($qry);		if($result) {			while ($row = mysql_fetch_array($result)) {				$record = $row;				break;//end after first record			}			if(count($record[0]) == 0) {				return array();			} else {				$this->setstatus_id($record[STATUS_ID]);				$this->setstatus_name($record[STATUS_NAME]);				$this->setstatus_desc($record[STATUS_DESC]);				$this->setstatus_event($record[STATUS_EVENT]);				$this->setstatus_control($record[STATUS_CONTROL]);				$this->setstatus_prev($record[STATUS_PREV]);				$this->setstatus_next($record[STATUS_NEXT]);				$this->setstatus_prev_must($record[STATUS_PREV_MUST]);				$this->setstatus_next_must($record[STATUS_NEXT_MUST]);				$this->setstatus_exp_time($record[STATUS_EXP_TIME]);				$this->setstatus_color($record[STATUS_COLOR]);				$this->setstatus_hidden($record[STATUS_HIDDEN]);				$this->setstatus_restaurant($record[STATUS_RESTAURANT]);								$this->setstatus_is_optional($record[STATUS_IS_OPTIONAL]);								$this->setstatus_start_date($record[STATUS_START_DATE]);				$this->setstatus_end_date($record[STATUS_END_DATE]);				$this->settbl_statuses_active_date($record[TBL_STATUSES_ACTIVE_DATE]);				$this->settbl_statuses_deactive_date($record[TBL_STATUSES_DEACTIVE_DATE]);				return true;			}		}	}	public static function readArray($array = array(),&$result_found=0,$isArray=1) {		global $tbl_statuses_active_condition;		$qry = "SELECT *".RET."FROM ".TBL_STATUSES.RET;		$and = "WHERE".RET;		if($array[STATUS_ID] != "") {			$qry .= $and.STATUS_ID." = '".$array[STATUS_ID]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NAME] != "") {			$qry .= $and.STATUS_NAME." = '".$array[STATUS_NAME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_DESC] != "") {			$qry .= $and.STATUS_DESC." = '".$array[STATUS_DESC]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_EVENT] != "") { 			$qry .= $and.STATUS_EVENT." IN (".$array[STATUS_EVENT].")".RET;			$and = "AND".RET;		}		if($array[STATUS_CONTROL] != "") {			$qry .= $and.STATUS_CONTROL." = '".$array[STATUS_CONTROL]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_PREV] != "") {			$qry .= $and.STATUS_PREV." = '".$array[STATUS_PREV]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT] != "") {			$qry .= $and.STATUS_NEXT." = '".$array[STATUS_NEXT]."'".RET;			$and = "AND".RET;		}				if($array[STATUS_PREV_MUST] != "") {			$qry .= $and.STATUS_PREV_MUST." = '".$array[STATUS_PREV_MUST]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT_MUST] != "") {			$qry .= $and.STATUS_NEXT_MUST." = '".$array[STATUS_NEXT_MUST]."'".RET;			$and = "AND".RET;		}				if($array[STATUS_EXP_TIME] != "") {			$qry .= $and.STATUS_EXP_TIME." = '".$array[STATUS_EXP_TIME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_COLOR] != "") {			$qry .= $and.STATUS_COLOR." = '".$array[STATUS_COLOR]."'".RET;			$and = "AND".RET;		}		if(is_not_empty($array[STATUS_HIDDEN])) {			$qry .= $and.STATUS_HIDDEN." = ".$array[STATUS_HIDDEN]."".RET;			$and = "AND".RET;		}		if($array[STATUS_RESTAURANT] != "") {			$qry .= $and."(".STATUS_RESTAURANT." = '".$array[STATUS_RESTAURANT]."' OR ".STATUS_RESTAURANT."=".STS_DFLT_RESTAURANT.")".RET;			$and = "AND".RET;		}		if($array[STATUS_START_DATE] != "") {			$qry .= $and.STATUS_START_DATE." = '".$array[STATUS_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_END_DATE] != "") {			$qry .= $and.STATUS_END_DATE." = '".$array[STATUS_END_DATE]."'".RET;			$and = "AND".RET;		}		if(is_gt_zero_num($array["isActive"])) {			$qry .= $and.$tbl_statuses_active_condition;;			$and = "AND".RET;		}				if(is_not_empty($array[STATUS_IS_OPTIONAL])) {			$qry .= $and.STATUS_IS_OPTIONAL."=".$array[STATUS_IS_OPTIONAL]."".RET;			$and = "AND".RET;		}		if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		$qry .=" ORDER BY ".$array[SORT_ON]." ".$array[SORT_BY];		}		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];		}else{			$qry_with_limit  = $qry;		}		 		$result = mysql_query ($qry_with_limit);	  		$r1 = mysql_query($qry);		if($r1){			$result_found = mysql_num_rows($r1);		}		$class_objects = array();		if($result) {			while ($record = mysql_fetch_assoc($result)) {				$isActive= 0;				//..check deactive date is not set or 0				if((is_not_empty($record[TBL_STATUSES_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_STATUSES_DEACTIVE_DATE]))== false)){					$isActive = 1; 				}else{					//..check the deactive date is greater than todays date					if(strtotime($record[TBL_STATUSES_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){						$isActive = 1;					}				}			if($isArray){				$class_object = array();				$class_object[STATUS_ID]=$record[STATUS_ID];				$class_object[STATUS_NAME]=$record[STATUS_NAME];				$class_object[STATUS_DESC]=$record[STATUS_DESC];				$class_object[STATUS_EVENT]=$record[STATUS_EVENT];				$class_object[STATUS_CONTROL]=$record[STATUS_CONTROL];				$class_object[STATUS_PREV]=$record[STATUS_PREV];				$class_object[STATUS_NEXT]=$record[STATUS_NEXT];				$class_object[STATUS_PREV_MUST]=$record[STATUS_PREV_MUST];				$class_object[STATUS_NEXT_MUST]=$record[STATUS_NEXT_MUST];				$class_object[STATUS_EXP_TIME]=$record[STATUS_EXP_TIME];				$class_object[STATUS_COLOR]=$record[STATUS_COLOR];				$class_object[STATUS_HIDDEN]=$record[STATUS_HIDDEN];				$class_object[STATUS_RESTAURANT]=$record[STATUS_RESTAURANT]; 				$class_object[STATUS_IS_OPTIONAL]=$record[STATUS_IS_OPTIONAL];				$class_object[STATUS_START_DATE]=$record[STATUS_START_DATE];				$class_object[STATUS_END_DATE]=$record[STATUS_END_DATE];				$class_object['isActive']=$isActive;			}else{				$class_object = new tbl_statuses();				$class_object->setstatus_id($record[STATUS_ID]);				$class_object->setstatus_name($record[STATUS_NAME]);				$class_object->setstatus_desc($record[STATUS_DESC]);				$class_object->setstatus_event($record[STATUS_EVENT]);				$class_object->setstatus_control($record[STATUS_CONTROL]);				$class_object->setstatus_prev($record[STATUS_PREV]);				$class_object->setstatus_next($record[STATUS_NEXT]);				$class_object->setstatus_prev_must($record[STATUS_PREV_MUST]);				$class_object->setstatus_next_must($record[STATUS_NEXT_MUST]);				$class_object->setstatus_exp_time($record[STATUS_EXP_TIME]);				$class_object->setstatus_color($record[STATUS_COLOR]);				$class_object->setstatus_hidden($record[STATUS_HIDDEN]);				$class_object->setstatus_restaurant($record[STATUS_RESTAURANT]); 				$class_object->setstatus_is_optional($record[STATUS_IS_OPTIONAL]);				$class_object->setstatus_start_date($record[STATUS_START_DATE]);				$class_object->setstatus_end_date($record[STATUS_END_DATE]);			}				$class_objects[$record[STATUS_ID]] = $class_object;			}		} 		return $class_objects;	}//..End readArray	public function insert() {		if($this->getstatus_id() != '') {			$qry  = "UPDATE ".TBL_STATUSES.RET."SET".RET."			".STATUS_ID." = '".$this->getstatus_id()."',".RET."			".STATUS_NAME." = '".$this->getstatus_name()."',".RET."			".STATUS_DESC." = '".$this->getstatus_desc()."',".RET."			".STATUS_EVENT." = '".$this->getstatus_event()."',".RET."			".STATUS_CONTROL." = '".$this->getstatus_control()."',".RET."			".STATUS_PREV." = '".$this->getstatus_prev()."',".RET."			".STATUS_NEXT." = '".$this->getstatus_next()."',".RET."			".STATUS_PREV_MUST." = '".$this->getstatus_prev_must()."',".RET."			".STATUS_NEXT_MUST." = '".$this->getstatus_next_must()."',".RET."			".STATUS_EXP_TIME." = '".$this->getstatus_exp_time()."',".RET."			".STATUS_COLOR." = '".$this->getstatus_color()."',".RET."			".STATUS_HIDDEN." = '".$this->getstatus_hidden()."',".RET."			".STATUS_RESTAURANT." = '".$this->getstatus_restaurant()."',".RET." 			".STATUS_IS_OPTIONAL." = '".$this->getstatus_is_optional()."',".RET."			".STATUS_START_DATE." = '".$this->getstatus_start_date()."',".RET."			".STATUS_END_DATE." = '".$this->getstatus_end_date()."'".RET.			"WHERE ".STATUS_ID." = ".$this->getstatus_id().RET;			mysql_query($qry);		} else {			$qry  = "INSERT INTO ".TBL_STATUSES." (".RET.			"".STATUS_NAME.", ".STATUS_DESC.", ".STATUS_EVENT.", ".STATUS_CONTROL.", ".STATUS_PREV.", ".STATUS_NEXT.", ".STATUS_PREV_MUST.", ".STATUS_NEXT_MUST.", ".STATUS_EXP_TIME.", ".STATUS_COLOR.", ".STATUS_HIDDEN.", ".STATUS_RESTAURANT.", ".STATUS_IS_OPTIONAL.", ".STATUS_START_DATE.", ".STATUS_END_DATE.RET.				") VALUES (".RET.			"'".$this->getstatus_name()."',".RET.			"'".$this->getstatus_desc()."',".RET.			"'".$this->getstatus_event()."',".RET.			"'".$this->getstatus_control()."',".RET.			"'".$this->getstatus_prev()."',".RET.			"'".$this->getstatus_next()."',".RET.			"'".$this->getstatus_prev_must()."',".RET.			"'".$this->getstatus_next_must()."',".RET.			"'".$this->getstatus_exp_time()."',".RET.			"'".$this->getstatus_color()."',".RET.			"'".$this->getstatus_hidden()."',".RET.			"'".$this->getstatus_restaurant()."',".RET. 			"'".$this->getstatus_is_optional()."',".RET. 			"'".$this->getstatus_start_date()."',".RET.			"'".$this->getstatus_end_date()."'".RET.			")".RET;			$res = mysql_query($qry);			$this->setstatus_id(mysql_insert_id());		}	}//..End Insert	public static function delete($array = array()) {		$qry = "DELETE".RET."FROM ".TBL_STATUSES.RET;		$and = "WHERE".RET;		if($array[STATUS_ID] != "") {			$qry .= $and.STATUS_ID." = '".$array[STATUS_ID]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NAME] != "") {			$qry .= $and.STATUS_NAME." = '".$array[STATUS_NAME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_DESC] != "") {			$qry .= $and.STATUS_DESC." = '".$array[STATUS_DESC]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_EVENT] != "") {			$qry .= $and.STATUS_EVENT." = '".$array[STATUS_EVENT]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_CONTROL] != "") {			$qry .= $and.STATUS_CONTROL." = '".$array[STATUS_CONTROL]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_PREV] != "") {			$qry .= $and.STATUS_PREV." = '".$array[STATUS_PREV]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT] != "") {			$qry .= $and.STATUS_NEXT." = '".$array[STATUS_NEXT]."'".RET;			$and = "AND".RET;		}				if($array[STATUS_PREV_MUST] != "") {			$qry .= $and.STATUS_PREV_MUST." = '".$array[STATUS_PREV_MUST]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_NEXT_MUST] != "") {			$qry .= $and.STATUS_NEXT_MUST." = '".$array[STATUS_NEXT_MUST]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_EXP_TIME] != "") {			$qry .= $and.STATUS_EXP_TIME." = '".$array[STATUS_EXP_TIME]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_COLOR] != "") {			$qry .= $and.STATUS_COLOR." = '".$array[STATUS_COLOR]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_HIDDEN] != "") {			$qry .= $and.STATUS_HIDDEN." = '".$array[STATUS_HIDDEN]."'".RET;			$and = "AND".RET;		}				//..donot add  STS_DFLT_RESTAURANT in delete query		if(($array[STATUS_RESTAURANT] != "") && ($array[STATUS_RESTAURANT] != STS_DFLT_RESTAURANT)) {			$qry .= $and.STATUS_RESTAURANT." = '".$array[STATUS_RESTAURANT]."'".RET;			$and = "AND".RET;		}				if($array[STATUS_IS_OPTIONAL] != "") {			$qry .= $and.STATUS_IS_OPTIONAL." = ".$array[STATUS_IS_OPTIONAL]."".RET;			$and = "AND".RET;		}		if($array[STATUS_START_DATE] != "") {			$qry .= $and.STATUS_START_DATE." = '".$array[STATUS_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[STATUS_END_DATE] != "") {			$qry .= $and.STATUS_END_DATE." = '".$array[STATUS_END_DATE]."'".RET;			$and = "AND".RET;		}		$res = mysql_query($qry);		if($res)  return OPERATION_SUCCESS; 		return OPERATION_FAIL;	}//..End Delete	public function isAlreadyThere($status_name, $status_desc, $status_event, $status_control, $status_prev, $status_exp_time, $status_color, $status_hidden) {		$unique_arr = array();			//$unique_arr[STATUS_ID]=$status_id;			//$unique_arr[STATUS_NAME]=$status_name;			//$unique_arr[STATUS_DESC]=$status_desc;			//$unique_arr[STATUS_EVENT]=$status_event;			//$unique_arr[STATUS_CONTROL]=$status_control;			//$unique_arr[STATUS_PREV]=$status_prev;			//$unique_arr[STATUS_NEXT]=$status_next;			//$unique_arr[STATUS_EXP_TIME]=$status_exp_time;			//$unique_arr[STATUS_COLOR]=$status_color;			//$unique_arr[STATUS_HIDDEN]=$status_hidden;			//$unique_arr[STATUS_RESTAURANT]=$status_restaurant;			//$unique_arr[STATUS_START_DATE]=$status_start_date;			//$unique_arr[STATUS_END_DATE]=$status_end_date;		if(is_not_empty($unique_arr)){			return $this->readObject($unique_arr);		}		return false;	}//..isAlreadyThere		/**	* It will get the next node by the status	* @param integer $status_id 	* @return boolean	*/	public static function getNextNode($status_id){		if(is_gt_zero_num($status_id)){			return DB::ExecScalarQry('SELECT '.STATUS_NEXT.' FROM '.TBL_STATUSES.' WHERE '.STATUS_ID.'='.$status_id);		}		return 0;	}			/**	* It will get the previous mandatory node by the status	* @param integer $status_id 	* @return boolean	*/	public static function getMandatoryPrevNode($status_id){		if(is_gt_zero_num($status_id)){			return DB::ExecScalarQry('SELECT '.STATUS_NEXT.' FROM '.TBL_STATUSES.' WHERE '.STATUS_IS_OPTIONAL.'=0 AND '.STATUS_NEXT_MUST.'='.$status_id);		}		return 0;	}		/**	* Update the old nodes by current nodes	* @param int $curr_node_status	* @param int $prev_node_status	* @param int $next_node_status	* @return boolean	*/	public static function updtOldNode($curr_node_status,$prev_node_status,$next_node_status){		if(is_gt_zero_num($curr_node_status)){			  //..previous node 			 	if(is_gt_zero_num($prev_node_status)){ 			 		DB::ExecNonQry('UPDATE '.TBL_STATUSES.' SET '.STATUS_NEXT.'='.$curr_node_status.' WHERE '.STATUS_ID.'='.$prev_node_status);				}				//..next node updation				if(is_gt_zero_num($next_node_status)){ 			 			DB::ExecNonQry('UPDATE '.TBL_STATUSES.' SET '.STATUS_PREV.'='.$curr_node_status.' WHERE '.STATUS_ID.'='.$next_node_status);				} 			return OPERATION_SUCCESS; 		} 		return OPERATION_FAIL;	}				public static function validate_prev_auto_sts_notifcns($status_prev){			$output=1;			//..additional check to see if the previous node is "auto"			//..and there are not notifications associated with It then			//..alert msg that you must have aleast one notifictaion for this			$fnd=0; 			$status_previnfo=self::GetInfo($status_prev);			if(is_not_empty($status_previnfo)){  				if($status_previnfo[STATUS_CONTROL]=='AUTO'){					$tmp_obj_notfy=tbl_notifications::readArray(array(NOTIFY_STATUS=>$status_prev),$fnd,1); 								if(is_gt_zero_num($fnd)==FALSE){					$output=0;											}			 }	 			} 			 			return $output;	}	public function create($status_name, $status_desc, $status_event, $status_control, $status_prev, $status_exp_time, $status_color, $status_hidden,$status_trigger=array(),$status_is_optional=0,$status_next_must=0,$status_prev_must=0) {		if(is_not_empty($status_name) && is_gt_zero_num($status_prev)){			if($this->isAlreadyThere($status_name, $status_desc, $status_event, $status_control, $status_prev, $status_exp_time, $status_color, $status_hidden)){				return OPERATION_DUPLICATE;			}else{				 				$rslt=self::validate_prev_auto_sts_notifcns($status_prev);				if($rslt==1){					//..as we adding the ORDER event in TABLE event so for the TABLE event get the previous event also.					/*if($status_event == 'TABLE'){						$info = self::GetInfo($status_prev); 						$status_next 	= $info[STATUS_NEXT];						$status_event = $info[STATUS_EVENT];					}else{*/						$status_next = self::getNextNode($status_prev);						/*$status_prev_must=self::getMandatoryPrevNode($status_next_must);*/					/*}*/					 					$this->setstatus_id('');					$this->setstatus_name($status_name);					$this->setstatus_desc($status_desc);					$this->setstatus_event($status_event);					$this->setstatus_control($status_control);					$this->setstatus_prev($status_prev);					$this->setstatus_next($status_next);					$this->setstatus_prev_must($status_prev_must);					$this->setstatus_next_must($status_next_must);					$this->setstatus_exp_time($status_exp_time);					$this->setstatus_color($status_color);					$this->setstatus_hidden($status_hidden);					$this->setstatus_restaurant($_SESSION[SES_RESTAURANT]); 					$this->setstatus_is_optional($status_is_optional); 					$this->setstatus_start_date(date(DATE_FORMAT));					 					$this->insert();					$curr_status_node = $this->getstatus_id(); 					if($status_prev>0)						self::updtOldNode($curr_status_node,$status_prev,$status_next); 					tbl_status_trigger::bulkCreate($curr_status_node,$status_trigger,0);					return $curr_status_node;				}else{					return -4;				}			}		}		return OPERATION_FAIL;	}//..create	public function update($status_id, $status_name, $status_desc, $status_event, $status_control, $status_prev, $status_exp_time, $status_color, $status_hidden,$status_trigger=array(),$status_is_optional=0,$status_next_must=0,$status_prev_must=0) {		 		if(is_gt_zero_num($status_id)){			if($this->readObject(array(STATUS_ID=>$status_id))){				 /*$rslt=self::validate_prev_auto_sts_notifcns($status_prev);				 				if(is_gt_zero_num($rslt)){ */					$this->setstatus_name($status_name);					$this->setstatus_desc($status_desc);					$this->setstatus_event($status_event);					$this->setstatus_control($status_control);					if($status_control != 'AUTO'){						$isStatusChanged = 0;						$old_next_status = $this->getstatus_next();						$old_prev_status = $this->getstatus_prev();						if($this->getstatus_prev() != $status_prev){							$status_next = self::getNextNode($status_prev);							$this->setstatus_next($status_next);							$isStatusChanged = 1;						}	 						/*if($this->getstatus_next_must() != $status_next_must){							$status_prev_must = self::getNextNode($status_next_must);*/							$this->setstatus_prev_must($status_prev_must);						/*	$isStatusChanged = 1;						}	*/								$this->setstatus_prev($status_prev);							$this->setstatus_next_must($status_next_must);					} 							$this->setstatus_exp_time($status_exp_time);					$this->setstatus_color($status_color);					$this->setstatus_hidden($status_hidden);					$this->setstatus_is_optional($status_is_optional);					$this->insert();										// 					tbl_status_trigger::bulkCreate($status_id,$status_trigger,1);					if(is_gt_zero_num($isStatusChanged) && ($status_prev>0)){ 					 //..update old previous_node 						self::updtOldNode($old_next_status,$old_prev_status,0);				   //..update old next_node 						self::updtOldNode($old_prev_status,0,$old_next_status);					//..new updation					  self::updtOldNode($status_id,$status_prev,$status_next);	 					}					return OPERATION_SUCCESS;				 /*}else{					return -4;				} */			}		}		return OPERATION_FAIL;	}//..update		/**	* Remove the status.	* @param integer $status_id	* @param integer $transfer_status	*/	public function remove($status_id,$transfer_status=0){		if(is_gt_zero_num($status_id)){			if ($this->readObject(array(STATUS_ID=>$status_id))){			//..if tranfer_status is given for transfering the notification of the current status			if(is_gt_zero_num($transfer_status)){					tbl_notifications::transferNotification($status_id,$transfer_status);					}else{				  tbl_notifications::delete(array(NOTIFY_STATUS=>$transfer_status));			}								$old_next_status = $this->getstatus_next();				$old_prev_status = $this->getstatus_prev();					//..update old previous_node 					self::updtOldNode($old_next_status,$old_prev_status,0);			   		//..update old next_node 					self::updtOldNode($old_prev_status,0,$old_next_status);					//..now delete the STATUS					self::delete(array(STATUS_ID=>$status_id));					return OPERATION_SUCCESS;			}		}		return OPERATION_FAIL;	}		public function activate($status_id){		if(is_gt_zero_num($status_id)){			if ($this->readObject(array(STATUS_ID=>$status_id))){				$qry  = "UPDATE ".TBL_STATUSES.RET."SET".RET."			".TBL_STATUSES_DEACTIVE_DATE." = '".date(EMPTY_DATE_FORMAT)."' WHERE ".STATUS_ID."={$status_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end activate	public function deactivate($status_id){		if(is_gt_zero_num($status_id)){			if ($this->readObject(array(STATUS_ID=>$status_id))){				$qry  = "UPDATE ".TBL_STATUSES.RET."SET".RET."			".TBL_STATUSES_DEACTIVE_DATE." = '".date(DATE_FORMAT)."' WHERE ".STATUS_ID."={$status_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end deactivate	public static function GetInfo($status_id) {		$info = array();		if($status_id != ''){			$obj_tbl_statuses = new tbl_statuses();			if($obj_tbl_statuses->readObject(array('status_id'=>$status_id))){				$info['status_id']=$obj_tbl_statuses->getstatus_id();				$info['status_name']=$obj_tbl_statuses->getstatus_name();				$info['status_desc']=$obj_tbl_statuses->getstatus_desc();				$info['status_event']=$obj_tbl_statuses->getstatus_event();				$info['status_control']=$obj_tbl_statuses->getstatus_control();				$info['status_prev']=$obj_tbl_statuses->getstatus_prev();				$info['status_next']=$obj_tbl_statuses->getstatus_next();				$info['status_prev_must']=$obj_tbl_statuses->getstatus_prev_must();				$info['status_next_must']=$obj_tbl_statuses->getstatus_next_must();				$info['status_exp_time']=$obj_tbl_statuses->getstatus_exp_time();				$info['status_color']=$obj_tbl_statuses->getstatus_color();				$info['status_hidden']=$obj_tbl_statuses->getstatus_hidden();				$info['status_restaurant']=$obj_tbl_statuses->getstatus_restaurant();				$info['status_is_optional']=$obj_tbl_statuses->getstatus_is_optional(); 				$info['status_start_date']=$obj_tbl_statuses->getstatus_start_date();				$info['status_end_date']=$obj_tbl_statuses->getstatus_end_date();				$info['isActive'] = 0; 				//..get previous notifier				$info['status_notifier'] = tbl_notifications::getNotifyingRole($info['status_prev']); 				$info['status_trigger'] = tbl_status_trigger::getRolesForStatus($info['status_id']); 								//print_r($info['status_notifier']);				 				$info['status_trigger_list'] = biz_explode(',',$info['status_trigger']);				//..check deactive date is not set or 0				if((is_not_empty($obj_tbl_statuses->gettbl_statuses_deactive_date())==false)  || (is_gt_zero_num(strtotime($obj_tbl_statuses->gettbl_statuses_deactive_date()))== false)){					$info['isActive'] = 1;				}else{					//..check the deactive date is greater than todays date					if(strtotime($obj_tbl_statuses->gettbl_statuses_deactive_date()) > strtotime(date(DATE_FORMAT))){						$info['isActive'] = 1;					}				}			}		unset($obj_tbl_statuses);		return $info;		}	}//..End GetInfo	public static function GetFields($data){		global $tbl_statuses_active_condition;		$arr = array();		if(is_not_empty($data)){			$qry ="SELECT ".$data['key_field'].",".$data['value_field']." FROM ".TBL_STATUSES."";			if(is_gt_zero_num($data['isActive'])){				$qry .= " WHERE ".$tbl_statuses_active_condition;						}			$res = mysql_query($qry); 			if($res){				while($row=mysql_fetch_assoc($res)){					$arr[$row[$data['key_field']]] = $row[$data['value_field']];				}			}		}		return $arr;	}//.. End of GetFields		/**	* Get all table Status picker values in the form of array.	* @param string $filter_event	* @param string $event	* @return array	*/ 	public static function getStatusPickerValues($filter_event="'TABLE','ORDER'",$event='TABLE'){ 	  global $Global_member;		$tbl_statuseslist = tbl_statuses::readArray(array(STATUS_EVENT=>"{$filter_event}",STATUS_RESTAURANT=>$_SESSION[SES_RESTAURANT]));	// print_r($tbl_statuseslist);	 if(is_not_empty($tbl_statuseslist)){	 	 $tmp = self::_getStatusSortList($event,$tbl_statuseslist,1);		 $cnt = 1;		 foreach($tmp as $val){ 				$lst_table_status[$cnt] = array('id'=>$val[STATUS_ID],'title'=>$val[STATUS_NAME],'exp_time'=>$val[STATUS_EXP_TIME],'event'=>$val[STATUS_EVENT],'is_optional'=>$val[STATUS_IS_OPTIONAL]);				$lst_table_status[$cnt]['clickable'] = 0; 				if(tbl_status_trigger::isStatusTriggeredByRole($val[STATUS_ID],$Global_member['member_role_id'])){					$lst_table_status[$cnt]['clickable'] = 1;				}				$cnt++; 		 }	 	 }	 	 	 	 	 	/*	 	$tmp = $tbl_statuseslist;	 $lst_table_status = array(); 		//$curritm = array_shift($tmp);		//.find the item where the previous_node_status is zero.		//and assign it to the the $curritm		foreach($tmp as $itm){			if($itm[STATUS_PREV] == 0){				$curritm = $itm;				break;			}		}		unset($tmp); 		if($curritm){					}else{			$tmp = $tbl_statuseslist;			$curritm = array_shift($tmp);		}		  				$current = $curritm[STATUS_ID];				$cnt = 1;		        while($current != NULL)        {					 if(is_not_empty($tbl_statuseslist[$current])){					 	if($tbl_statuseslist[$current][STATUS_HIDDEN]==0){							$lst_table_status[$cnt] = array('id'=>$tbl_statuseslist[$current][STATUS_ID],'title'=>$tbl_statuseslist[$current][STATUS_NAME],'exp_time'=>$tbl_statuseslist[$current][STATUS_EXP_TIME]); 							$cnt++;						}             $current = $tbl_statuseslist[$current][STATUS_NEXT]; 					 }else{					 	break;					 }        }		*/  		//print_r($lst_table_status);exit;		return $lst_table_status;	}		public static function getTableMiddleStatuses($init_stage,$last_stage){		$middle_statuses = array();		if(is_gt_zero_num($init_stage) &&  is_gt_zero_num($last_stage)){			$lst_table_status = tbl_statuses::getStatusPickerValues(); 			foreach($lst_table_status as $key=>$val){				if($val['id'] == $init_stage) $init_key = $key;					}			foreach($lst_table_status as $key=>$val){				if($val['id'] == $last_stage) $last_key = $key;					}						// echo $init_key,'=',$last_key,'<hr>';		foreach($lst_table_status as $key=>$val){  		 //echo $init_key,'<',$key,'>', $last_key, '<br>'; 			if(($init_key <= $key) && ($last_key >= $key)){				//echo '<hr>';				$middle_status[]=$val['id']; 			} 			 		}		}		return $middle_status;  }		public static function getStatusPickerKeyByStatus($status_id,$filter_event="'TABLE','ORDER'",$event='TABLE'){			$lst_statuses =self::getStatusPickerValues($filter_event,$event);		  foreach($lst_statuses as $key=>$val){				if($status_id == $val['id']){					return $key;				}			}		return 0;	}		public static function _getDefaultStatus($filter_event="'TABLE','ORDER'",$event='TABLE'){			$lst_statuses =self::getStatusPickerValues($filter_event,$event);		  foreach($lst_statuses as $key=>$val){ 					 return $val['id'];  			}		return 0;	} 		public static function _getMandatoryStatuses($event='TABLE'){	  if($event == 'TABLE' || $event=='ORDER') $event = "'TABLE','ORDER'";  	  else $event = "'{$event}'";		$lst_statuses = self::readArray(array(STATUS_IS_OPTIONAL=>0,STATUS_HIDDEN=>0,STATUS_EVENT=>$event,STATUS_RESTAURANT=>$_SESSION[SES_RESTAURANT])); 		return $lst_statuses;	}		public static function _getPrevMandatoryStatus($curr_status,$event='TABLE'){   	 if(is_gt_zero_num($curr_status)){	 	$event_str = (($event=='TABLE'||$event=='ORDER')? "'TABLE','ORDER'" : "'{$event}'");   		 	$tbl_statuseslist = tbl_statuses::readArray(array(STATUS_EVENT=>$event_str,STATUS_RESTAURANT=>$_SESSION[SES_RESTAURANT],));		 	$lst_statuses = self::_getStatusSortList($event,$tbl_statuseslist); 		 	$lst_statuses = array_reverse($lst_statuses);		 	$checkStatusPrev = 0; 		 			foreach ($lst_statuses as $status){				if(is_gt_zero_num($checkStatusPrev) && (!is_gt_zero_num($status[STATUS_IS_OPTIONAL]))){   				  return $status[STATUS_ID];				} 		 		if($status[STATUS_ID] == $curr_status) $checkStatusPrev = 1;			}	 	 } 		return 0;	}	  		static function _getStatusSortList($status_event,$tbl_statuseslist=array(),$only_visible = 0){	$res = array(); 		if(is_not_empty($tbl_statuseslist)){			 	$tmp = $tbl_statuseslist;			 	$listData = array(); 				//$curritm = array_shift($tmp);				//.find the item where the previous_node_status is zero.				//and assign it to the the $curritm					foreach($tmp as $itm){						if($itm[STATUS_PREV] == 0){							$curritm = $itm;							break;						}					}					unset($tmp); 					if($curritm){							//..do nothing					}else{						$tmp = $tbl_statuseslist;						$curritm = array_shift($tmp);					} 				 					$current = $curritm[STATUS_ID]; 	        while(is_not_empty($current)){						 if(is_not_empty($tbl_statuseslist[$current])){						 	$listData[$current] = $tbl_statuseslist[$current];	            $current = $tbl_statuseslist[$current][STATUS_NEXT]; 						 }else{						 	break;						 }	        }   					$visible_list = $hid_list = array();				 					foreach($listData as $key=>$val){ 						if($val[STATUS_RESTAURANT] == $_SESSION[SES_RESTAURANT] || $val[STATUS_RESTAURANT]== STS_DFLT_RESTAURANT){						if(($val[STATUS_EVENT] == $status_event) || ($status_event == 'TABLE' || $val[STATUS_EVENT] == 'ORDER' )){								if($val[STATUS_HIDDEN]==1){								$hid_list[] = $val; 							}else{ 									$visible_list[] = $val; 							}						}					 }						} 			  if(is_gt_zero_num($only_visible)){					$res = $visible_list;				}else{					$res = array_merge($visible_list,$hid_list);				} 				/*$res = $listData;*/		 } 		/* print_r($res);*/		return $res;	}	 }//..End tbl_statuses?>