<?php

/**********************************************************************
tbl_orders.class.php
Generated by STRUCTY 2013.04.19 10:27:39.
Copyright 2011 Structy, Frédéric Aebi. All rights reserved.
**********************************************************************/

define('TBL_ORDERS', 'tbl_orders'); 

define('ORDER_ID', 'order_id'); 
define('ORDER_TABLE_ID', 'order_table_id'); 
define('ORDER_EMP_ID', 'order_emp_id'); 
define('ORDER_SESSION_ID','order_session_id');
define('ORDER_CUSTOMER_ID', 'order_customer_id'); 
define('ORDER_CUSTOMER_NAME', 'order_customer_name');
define('ORDER_CUSTOMER_TYPE', 'order_customer_type'); 
define('ORDER_NOTE', 'order_note'); 
define('ORDER_TAX', 'order_tax');
define('ORDER_TIP', 'order_tip');    
define('ORDER_TYPE', 'order_type');  
define('ORDER_TAKEOUT_TIME', 'order_takeout_time'); 
define('ORDER_TAKEOUT_EMAIL', 'order_takeout_email'); 
define('ORDER_MANAGER_NOTE', 'order_manager_note'); 
define('ORDER_CREATED_ON', 'order_created_on'); 
define('ORDER_COMPLETED_ON', 'order_completed_on'); 
define('ORDER_STATUS_ID', 'order_status_id'); 
define('ORDER_PROMOTION','order_promotion'); 
define('ORDER_DISCOUNT_ID','order_discount_id');
define('ORDER_DISCOUNT_AMT','order_discount_amt'); 

define('ORDER_TYPE_ONLINE_DINE','ONLINE-DINE'); 
define('ORDER_TYPE_TAKE_OUT','TAKE-OUT');
define('ORDER_TYPE_DELIVERY','DELIVERY');
define('ORDER_TYPE_AT_LOCATION','AT-LOCATION');
 
define('ORDER_ISCLAIMED_PROMOTIONS','order_isclaimed_promotions'); 
define('ORDER_DELAYED_AT','order_delayed_at');
define('ORDER_RESTAURANT','order_restaurant');
define('ORDER_ISASK_FOR_DINE','order_isask_for_dine');
define('ORDER_MISC_CHARGE','order_misc_charge');
define('ORDER_MISC_DESC','order_misc_desc'); 
define('ORDER_TIP_DISTRIBUTION','order_tip_distribution'); 

define('ORDER_PROM_DISCNT','order_prom_discnt');

define('ORDER_ETHOR_ID','order_ethor_id');
define('ORDER_GUEST','order_guest');
define('ORDER_ONLINE_STATUS','order_online_status');

define('ORDER_REWARDPTS_ADDED','order_rewardpts_added');
define('ORDER_IS_TMP', 'order_is_tmp');


define('TBL_ORDERS_ACTIVE_DATE',  'order_created_on');
define('TBL_ORDERS_DEACTIVE_DATE',  'order_completed_on');
$tbl_orders_active_condition= " (".TBL_ORDERS_DEACTIVE_DATE." is NULL OR ".TBL_ORDERS_DEACTIVE_DATE." = 0 ) ";

class tbl_orders {

	private $order_id;
	private $order_table_id;
	private $order_emp_id;
	private $order_customer_id;
	private $order_session_id;
	private $order_customer_name;
	private $order_customer_type;
	private $order_note;
	private $order_tax; 
	private $order_tip; 
	private $order_type;
	private $order_takeout_time;
	private $order_takeout_email;
	private $order_manager_note; 
	private $order_created_on;
	private $order_completed_on;
	private $order_status_id;
	private $order_promotion;
	private $order_discount_id;
	private $order_discount_amt; 
	private $order_delayed_at;
	private $order_isclaimed_promotions;
	private $order_isask_for_dine;
	private $order_misc_charge;
	private $order_misc_desc;
	private $order_tip_distribution;
	private $order_restaurant;
	private $order_prom_discnt;
	
	private $order_ethor_id;
	private $order_guest;
	private $order_online_status;
	
	private $tbl_orders_active_date;
	private $tbl_orders_deactive_date;

	private $dine_table;
	private $server;
	private $status;
	
	private $order_rewardpts_added;
	private $order_is_tmp;

	public function setorder_id($pArg='0') {$this->order_id=$pArg;}
	public function setorder_table_id($pArg='0') {$this->order_table_id=$pArg;}
	public function setorder_emp_id($pArg='0') {$this->order_emp_id=$pArg;}
	public function setorder_session_id($pArg='0') {$this->order_session_id=$pArg;}
	public function setorder_customer_id($pArg='0') {$this->order_customer_id=$pArg;}
	public function setorder_customer_name($pArg='0') {$this->order_customer_name=$pArg;}
	public function setorder_customer_type($pArg='0') {$this->order_customer_type=$pArg;}
	public function setorder_note($pArg='0') {$this->order_note=$pArg;}
	public function setorder_tax($pArg='0') {$this->order_tax=$pArg;}
	public function setorder_tip($pArg='0') {$this->order_tip=$pArg;}
	public function setorder_type($pArg='0') {$this->order_type=$pArg;}
	public function setorder_takeout_time($pArg='0') {$this->order_takeout_time=$pArg;}
	public function setorder_takeout_email($pArg='0') {$this->order_takeout_email=$pArg;}
	public function setorder_manager_note($pArg='0') {$this->order_manager_note=$pArg;}
	public function setorder_promotion($pArg='0') {$this->order_promotion=$pArg;}
	public function setorder_discount_id($pArg='0') {$this->order_discount_id=$pArg;}
	public function setorder_discount_amt($pArg='0') {$this->order_discount_amt=$pArg;}
	
	public function setorder_prom_discnt($pArg='0') {$this->order_prom_discnt=$pArg;}
	
	
	public function setorder_created_on($pArg='0') {$this->order_created_on=$pArg;}
	public function setorder_completed_on($pArg='0') {$this->order_completed_on=$pArg;}
	public function setorder_status_id($pArg='0') {$this->order_status_id=$pArg;}
	public function setorder_delayed_at($pArg='0') {$this->order_delayed_at=$pArg;}
	public function setorder_isclaimed_promotions($pArg='0'){$this->order_isclaimed_promotions=$pArg;}
	public function setorder_isask_for_dine($pArg='0') {$this->order_isask_for_dine=$pArg;}
	public function setorder_misc_charge($pArg='0') {$this->order_misc_charge=$pArg;}
	public function setorder_misc_desc($pArg='0') {$this->order_misc_desc=$pArg;} 
	public function setorder_tip_distribution($pArg='0') {$this->order_tip_distribution=$pArg;}
	public function setorder_restaurant($pArg='0') {$this->order_restaurant=$pArg;}
	public function settbl_orders_active_date($pArg='0') {$this->tbl_orders_active_date=$pArg;}
	public function settbl_orders_deactive_date($pArg='0') {$this->tbl_orders_deactive_date=$pArg;}
	
	public function setdine_table($pArg='0') {$this->dine_table=$pArg;}
	public function setserver($pArg='0') {$this->server=$pArg;}
	public function setstatus($pArg='0') {$this->status=$pArg;}
	
	public function setorder_ethor_id($pArg='0') {$this->order_ethor_id=$pArg;}
	public function setorder_guest($pArg='0') {$this->order_guest=$pArg;}
	public function setorder_online_status($pArg='0'){$this->order_online_status=$pArg;}
	
	public function setorder_rewardpts_added($pArg='0') {$this->order_rewardpts_added=$pArg;}
	public function setorder_is_tmp($pArg="0") {$this->order_is_tmp=$pArg;}

	public function getorder_id() {return $this->order_id;}
	public function getorder_table_id() {return $this->order_table_id;}
	public function getorder_emp_id() {return $this->order_emp_id;} 
	public function getorder_session_id() {return $this->order_session_id;}
	public function getorder_customer_id() {return $this->order_customer_id;}
	public function getorder_customer_name() {return $this->order_customer_name;}
	public function getorder_customer_type() {return $this->order_customer_type;}
	public function getorder_type() {return $this->order_type;}
	public function getorder_takeout_time() {return $this->order_takeout_time;}
	public function getorder_takeout_email() {return $this->order_takeout_email;}
	public function getorder_note() {return $this->order_note;}
	public function getorder_tax() {return $this->order_tax;}
	public function getorder_tip() {return $this->order_tip;}
	public function getorder_manager_note() {return $this->order_manager_note;}  
	public function getorder_created_on() {return $this->order_created_on;}
	public function getorder_completed_on() {return $this->order_completed_on;}
	public function getorder_status_id() {return $this->order_status_id;}
 	public function getorder_promotion() {return $this->order_promotion;}
	public function getorder_discount_id() {return $this->order_discount_id;}
	public function getorder_discount_amt() {return $this->order_discount_amt;}
	public function getorder_isask_for_dine() {return $this->order_isask_for_dine;}
	public function getorder_misc_charge() {return $this->order_misc_charge;}
	public function getorder_misc_desc() {return $this->order_misc_desc;} 
	public function getorder_tip_distribution() {return $this->order_tip_distribution;}
	public function getorder_restaurant() {return $this->order_restaurant;}
	public function getorder_isclaimed_promotions(){return $this->order_isclaimed_promotions;}
	public function gettbl_orders_active_date() {return $this->tbl_orders_active_date;}
	public function gettbl_orders_deactive_date() {return $this->tbl_orders_deactive_date;}
	public function getorder_delayed_at() {return $this->order_delayed_at;}
	
	public function getorder_prom_discnt() {return $this->order_prom_discnt;}
	
	public function getdine_table() {return $this->dine_table;}
	public function getserver() {return $this->server;}
	public function getstatus() { return $this->status;}	
	
	public function getorder_ethor_id() { return $this->order_ethor_id;}
	public function getorder_guest() { return $this->order_guest;}	
	public function getorder_online_status() { return $this->order_online_status;}	
	public function getorder_rewardpts_added() { return $this->order_rewardpts_added;}
	public function getorder_is_tmp() {return $this->order_is_tmp;}

	public function readObject($array = array()) {
		//$qry = 'SELECT *'.RET.'FROM '.TBL_ORDERS.RET;
		$qry= 'SELECT `order_id` , `order_session_id`,`order_table_id` , `order_rewardpts_added`,`order_is_tmp`,
		( SELECT  `table_number`
		 FROM tbl_dining_table WHERE 
		 `table_id` =  `order_table_id` ) AS  `dine_table` ,  `order_emp_id` , 
		IF(`order_emp_id` =0,  \'-\', (
			SELECT  CONCAT(`staff_fname`,\' \',`staff_lname`) AS `server` 
			FROM  `tbl_staff` 
			WHERE  `staff_member_id` =  `order_emp_id`
		)) AS server,`order_customer_id` ,`order_customer_name` ,`order_customer_type`,  `order_note` ,`order_tax`,`order_tip`, `order_created_on` , `order_type` , `order_takeout_time`, `order_takeout_email` , `order_note` ,`order_completed_on` , `order_status_id` , `order_manager_note`, `order_promotion`,`order_discount_id`,`order_discount_amt`, `order_delayed_at`, `order_isask_for_dine`,`order_misc_charge`, `order_misc_desc`,  `order_restaurant`, `order_isclaimed_promotions`, `order_tip_distribution`,`order_prom_discnt`,`order_ethor_id`,`order_guest`, `order_online_status` , (
		SELECT `status_name` 
		FROM  `tbl_statuses`
		WHERE  `status_id` =  `order_status_id`
		) AS `status` 
		'.RET.'FROM '.TBL_ORDERS.RET;	
		$and = 'WHERE'.RET;

		if($array[ORDER_ID] != '') {
			$qry .= $and.ORDER_ID.' = \''.$array[ORDER_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_TABLE_ID] != '') {
			$qry .= $and.ORDER_TABLE_ID.' = \''.$array[ORDER_TABLE_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_EMP_ID] != '') {
			$qry .= $and.ORDER_EMP_ID.' = \''.$array[ORDER_EMP_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_RESTAURANT] != '') {
			$qry .= $and.ORDER_RESTAURANT.' = \''.$array[ORDER_RESTAURANT].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_SESSION_ID] != '') {
			$qry .= $and.ORDER_SESSION_ID.' = \''.$array[ORDER_SESSION_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_ID] != '') {
			$qry .= $and.ORDER_CUSTOMER_ID.' = \''.$array[ORDER_CUSTOMER_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_NAME] != '') {
			$qry .= $and.ORDER_CUSTOMER_NAME.' = \''.$array[ORDER_CUSTOMER_NAME].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_CUSTOMER_TYPE] != '') {
			$qry .= $and.ORDER_CUSTOMER_TYPE.' = \''.$array[ORDER_CUSTOMER_TYPE].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_NOTE] != '') {
			$qry .= $and.ORDER_NOTE.' = \''.$array[ORDER_NOTE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TAX] != '') {
			$qry .= $and.ORDER_TAX.' = \''.$array[ORDER_TAX].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TYPE] != '') {
			$qry .= $and.ORDER_TYPE.' = \''.$array[ORDER_TYPE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TAKEOUT_EMAIL] != '') {
			$qry .= $and.ORDER_TAKEOUT_EMAIL.' = \''.$array[ORDER_TAKEOUT_EMAIL].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TAKEOUT_TIME] != '') {
			$qry .= $and.ORDER_TAKEOUT_TIME.' = \''.$array[ORDER_TAKEOUT_TIME].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CREATED_ON] != '') {
			$qry .= $and.ORDER_CREATED_ON.' = \''.$array[ORDER_CREATED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_COMPLETED_ON] != '') {
			$qry .= $and.ORDER_COMPLETED_ON.' = \''.$array[ORDER_COMPLETED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_STATUS_ID] != '') {
			$qry .= $and.ORDER_STATUS_ID.' = \''.$array[ORDER_STATUS_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_PROMOTION] != '') {
			$qry .= $and.ORDER_PROMOTION.' = \''.$array[ORDER_PROMOTION].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_ID] != '') {
			$qry .= $and.ORDER_DISCOUNT_ID.' = \''.$array[ORDER_DISCOUNT_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_AMT] != '') {
			$qry .= $and.ORDER_DISCOUNT_AMT.' = \''.$array[ORDER_DISCOUNT_AMT].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TIP_DISTRIBUTION] != '') {
			$qry .= $and.ORDER_TIP_DISTRIBUTION.' = \''.$array[ORDER_TIP_DISTRIBUTION].'\''.RET;
			$and = 'AND'.RET;
		}
				
		if($array[ORDER_ISASK_FOR_DINE] != '') {
			$qry .= $and.ORDER_ISASK_FOR_DINE.' = \''.$array[ORDER_ISASK_FOR_DINE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_ISCLAIMED_PROMOTIONS] != '') {
			$qry .= $and.ORDER_ISCLAIMED_PROMOTIONS.' = \''.$array[ORDER_ISCLAIMED_PROMOTIONS].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_IS_TMP] != "") {
			$qry .= $and.ORDER_IS_TMP." = '".$array[ORDER_IS_TMP]."'".RET;
			$and = "AND".RET;
		}
		
		if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		
			$qry .=' ORDER BY '.$array[SORT_ON].' '.$array[SORT_BY];		
		}

		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {
			$qry  = $qry.' LIMIT '.$array[OFFSET_TITLE].','.$array[LIMIT_TITLE];
		}
		 
		$result = mysql_query($qry);
		if($result) {
			while ($row = mysql_fetch_array($result)) {
				$record = $row;
				break;//end after first record
			}
			if(count($record[0]) == 0) {
				return array();
			} else {
				$this->setorder_id($record[ORDER_ID]);
				$this->setorder_table_id($record[ORDER_TABLE_ID]);
				$this->setorder_emp_id($record[ORDER_EMP_ID]);
				$this->setorder_session_id($record[ORDER_SESSION_ID]);
				$this->setorder_customer_id($record[ORDER_CUSTOMER_ID]);
				$this->setorder_customer_name($record[ORDER_CUSTOMER_NAME]);
				$this->setorder_customer_type($record[ORDER_CUSTOMER_TYPE]);
				$this->setorder_note($record[ORDER_NOTE]);
				$this->setorder_tax($record[ORDER_TAX]);
				$this->setorder_tip($record[ORDER_TIP]);
				$this->setorder_type($record[ORDER_TYPE]);
				$this->setorder_takeout_time($record[ORDER_TAKEOUT_TIME]);
				$this->setorder_takeout_email($record[ORDER_TAKEOUT_EMAIL]);
				
				$this->setorder_created_on($record[ORDER_CREATED_ON]);
				$this->setorder_completed_on($record[ORDER_COMPLETED_ON]);
				$this->setorder_status_id($record[ORDER_STATUS_ID]);
				$this->setorder_manager_note($record[ORDER_MANAGER_NOTE]);
				$this->setorder_promotion($record[ORDER_PROMOTION]);
				$this->setorder_discount_id($record[ORDER_DISCOUNT_ID]);
				$this->setorder_discount_amt($record[ORDER_DISCOUNT_AMT]);
				$this->setorder_delayed_at($record[ORDER_DELAYED_AT]);
				$this->setorder_isask_for_dine($record[ORDER_ISASK_FOR_DINE]);
				$this->setorder_isclaimed_promotions($record[ORDER_ISCLAIMED_PROMOTIONS]);
				$this->setorder_restaurant($record[ORDER_RESTAURANT]);
				$this->setorder_misc_charge($record[ORDER_MISC_CHARGE]);
				$this->setorder_misc_desc($record[ORDER_MISC_DESC]);
				$this->setorder_tip_distribution($record[ORDER_TIP_DISTRIBUTION]);
				
				$this->setorder_prom_discnt($record[ORDER_PROM_DISCNT]);
				
				$this->setorder_rewardpts_added($record[ORDER_REWARDPTS_ADDED]);
				$this->setorder_is_tmp($record[ORDER_IS_TMP]);
				
				$this->setdine_table($record['dine_table']);
				$this->setserver($record['server']);
				
				$type_prefix = $this->getOrderTypeTitle($record[ORDER_TYPE],1); 
				if(is_not_empty($type_prefix)){
					
				if(stristr($record['status'],'Order ')){
			 	 $record['status'] = str_ireplace('Order ',$type_prefix.' ',$record['status']);
			 }else{
			 	 $record['status'] = $type_prefix .' '.$record['status'];
			 }
					
					/*if($tmpstatus = str_ireplace('order ',$type_prefix.' ',$record['status'])){
						$record['status'] = $tmpstatus;
						unset($tmpstatus);
					}else{
						$record['status'] = $type_prefix .' '.$record['status'];
					}*/
					
					
				}
				$this->setstatus($record['status']);
				
				$this->setorder_ethor_id($record['order_ethor_id']);
				$this->setorder_guest($record['order_guest']);
				$this->setorder_online_status($record['order_online_status']);
								
				
				$this->settbl_orders_active_date($record[TBL_ORDERS_ACTIVE_DATE]);
				$this->settbl_orders_deactive_date($record[TBL_ORDERS_DEACTIVE_DATE]);
				return true;
			}
		}
	}

	public static function readArray($array = array(),&$result_found=0,$isArray=1,$is_emp_chk=0) {
		global $tbl_orders_active_condition,$emp_tables;
		//print_r($emp_tables);
		//$qry = 'SELECT *'.RET.'FROM '.TBL_ORDERS.RET;
		$qry= 'SELECT DISTINCT `order_id`,`order_table_id` ,`order_rewardpts_added`, `order_is_tmp`,
		( SELECT  `table_number`
		 FROM tbl_dining_table WHERE 
		 `table_id` = `order_table_id` ) AS  `dine_table` ,  `order_emp_id` ,
		IF(`order_emp_id` =0,  \'-\', (
			SELECT  CONCAT(`staff_fname`,\' \',`staff_lname`) AS `server` 
			FROM  `tbl_staff` 
			WHERE  `staff_member_id` =  `order_emp_id`
		)) AS server, `order_session_id`,'.ORDER_TIP_DISTRIBUTION.',
		`order_customer_id` ,`order_customer_name`,`order_customer_type` , `order_note`, `order_tax`,`order_tip`,`order_type` , `order_takeout_time`, `order_takeout_email` , `order_created_on` , `order_completed_on` , `order_status_id` ,`order_manager_note`, `order_promotion`,`order_discount_id`,`order_discount_amt`, `order_delayed_at`, `order_restaurant`, `order_isask_for_dine`, `order_isclaimed_promotions`, `order_misc_charge`, `order_misc_desc`,`order_prom_discnt`,`order_ethor_id`,`order_guest`, (
		SELECT `status_name` 
		FROM  `tbl_statuses`
		WHERE  `status_id` =  `order_status_id`
		) AS `status`,
		`tbl_sub_orders`.`sub_route`,`tbl_sub_orders`.`sub_confirmed_at` 
		FROM `tbl_orders`
		 INNER JOIN `tbl_sub_orders`
		ON `tbl_orders`.`order_id`=`tbl_sub_orders`.`sub_order_id`
		LEFT OUTER JOIN `tbl_order_details`  
		ON `tbl_orders`.`order_id`=`tbl_order_details`.`ord_dtl_order_id`
		LEFT OUTER JOIN `tbl_submenu_dishes` 
		ON `tbl_order_details`.`ord_dtl_sbmenu_dish_id`=`tbl_submenu_dishes`.`sbmnu_dish_id`
		LEFT OUTER JOIN `tbl_dishes` 
		ON `tbl_submenu_dishes`.`sbmnu_dish_dish`=`tbl_dishes`.`dish_id`
		LEFT OUTER JOIN `tbl_order_details_options` 
		ON `tbl_order_details`.`ord_dtl_id`=`tbl_order_details_options`.`ord_det_opt_order_detail` ';
	/*
		$qry= 'SELECT DISTINCT `order_id`,`order_table_id` ,   
		( SELECT  `table_number`
		 FROM tbl_dining_table WHERE 
		 `table_id` = `order_table_id` ) AS  `dine_table` ,  `order_emp_id` ,
		IF(`order_emp_id` =0,  \'-\', (
			SELECT  CONCAT(`staff_fname`,\' \',`staff_lname`) AS `server` 
			FROM  `tbl_staff` 
			WHERE  `staff_member_id` =  `order_emp_id`
		)) AS server, `order_session_id`,
		`order_customer_id` ,`order_customer_name`,`order_customer_type` , `order_note`, `order_tax`,`order_tip`,`order_type` , `order_takeout_time`, `order_takeout_email` , `order_created_on` , `order_completed_on` , `order_status_id` ,`order_manager_note`, `order_promotion`,`order_discount_id`,`order_discount_amt`, `order_delayed_at`, `order_restaurant`, `order_isask_for_dine`, `order_isclaimed_promotions`, `sub_status_id`,`'.SUB_CONFIRMED_AT.'`, (
		
		SELECT `status_name` 
		FROM  `tbl_statuses`
		WHERE  `status_id` =  `order_status_id`
		) AS `status`,  
		`tbl_dishes`.`dish_name`,
		(SELECT `dish_opt_name`
		FROM `tbl_dish_options`
		INNER JOIN `tbl_dish_options_values`
		ON `dish_opt_id` = `dish_opt_val_option_id`
		WHERE
		`dish_opt_val_id`=`tbl_order_details_options`.`ord_det_opt_optionvalue`
		 ) as `dish_opt_name`,
		 `tbl_order_details`.`ord_dtl_sbmenu_dish_id`,`tbl_sub_orders`.`sub_route`
		FROM `tbl_orders` 
		INNER JOIN `tbl_sub_orders`
		ON `tbl_orders`.`order_id`=`tbl_sub_orders`.`sub_order_id`
		LEFT OUTER JOIN `tbl_order_details`  
		ON `tbl_orders`.`order_id`=`tbl_order_details`.`ord_dtl_order_id`
		LEFT OUTER JOIN `tbl_submenu_dishes` 
		ON `tbl_order_details`.`ord_dtl_sbmenu_dish_id`=`tbl_submenu_dishes`.`sbmnu_dish_id`
		LEFT OUTER JOIN `tbl_dishes` 
		ON `tbl_submenu_dishes`.`sbmnu_dish_dish`=`tbl_dishes`.`dish_id`
		LEFT OUTER JOIN `tbl_order_details_options` 
		ON `tbl_order_details`.`ord_dtl_id`=`tbl_order_details_options`.`ord_det_opt_order_detail` ';*/
		//'.RET.'FROM '.TBL_ORDERS.RET;
		$and = 'HAVING '.RET;
		
		if($array[ORDER_ID] != '') {
			$qry .= $and.ORDER_ID.' = \''.$array[ORDER_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_TABLE_ID] != '') {
			$qry .= $and.ORDER_TABLE_ID.' = \''.$array[ORDER_TABLE_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_EMP_ID] != '') {
			$qry .= $and.ORDER_EMP_ID.' = \''.$array[ORDER_EMP_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_SESSION_ID] != '') {
			$qry .= $and.ORDER_SESSION_ID.' = \''.$array[ORDER_SESSION_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_ID] != '') {
			$qry .= $and.ORDER_CUSTOMER_ID.' = \''.$array[ORDER_CUSTOMER_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_NAME] != '') {
		   $qry .= $and.ORDER_CUSTOMER_NAME.' LIKE \'%'.$array[ORDER_CUSTOMER_NAME].'%\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_CUSTOMER_TYPE] != '') {
		   $qry .= $and.ORDER_CUSTOMER_TYPE.' LIKE \'%'.$array[ORDER_CUSTOMER_TYPE].'%\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_NOTE] != '') {
			$qry .= $and.ORDER_NOTE.' = \''.$array[ORDER_NOTE].'\''.RET;
			$and = 'AND'.RET;
		}
		//..Condition to show user preferences/manager note
		//..this is used when showing customer history based on the customer name
		if($array['order_note_not_empty'] != '') {
			$qry .= $and.'( trim('.ORDER_NOTE.')<>\'\' OR trim('.ORDER_MANAGER_NOTE.')<>\'\' )'.RET;
			$and = 'AND'.RET;
		}	
		
		if($array[ORDER_TAX] != '') {
			$qry .= $and.ORDER_TAX.' = \''.$array[ORDER_TAX].'\''.RET;
			$and = 'AND'.RET;
		} 
		
		if($array[ORDER_TYPE] != '') {
			$qry .= $and.ORDER_TYPE.' = \''.$array[ORDER_TYPE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TAKEOUT_EMAIL] != '') {
			$qry .= $and.ORDER_TAKEOUT_EMAIL.' = \''.$array[ORDER_TAKEOUT_EMAIL].'\''.RET;
			$and = 'AND'.RET;
		}
		
			if($array[ORDER_TAKEOUT_TIME] != '') {
			$qry .= $and.ORDER_TAKEOUT_TIME.' = \''.$array[ORDER_TAKEOUT_TIME].'\''.RET;
			$and = 'AND'.RET;
		} 

		if($array[ORDER_CREATED_ON] != '') {
			$qry .= $and.ORDER_CREATED_ON.' = \''.$array[ORDER_CREATED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_COMPLETED_ON] != '') {
			$qry .= $and.ORDER_COMPLETED_ON.' = \''.$array[ORDER_COMPLETED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_STATUS_ID] != '') {
			$qry .= $and.ORDER_STATUS_ID.' = \''.$array[ORDER_STATUS_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_PROMOTION] != '') {
			$qry .= $and.ORDER_PROMOTION.' = \''.$array[ORDER_PROMOTION].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array['ordprom_promotion_there'] == 1) {
			$qry .= $and.ORDER_PROMOTION.'>0'.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_ID] != '') {
			$qry .= $and.ORDER_DISCOUNT_ID.' = \''.$array[ORDER_DISCOUNT_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_AMT] != '') {
			if($array['isDiscAmtGtZero'] ==1){
				$qry .= $and.ORDER_DISCOUNT_AMT.' > 0'.RET;
			}else{
				$qry .= $and.ORDER_DISCOUNT_AMT.' = '.$array[ORDER_DISCOUNT_AMT].''.RET;
			}
			
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_RESTAURANT] != '') {
			$qry .= $and.ORDER_RESTAURANT.' = \''.$array[ORDER_RESTAURANT].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_ISASK_FOR_DINE] != '') {
			$qry .= $and.ORDER_ISASK_FOR_DINE.' = \''.$array[ORDER_ISASK_FOR_DINE].'\''.RET;
			$and = 'AND'.RET;
		} 
		
		if($array[ORDER_TIP_DISTRIBUTION] != '') {
			$qry .= $and.ORDER_TIP_DISTRIBUTION.' = \''.$array[ORDER_TIP_DISTRIBUTION].'\''.RET;
			$and = 'AND'.RET;
		} 
		
		if($array[ORDER_ISCLAIMED_PROMOTIONS] != '') {
			$qry .= $and.ORDER_ISCLAIMED_PROMOTIONS.' = \''.$array[ORDER_ISCLAIMED_PROMOTIONS].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if(is_gt_zero_num($array['isActive'])) {
			$qry .= $and.$tbl_orders_active_condition;
			$and = 'AND'.RET;
		} 
		
		if(is_not_empty($array['isTempAllowed'])){
		  if($array['isTempAllowed'] == 0){
		  	$qry .= $and.ORDER_SESSION_ID.' <> 0'.RET;
				$and = 'AND'.RET;
		  }  
		}
		
		if(is_not_empty($array['online_orders'])){
			if(is_gt_zero_num($array['online_orders'])){
		  	 $qry .= $and.ORDER_TYPE.' <>  \''.ORDER_TYPE_AT_LOCATION.'\''.RET;
				 $and = 'AND'.RET;
		  }else{
				$qry .= $and.ORDER_TYPE.' =  \''.ORDER_TYPE_AT_LOCATION.'\''.RET;
				$and = 'AND'.RET;
			} 
		  /*if(is_gt_zero_num($array['online_orders'])){
		  	 $qry .= $and.ORDER_TYPE.' =  \''.ORDER_TYPE_TAKE_OUT.'\''.RET;
				 $and = 'AND'.RET;
		  }else{
				$qry .= $and.ORDER_TYPE.' <>  \''.ORDER_TYPE_TAKE_OUT.'\''.RET;
				$and = 'AND'.RET;
			}  */
		}
		
		if(is_not_empty($array[ORDER_IS_TMP])) {
			$qry .= $and.ORDER_IS_TMP." = ".$array[ORDER_IS_TMP]."".RET;
			$and = "AND".RET;
		}
		
		if(is_not_empty($array['isConfirmedOnly'])){
		  if($array['isConfirmedOnly'] == 1){
		  	//$qry .= $and.ORDER_STATUS_ID.' >='.TBL_STATUS_ORDER_CONFIRM.RET;
				//$qry .= $and.SUB_STATUS_ID.' >='.TBL_STATUS_ORDER_CONFIRM.RET;
				$qry .= $and.'('.SUB_CONFIRMED_AT.' is NOT NULL OR '.SUB_CONFIRMED_AT.' <> 0)'.RET;
			 	
				$and = 'AND'.RET;
		  }  
		}
		
		if(is_not_empty($array['isNonPaid'])){
			if($array['isNonPaid'] == 1){
		  	$qry .= $and.ORDER_STATUS_ID.' >='.TBL_STATUS_ORDER_CONFIRM.RET.' AND ('.ORDER_STATUS_ID.' <> '.TBL_STATUS_CHECK.' OR '.ORDER_STATUS_ID.' <> '.TBL_STATUS_ORDER_CANCELLED.')'.RET;
				$and = 'AND'.RET;
		  }
		}
		
		if(is_not_empty($array['isNonPaidExcConfirm'])){
			if($array['isNonPaidExcConfirm'] == 1){
		  	$qry .= $and.' ('.ORDER_STATUS_ID.' <> '.TBL_STATUS_CHECK.' OR '.ORDER_STATUS_ID.' <> '.TBL_STATUS_ORDER_CANCELLED.')'.RET;
				$and = 'AND'.RET;
		  }
		}
		
		//..Filter for live or expired
		if(is_not_empty($array['ord_live_only'])){
			//..First get the live table session
			$active_session = tbl_table_customer_session::getActiveSessionForAlltables();
			$curDate = date('Y-m-d');
			if(is_gt_zero_num($array['ord_live_only'])) {
				if(is_not_empty($active_session)){
					$tmpcond = '('.ORDER_SESSION_ID.' IN ('.$active_session.') OR ('.ORDER_SESSION_ID.'=0 AND DATE('.ORDER_CREATED_ON.') ="'.$curDate.'"))';
				}else{
					$tmpcond =  '('.ORDER_SESSION_ID.'=0 AND DATE('.ORDER_CREATED_ON.') = "'.$curDate.'")';
				} 
					//$qry .= $and.' '.$tmpcond.' AND '.$tbl_orders_active_condition.RET;
					$qry .= $and.' '.$tmpcond.' AND ((FIND_IN_SET('.ORDER_STATUS_ID.',\''.TBL_STATUS_ORDER_CANCELLED.','.TBL_STATUS_CHECK.','.TBL_STATUS_DELIVERED.'\') AND '.$tmpcond.' ) OR '.$tbl_orders_active_condition.')'.RET;
					// echo $qry;
					unset($tmpcond);
				 
			}else{ 
				$qry .= $and.(is_not_empty($active_session) ? '('.ORDER_SESSION_ID.' NOT IN ('.$active_session.')':'( 1 ').'  OR (('.ORDER_COMPLETED_ON.' IS NOT NULL) AND ('.(is_not_empty($active_session) ? ''.ORDER_SESSION_ID.' NOT IN ('.$active_session.')':' 1 ').') AND ('.ORDER_COMPLETED_ON.' != 0))) AND DATE('.ORDER_CREATED_ON.') <= "'.$curDate.'"'.RET;				 
			}
			$and = 'AND'.RET;
			/*if(is_gt_zero_num($array['ord_live_only'])) {
				$qry .= $and.\'DATE(\'.ORDER_CREATED_ON.\') = CURDATE()\'.RET;
				$and = \'AND\'.RET;
			}else{
				$qry .= $and.\'DATE(\'.ORDER_CREATED_ON.\') < CURDATE()\'.RET;
				$and = \'AND\'.RET; 
			}*/
		}		
		
		//..Filter condition 
		if(is_not_empty($array['srch_bill_ammt'])){
			$ords=array();
		  	switch($array['srch_bill_ammt']) {
				case 1:
				   $ords= tbl_orders::getOrderIdByAmtRange(0,20);
				   break;
				case 2:
				   $ords=tbl_orders::getOrderIdByAmtRange(20,40);
				   break;
				case 3:
				   $ords=tbl_orders::getOrderIdByAmtRange(40,60);
				   break;
				case 4:
				   $ords=tbl_orders::getOrderIdByAmtRange(60,80);
				   break;
				case 5:
				   $ords=tbl_orders::getOrderIdByAmtRange(80,100);
				   break;
				case 6:
				   $ords=tbl_orders::getOrderIdByAmtRange(100,1000);
				   break;
			}
			if(is_not_empty($ords)){
				$qry .= $and.ORDER_ID.' IN ('.implode(',',$ords).') '.RET;
				$and = 'AND'.RET;	
			}else{
				$qry .= $and.' 0 '.RET;
				$and = 'AND'.RET;
			}			
		}	 
		
		//..show only booked orders
		if(is_gt_zero_num($array['booked'])){
			//echo $array['booked'].'='.$array['lst_booked_orders'];
		 	$qry .= $and.ORDER_ID.' IN ('.$array['lst_booked_orders'].')'.RET;
			$and = 'AND'.RET;
		}		
		
		if(is_not_empty($array['keyword'])) {		
			/*$qry .= $and.'('.ORDER_CUSTOMER_NAME.' LIKE \'%'.$array[\'keyword\'].'%\' OR `dish_name` LIKE \'%'.$array[\'keyword\'].'%\' OR  `dish_opt_name` LIKE \'%'.$array[\'keyword\'].'%\'  OR  `server` LIKE \'%'.$array[\'keyword\'].'%\' ) '.RET;*/
			//$qry .= $and.' `ord_dtl_sbmenu_dish_id` IN ('.$array['keyword'].')'.RET;
			$qry .= $and.' '.ORDER_ID.' IN ('.tbl_order_details::getOrderIdsBySubMenuDish($array['keyword']).') ';  
			$and = 'AND'.RET;
		}
		
		/*if(is_not_empty($array['route'])) {		
			  	$qry .= $and.' `tbl_sub_orders`.`sub_route` =  '.$array['route'].''.RET;
			$and = 'AND'.RET;
		}*/
		 
		if(is_not_empty($array['created_on_start']) && is_not_empty($array['created_on_end'])){
			$qry .= $and.ORDER_CREATED_ON.' >= \''.date('Y-m-d 00:00:00',strtotime($array['created_on_start'])).'\''.RET.'AND '.ORDER_CREATED_ON.' <= \''.date('Y-m-d 23:59:59',strtotime($array['created_on_end'])).'\''.RET;
			$and = 'AND'.RET;
		}	
		
		
			
		
		if(is_not_empty($array[REPORT])) {		
			switch($array['report']){
				case 'DAY' : $qry .=' ORDER BY '.ORDER_CREATED_ON .'desc '; 
				break;
				case 'TABLE' : $qry .=' ORDER BY '.ORDER_TABLE_ID .' '; 
				break;
				case 'EMPLOYEE' : $qry .=' ORDER BY '.ORDER_EMP_ID.''; 
				break;				
				default : 
					if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		
						$qry .=' ORDER BY '.$array[SORT_ON].' '.$array[SORT_BY];		
					}else{
						$qry .=' ORDER BY '.ORDER_ID.' desc '; 
					}				
					break;
			}	 
		}elseif(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {	
			$qry .=' ORDER BY '.$array[SORT_ON].' '.$array[SORT_BY];		
		}		

		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {
			$qry_with_limit  = $qry.' LIMIT '.$array[OFFSET_TITLE].','.$array[LIMIT_TITLE];
		}else{
			$qry_with_limit  = $qry;
		}
		//echo $qry_with_limit;
	    //  echo '<div style="display:none">',$qry_with_limit,'</div>';
	    //exit;
		$result = mysql_query ($qry_with_limit);
		$r1 = mysql_query($qry);
		if($r1){
			$result_found = mysql_num_rows($r1);
		}
		$class_objects = array();
		if($result) {
			while ($record = mysql_fetch_assoc($result)) {
				$isActive= 0;
				//..check deactive date is not set or 0
				if((is_not_empty($record[TBL_ORDERS_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_ORDERS_DEACTIVE_DATE]))== false)){
					$isActive = 1; 
				}else{
					//..check the deactive date is greater than todays date
					if(strtotime($record[TBL_ORDERS_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){
						$isActive = 1;
					}
				}

				if($isArray){
					$class_object = array();
					//echo $record[ORDER_EMP_ID]."dsfdsf-".$Global_member['member_role_id'];
					//..Employee check to show the records which the tables he is worki
					if(($is_emp_chk==1) && ($Global_member['member_role_id'] == ROLE_WAITER) && ($record[ORDER_EMP_ID]==0)){
						if(is_not_empty($emp_tables)){
							
							if (array_key_exists($record[ORDER_TABLE_ID], $emp_tables)==false) {						continue;								
							}
						}else{
							continue;
						}									
					}					
					$class_object[ORDER_ID]=$record[ORDER_ID];
					$class_object[ORDER_TABLE_ID]=$record[ORDER_TABLE_ID]; 
					$class_object[ORDER_EMP_ID]=$record[ORDER_EMP_ID];
					$class_object[ORDER_SESSION_ID]=$record[ORDER_SESSION_ID];
					$class_object['customer_session'] = tbl_table_customer_session::GetInfo($record[ORDER_SESSION_ID]);
					$class_object[ORDER_CUSTOMER_ID]=$record[ORDER_CUSTOMER_ID];
					$class_object[ORDER_CUSTOMER_NAME]=$record[ORDER_CUSTOMER_NAME];
					$class_object[ORDER_CUSTOMER_TYPE]=$record[ORDER_CUSTOMER_TYPE];
					$class_object[ORDER_NOTE]	=	$record[ORDER_NOTE];
					$class_object[ORDER_TAX]	= $record[ORDER_TAX];
					$class_object[ORDER_TIP]	= $record[ORDER_TIP];
					$class_object[ORDER_TYPE]	=	$record[ORDER_TYPE];
					$class_object[ORDER_TAKEOUT_EMAIL]=$record[ORDER_TAKEOUT_EMAIL];
					$class_object[ORDER_TAKEOUT_TIME]=$record[ORDER_TAKEOUT_TIME];
					$class_object[ORDER_CREATED_ON]=$record[ORDER_CREATED_ON];
					$class_object[ORDER_COMPLETED_ON]=$record[ORDER_COMPLETED_ON];
					$class_object[ORDER_PROMOTION] = $record[ORDER_PROMOTION];
					$class_object[ORDER_DISCOUNT_ID] = $record[ORDER_DISCOUNT_ID]; 
					$class_object[ORDER_DISCOUNT_AMT] = $record[ORDER_DISCOUNT_AMT];
					$class_object[ORDER_DELAYED_AT] = $record[ORDER_DELAYED_AT];
					$class_object[ORDER_RESTAURANT] = $record[ORDER_RESTAURANT];
					$class_object[ORDER_ISCLAIMED_PROMOTIONS] = $record[ORDER_ISCLAIMED_PROMOTIONS];
					$class_object[ORDER_ISASK_FOR_DINE] = $record[ORDER_ISASK_FOR_DINE];
					
					$class_object['friendly_created_on']=friendly_time($record[ORDER_CREATED_ON],1);
					$class_object['friendly_completed_on']=friendly_time($record[ORDER_COMPLETED_ON],1);
					$class_object[ORDER_STATUS_ID]=$record[ORDER_STATUS_ID];
					$class_object[ORDER_MANAGER_NOTE] = $record[ORDER_MANAGER_NOTE];
					$class_object[ORDER_MISC_CHARGE] 	= $record[ORDER_MISC_CHARGE];
					$class_object[ORDER_MISC_DESC] 		= $record[ORDER_MISC_DESC];
					
					$class_object[ORDER_PROM_DISCNT] 		= $record[ORDER_PROM_DISCNT];
					
					$class_object['dine_table']=$record['dine_table'];
					$class_object['server']=$record['server'];
					$class_object[ORDER_TIP_DISTRIBUTION] = $record[ORDER_TIP_DISTRIBUTION];
					$type_prefix =  self::getOrderTypeTitle($record[ORDER_TYPE],1); 
					if(is_not_empty($type_prefix)){ 
						if(stristr($record['status'],'Order ')){
				 	 		$record['status'] = str_ireplace('Order ',$type_prefix.' ',$record['status']);
				 		}else{
				 	 		$record['status'] = $type_prefix .' '.$record['status'];
			 			}
						/*if($tmpstatus = str_ireplace('order ',$type_prefix.' ',$record['status'])){
								$record['status'] = $tmpstatus;
								unset($tmpstatus);
						}else{
							$record['status'] = $type_prefix .' '.$record['status'];
						} */ 
					}
					
					$class_object['status']=$record['status'];
					$class_object['order_ethor_id']=$record['order_ethor_id'];
					
					$class_object['order_guest']=$record['order_guest'];
					$class_object[ORDER_ONLINE_STATUS]=$record[ORDER_ONLINE_STATUS];
					$class_object['order_rewardpts_added']=$record[ORDER_REWARDPTS_ADDED];
					$class_object["order_is_tmp"]=$record[ORDER_IS_TMP];					
					$class_object['isActive']=$isActive;
					
				}else{
					$class_object = new tbl_orders();
					$class_object->setorder_id($record[ORDER_ID]);
					$class_object->setorder_table_id($record[ORDER_TABLE_ID]);
					$class_object->setorder_emp_id($record[ORDER_EMP_ID]);
					$class_object->setorder_session_id($record[ORDER_SESSION_ID]);
					$class_object->setorder_customer_id($record[ORDER_CUSTOMER_ID]);
					$class_object->setorder_customer_name($record[ORDER_CUSTOMER_NAME]);
					$class_object->setorder_customer_type($record[ORDER_CUSTOMER_TYPE]);
					$class_object->setorder_note($record[ORDER_NOTE]);
					$class_object->setorder_manager_note($record[ORDER_MANAGER_NOTE]);
					$class_object->setorder_created_on($record[ORDER_CREATED_ON]);
					$class_object->setorder_completed_on($record[ORDER_COMPLETED_ON]);
					$class_object->setorder_status_id($record[ORDER_STATUS_ID]);
					$class_object->setorder_delayed_at($record[ORDER_DELAYED_AT]);
					$class_object->setorder_isclaimed_promotions($record[ORDER_ISCLAIMED_PROMOTIONS]);
					$class_object->setorder_isask_for_dine($record[ORDER_ISASK_FOR_DINE]);
					$class_object->setorder_misc_charge($record[ORDER_MISC_CHARGE]);
					$class_object->setorder_misc_desc($record[ORDER_MISC_DESC]);
					$class_object->setorder_restaurant($record[ORDER_RESTAURANT]);
					$class_object->setorder_tip_distribution($record[ORDER_TIP_DISTRIBUTION]);
					
					$class_object->setorder_prom_discnt($record[ORDER_PROM_DISCNT]);
					$class_object->setorder_ethor_id($record['order_ethor_id']);
					
					$class_object->setorder_guest($record['order_guest']);
					$this->setorder_rewardpts_added($record[ORDER_REWARDPTS_ADDED]);
					$class_object->setorder_is_tmp($record[ORDER_IS_TMP]);
				}
				$class_objects[$record[ORDER_ID]] = $class_object;
			}
		}
		//print_r($class_objects);
		return $class_objects;
	}//..End readArray

	public function insert() {
		if($this->getorder_id() != '') {
			$qry  = 'UPDATE '.TBL_ORDERS.RET.'SET'.RET.''.ORDER_ID.' = \''.$this->getorder_id().'\','.RET.''.ORDER_TABLE_ID.' = \''.$this->getorder_table_id().'\','.RET.''.ORDER_EMP_ID.' = \''.$this->getorder_emp_id().'\','.RET.''.ORDER_CUSTOMER_ID.' = \''.$this->getorder_customer_id().'\','.RET.''.ORDER_SESSION_ID.' = \''.$this->getorder_session_id().'\','.RET.''.ORDER_CUSTOMER_NAME.' = \''.$this->getorder_customer_name().'\','.RET.''.ORDER_CUSTOMER_TYPE.' = \''.$this->getorder_customer_type().'\','.RET.'
			'.ORDER_NOTE.' = \''.$this->getorder_note().'\','.RET.'
			'.ORDER_MANAGER_NOTE.' = \''.$this->getorder_manager_note().'\','.RET.'
			'.ORDER_TAX.' = \''.$this->getorder_tax().'\','.RET.'
			'.ORDER_TIP.' = \''.$this->getorder_tip().'\','.RET.'
			'.ORDER_TYPE.' = \''.$this->getorder_type().'\','.RET.'
			'.ORDER_TAKEOUT_EMAIL.' = \''.$this->getorder_takeout_email().'\','.RET.'
			'.ORDER_TAKEOUT_TIME.' = \''.$this->getorder_takeout_time().'\','.RET.'
			'.ORDER_PROMOTION.' = \''.$this->getorder_promotion().'\','.RET.'
			'.ORDER_DISCOUNT_ID.' = \''.$this->getorder_discount_id().'\','.RET.'
			'.ORDER_DISCOUNT_AMT.' = \''.$this->getorder_discount_amt().'\','.RET.'
			
			'.ORDER_CREATED_ON.' = \''.$this->getorder_created_on().'\','.RET.'
			'.ORDER_COMPLETED_ON.' = \''.$this->getorder_completed_on().'\','.RET.'
			'.ORDER_DELAYED_AT.' = \''.$this->getorder_delayed_at().'\','.RET.'
			'.ORDER_ISCLAIMED_PROMOTIONS.' = \''.$this->getorder_isclaimed_promotions().'\','.RET.'
			'.ORDER_ISASK_FOR_DINE.' = \''.$this->getorder_isask_for_dine().'\','.RET.'
			'.ORDER_MISC_CHARGE.' = \''.$this->getorder_misc_charge().'\','.RET.'
			'.ORDER_MISC_DESC.' = \''.$this->getorder_misc_desc().'\','.RET.'
			'.ORDER_TIP_DISTRIBUTION.' = \''.$this->getorder_tip_distribution().'\','.RET.'	
			'.ORDER_ONLINE_STATUS .' = \''.$this->getorder_online_status().'\','.RET.'
			'.ORDER_STATUS_ID.' = \''.$this->getorder_status_id().'\''.RET.
			'WHERE '.ORDER_ID.' = '.$this->getorder_id().RET;
			//echo $qry;exit; 
			//'.order_guest.' = \''.$this->getorder_guest().'\','.RET.'
			mysql_query($qry);
			 
		} else {
			$qry  = 'INSERT INTO '.TBL_ORDERS.' ('.RET.
			''.ORDER_TABLE_ID.', '.ORDER_EMP_ID.', '.ORDER_SESSION_ID.','.ORDER_CUSTOMER_ID.', '.ORDER_CUSTOMER_NAME.','.ORDER_CUSTOMER_TYPE.', '.ORDER_NOTE.', '.ORDER_TAX.','.ORDER_TIP.','.ORDER_TYPE.','.ORDER_TAKEOUT_EMAIL.','.ORDER_TAKEOUT_TIME.','.ORDER_MANAGER_NOTE.', '.ORDER_CREATED_ON.', '.ORDER_COMPLETED_ON.', '.ORDER_STATUS_ID.', '.ORDER_PROMOTION.', '.ORDER_DISCOUNT_ID.', '.ORDER_DISCOUNT_AMT.','.ORDER_ISCLAIMED_PROMOTIONS.','.ORDER_ISASK_FOR_DINE.','.ORDER_MISC_CHARGE.','.ORDER_MISC_DESC.','.ORDER_RESTAURANT.','.ORDER_GUEST.','.ORDER_ONLINE_STATUS.','.ORDER_IS_TMP.RET.
				') VALUES ('.RET.
			'\''.$this->getorder_table_id().'\','.RET.
			'\''.$this->getorder_emp_id().'\','.RET.
			'\''.$this->getorder_session_id().'\','.RET.
			'\''.$this->getorder_customer_id().'\','.RET.
			'\''.$this->getorder_customer_name().'\','.RET.
			'\''.$this->getorder_customer_type().'\','.RET.
			'\''.$this->getorder_note().'\','.RET.
			'\''.$this->getorder_tax().'\','.RET.
			'\''.$this->getorder_tip().'\','.RET.
			'\''.$this->getorder_type().'\','.RET.
			'\''.$this->getorder_takeout_email().'\','.RET.
			'\''.$this->getorder_takeout_time().'\','.RET.
			'\''.$this->getorder_manager_note().'\','.RET.
			'\''.$this->getorder_created_on().'\','.RET.
			'\''.$this->getorder_completed_on().'\','.RET.
			'\''.$this->getorder_status_id().'\','.RET.
			'\''.$this->getorder_promotion().'\','.RET.
			'\''.$this->getorder_discount_id().'\','.RET.
			'\''.$this->getorder_discount_amt().'\','.RET.
			'\''.$this->getorder_isclaimed_promotions().'\','.RET.
			'\''.$this->getorder_isask_for_dine().'\','.RET.
			'\''.$this->getorder_misc_charge().'\','.RET.
			'\''.$this->getorder_misc_desc().'\','.RET.
			'\''.$_SESSION[SES_RESTAURANT].'\','.RET.
			'\''.$this->getorder_guest().'\','.RET.
			'\''.$this->getorder_online_status().'\','.RET.
			'\''.$this->getorder_is_tmp().'\''.RET.			
			')'.RET;
			/*
			echo $qry;
			exit;
			*/
			$res = mysql_query($qry);
			$this->setorder_id(mysql_insert_id());
		}
	}//..End Insert

	public static function delete($array = array()) {
		$qry = 'DELETE'.RET.'FROM '.TBL_ORDERS.RET;
		$and = 'WHERE'.RET;

		if($array[ORDER_ID] != '') {
			$qry .= $and.ORDER_ID.' = \''.$array[ORDER_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_RESTAURANT] != '') {
			$qry .= $and.ORDER_RESTAURANT.' = \''.$array[ORDER_RESTAURANT].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_TABLE_ID] != '') {
			$qry .= $and.ORDER_TABLE_ID.' = \''.$array[ORDER_TABLE_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_EMP_ID] != '') {
			$qry .= $and.ORDER_EMP_ID.' = \''.$array[ORDER_EMP_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_SESSION_ID] != '') {
			$qry .= $and.ORDER_EMP_ID.' = \''.$array[ORDER_EMP_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_ID] != '') {
			$qry .= $and.ORDER_CUSTOMER_ID.' = \''.$array[ORDER_CUSTOMER_ID].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CUSTOMER_NAME] != '') {
			$qry .= $and.ORDER_CUSTOMER_NAME.' = \''.$array[ORDER_CUSTOMER_NAME].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_CUSTOMER_TYPE] != '') {
			$qry .= $and.ORDER_CUSTOMER_TYPE.' = \''.$array[ORDER_CUSTOMER_TYPE].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_NOTE] != '') {
			$qry .= $and.ORDER_NOTE.' = \''.$array[ORDER_NOTE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_TAX] != '') {
			$qry .= $and.ORDER_TAX.' = \''.$array[ORDER_TAX].'\''.RET;
			$and = 'AND'.RET;
		}
		if($array[ORDER_TYPE] != '') {
			$qry .= $and.ORDER_TYPE.' = \''.$array[ORDER_TYPE].'\''.RET;
			$and = 'AND'.RET;
		}
		if($array[ORDER_TAKEOUT_EMAIL] != '') {
			$qry .= $and.ORDER_TAKEOUT_EMAIL.' = \''.$array[ORDER_TAKEOUT_EMAIL].'\''.RET;
			$and = 'AND'.RET;
		}
		if($array[ORDER_TAKEOUT_TIME] != '') {
			$qry .= $and.ORDER_TAKEOUT_TIME.' = \''.$array[ORDER_TAKEOUT_TIME].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_CREATED_ON] != '') {
			$qry .= $and.ORDER_CREATED_ON.' = \''.$array[ORDER_CREATED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_COMPLETED_ON] != '') {
			$qry .= $and.ORDER_COMPLETED_ON.' = \''.$array[ORDER_COMPLETED_ON].'\''.RET;
			$and = 'AND'.RET;
		}

		if($array[ORDER_STATUS_ID] != '') {
			$qry .= $and.ORDER_STATUS_ID.' = \''.$array[ORDER_STATUS_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_PROMOTION] != '') {
			$qry .= $and.ORDER_PROMOTION.' = \''.$array[ORDER_PROMOTION].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_ID] != '') {
			$qry .= $and.ORDER_DISCOUNT_ID.' = \''.$array[ORDER_DISCOUNT_ID].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_DISCOUNT_AMT] != '') {
			$qry .= $and.ORDER_DISCOUNT_AMT.' = \''.$array[ORDER_DISCOUNT_AMT].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_ISASK_FOR_DINE] != '') {
			$qry .= $and.ORDER_ISASK_FOR_DINE.' = \''.$array[ORDER_ISASK_FOR_DINE].'\''.RET;
			$and = 'AND'.RET;
		}
		
		
		if($array[ORDER_RESTAURANT] != '') {
			$qry .= $and.ORDER_RESTAURANT.' = \''.$array[ORDER_RESTAURANT].'\''.RET;
			$and = 'AND'.RET;
		}
				
		if($array[ORDER_ISCLAIMED_PROMOTIONS] != '') {
			$qry .= $and.ORDER_ISCLAIMED_PROMOTIONS.' = \''.$array[ORDER_ISCLAIMED_PROMOTIONS].'\''.RET;
			$and = 'AND'.RET;
		}
		
		if($array[ORDER_IS_TMP] != "") {
			$qry .= $and.ORDER_IS_TMP." = '".$array[ORDER_IS_TMP]."'".RET;
			$and = "AND".RET;
		}

		$res = mysql_query($qry);
		if($res){
			return OPERATION_SUCCESS;
		};
		return OPERATION_FAIL;
	}//..End Delete

	public function isAlreadyThere($order_table_id ,$order_emp_id ,$order_session_id ,$order_customer_id ,$order_customer_name ,$order_note ,$order_created_on ,$order_completed_on ,$order_status_id) {
		$unique_arr = array();
			//$unique_arr[ORDER_ID]=$order_id;
			//$unique_arr[ORDER_TABLE_ID]=$order_table_id;
			//$unique_arr[ORDER_SESSION_ID] = $order_session_id;
			//$unique_arr[ORDER_EMP_ID]=$order_emp_id;
			//$unique_arr[ORDER_CUSTOMER_ID]=$order_customer_id;
			//$unique_arr[ORDER_CUSTOMER_NAME]=$order_customer_name;
			//$unique_arr[ORDER_NOTE]=$order_note;
			//$unique_arr[ORDER_CREATED_ON]=$order_created_on;
			//$unique_arr[ORDER_COMPLETED_ON]=$order_completed_on;
			//$unique_arr[ORDER_STATUS_ID]=$order_status_id;
		if(is_not_empty($unique_arr)){
			return $this->readObject($unique_arr);
		}
		return false;
	}//..isAlreadyThere

	public function create($order_table_id ,$order_emp_id ,$order_session_id,$order_customer_id ,$order_customer_name ,$order_note='' ,$order_created_on='' ,$order_completed_on=NULL ,$order_status_id=TBL_STATUS_ORDERED,$order_manager_note='',$order_customer_type=CUST_TYPE_LOGIN,$order_type=ORDER_TYPE_AT_LOCATION,$order_promotion=0,$order_discount_id=0,$order_discount_amt=0,$order_isask_for_dine=0,$tk_out_delivery=0,$misc_charge=0,$misc_desc='',$order_guest='1',$isOnlineOrder=0,$order_is_tmp=0) {
		 global $order_tax,$order_delay_time;
		if(is_not_empty($order_table_id)){
			if($this->isAlreadyThere($order_table_id ,$order_emp_id ,$order_session_id,$order_customer_id ,$order_customer_name ,$order_note ,$order_created_on ,$order_completed_on ,$order_status_id)){
				return OPERATION_DUPLICATE;
			}else{
				$this->setorder_id('');
				$this->setorder_table_id($order_table_id);
				$this->setorder_emp_id($order_emp_id);
				$this->setorder_session_id($order_session_id);
				$this->setorder_customer_id($order_customer_id);
				$this->setorder_customer_name($order_customer_name);
				$this->setorder_customer_type($order_customer_type);
				$this->setorder_note($order_note);
				$this->setorder_tax($order_tax);
				$this->setorder_type($order_type);
				$this->setorder_manager_note($order_manager_note);
				$this->setorder_created_on($order_created_on);
				$this->setorder_completed_on($order_completed_on);
				$this->setorder_status_id($order_status_id);
				$this->setorder_promotion($order_promotion);
				$this->setorder_discount_id($order_discount_id);
				$this->setorder_isask_for_dine($order_isask_for_dine);
				$this->setorder_discount_amt($order_discount_amt);
				if(is_gt_zero_num($isOnlineOrder)){  
					  $tk_out_delivery = 0;
				}else{ 
				 	if(is_gt_zero_num($tk_out_delivery)==FALSE){ 
						$tk_out_delivery = $order_delay_time;
					}  
				}
				$this->setorder_takeout_time($tk_out_delivery); 
				
				$this->setorder_isclaimed_promotions(0);
				$this->setorder_misc_charge($misc_charge);
				$this->setorder_misc_desc($misc_desc);
				$this->setorder_guest($order_guest);
				$this->setorder_online_status($isOnlineOrder);
				$this->setorder_is_tmp($order_is_tmp);
				$this->insert();
				return $this->getorder_id();
			}
		}
		return OPERATION_FAIL;
	}//..create

	public function update($order_id, $order_table_id, $order_emp_id,$order_session_id, $order_customer_id, $order_customer_name, $order_note, $order_created_on, $order_completed_on, $order_status_id,$order_manager_note="",$order_customer_type=CUST_TYPE_LOGIN,$order_promotion=0,$order_discount_id=0,$order_discount_amt=0,$order_isclaimed_promotions=0,$order_isask_for_dine=0,$misc_charge=0,$misc_desc='',$order_tip_distribution=0) {
		if(is_gt_zero_num($order_id)){
			if ($this->readObject(array(ORDER_ID=>$order_id))){
				$this->setorder_table_id($order_table_id);
				$this->setorder_emp_id($order_emp_id);
				$this->setorder_session_id($order_session_id);
				$this->setorder_customer_id($order_customer_id);
				$this->setorder_customer_name($order_customer_name);
				$this->setorder_customer_name($order_customer_type);
				$this->setorder_note($order_note);
				$this->setorder_manager_note($order_manager_note);
				$this->setorder_created_on($order_created_on);
				$this->setorder_completed_on($order_completed_on);
				$this->setorder_status_id($order_status_id);
				$this->setorder_promotion($order_promotion);
				$this->setorder_discount_id($order_discount_id);
				$this->setorder_discount_amt($order_discount_amt);
				$this->setorder_isclaimed_promotions($order_isclaimed_promotions);
				$this->setorder_misc_charge($misc_charge);
				$this->setorder_misc_desc($misc_desc);
				$this->setorder_isask_for_dine($order_isask_for_dine);
				$this->setorder_tip_distribution($order_tip_distribution);
				$this->insert();
				return OPERATION_SUCCESS;
			}
		}
		return OPERATION_FAIL;
	}//..update

  //...update the ethor id to order id.
	public function _updt_ethor_order($order_id,$ethor_id){
		if(is_gt_zero_num($order_id) && is_not_empty($ethor_id)){
			if ($this->readObject(array(ORDER_ID=>$order_id))){
				$qry  = 'UPDATE '.TBL_ORDERS.RET.'SET'.RET.'
			`'.ORDER_ETHOR_ID.'`=\''.$ethor_id.'\' WHERE `'.ORDER_ID.'`='.$order_id;
				$res = mysql_query($qry);
				if($res){
					return 1;
				}
			}
		}
		return 0;
	}//..end _updt_ethor_order
	
	public static function _switchFrTempToMain($order_id){
		if(is_gt_zero_num($order_id)){			
				$qry  = 'UPDATE '.TBL_ORDERS.RET.'SET'.RET.'
			'.ORDER_IS_TMP.' = 0 WHERE '.ORDER_ID.'='.$order_id;
				$res = mysql_query($qry);
				if($res){
					return 1;
				}			
		}
		return 0;
	}//..end _switchFrTempToMain
	
	public function activate($order_id){
		if(is_gt_zero_num($order_id)){
			if ($this->readObject(array(ORDER_ID=>$order_id))){
				$qry  = 'UPDATE '.TBL_ORDERS.RET.'SET'.RET.'
			'.TBL_ORDERS_DEACTIVE_DATE.' = \''.date(EMPTY_DATE_FORMAT).'\' WHERE '.ORDER_ID.'='.$order_id;
				$res = mysql_query($qry);
				if($res){
					return 1;
				}
			}
		}
		return 0;
	}//..end activate

	public function deactivate($order_id){
		if(is_gt_zero_num($order_id)){
			if ($this->readObject(array(ORDER_ID=>$order_id))){
				$qry  = 'UPDATE '.TBL_ORDERS.RET.'SET'.RET.'
			'.TBL_ORDERS_DEACTIVE_DATE.' = \''.date(DATE_FORMAT).'\' WHERE '.ORDER_ID.'='.$order_id;
				$res = mysql_query($qry);
				//echo $qry;
				if($res){
					return 1;
				}
			}
		}
		return 0;
	}//..end deactivate
	
	public static function GetInfo($order_id,$sub_id=0,$flt_arr=array(),&$sub_order_cnt=0) {
		$info = array();
		$proms_applied=array(); 
		if($order_id != ''){
			$obj_tbl_orders = new tbl_orders();
			if($obj_tbl_orders->readObject(array('order_id'=>$order_id))){
				$info['order_id']=$obj_tbl_orders->getorder_id();
				$info['order_table_id']=$obj_tbl_orders->getorder_table_id();
				$info['order_emp_id']=$obj_tbl_orders->getorder_emp_id();
				$info['order_session_id']=$obj_tbl_orders->getorder_session_id();
				$info['order_customer_id']=$obj_tbl_orders->getorder_customer_id();
				$info['order_customer_name']=$obj_tbl_orders->getorder_customer_name();
				$info['order_customer_type']=$obj_tbl_orders->getorder_customer_type();
				$info['order_note']=$obj_tbl_orders->getorder_note();
				$info['order_created_on']=$obj_tbl_orders->getorder_created_on();
				$info['order_completed_on']=$obj_tbl_orders->getorder_completed_on();
				  
				if((is_not_empty($info[ORDER_COMPLETED_ON])==false) || ($info[ORDER_COMPLETED_ON] == date(EMPTY_DATE_FORMAT)))
				$info['order_completed_on']='';
				$info['order_status_id']=$obj_tbl_orders->getorder_status_id();
				$info['order_manager_note']=$obj_tbl_orders->getorder_manager_note();
				$info[ORDER_RESTAURANT] = $obj_tbl_orders->getorder_restaurant();
				
				$info['order_tax']=$obj_tbl_orders->getorder_tax();
				$info['dine_table']=$obj_tbl_orders->getdine_table();
				$info['server']= $obj_tbl_orders->getserver();
				$info['status']= $obj_tbl_orders->getstatus();
				
				$info['order_rewardpts_added']= $obj_tbl_orders->getorder_rewardpts_added();
				$info['ord_reward_pts_lnk']=biz_get_tiny_url(WWWROOT."/user/usr_ord_reward_pts.php?reward_cd=".base64_encode($order_id));
								
				$info[ORDER_PROMOTION] = $obj_tbl_orders->getorder_promotion();
				$info[ORDER_DISCOUNT_AMT] = $obj_tbl_orders->getorder_discount_amt();
				$info[ORDER_DISCOUNT_ID] = $obj_tbl_orders->getorder_discount_id(); 	
				
				$info[ORDER_TAKEOUT_EMAIL] = $obj_tbl_orders->getorder_takeout_email();
			  $info[ORDER_TAKEOUT_TIME] = $obj_tbl_orders->getorder_takeout_time();
				
				$info[ORDER_DELAYED_AT] = $obj_tbl_orders->getorder_delayed_at();
				$info[ORDER_ISCLAIMED_PROMOTIONS] = $obj_tbl_orders->getorder_isclaimed_promotions();
				$info[ORDER_ISASK_FOR_DINE] = $obj_tbl_orders->getorder_isask_for_dine();
				$info[ORDER_TYPE] = $obj_tbl_orders->getorder_type();
				$info[ORDER_TIP]= $obj_tbl_orders->getorder_tip();
				$info[ORDER_TIP_DISTRIBUTION]= $obj_tbl_orders->getorder_tip_distribution();
				$info[ORDER_MISC_CHARGE]= $obj_tbl_orders->getorder_misc_charge();
				$info[ORDER_MISC_DESC]= $obj_tbl_orders->getorder_misc_desc();
				
				$info[ORDER_PROM_DISCNT]= $obj_tbl_orders->getorder_prom_discnt();				
				$info[ORDER_GUEST] = $obj_tbl_orders->getorder_guest();								
				$info[ORDER_ONLINE_STATUS] = $obj_tbl_orders->getorder_online_status();		
				$info["order_is_tmp"]=$obj_tbl_orders->getorder_is_tmp();
				//..get order_details
				$objtbl_order_details= new tbl_order_details();
				$search_arr = array();
				$search_arr[ORD_DTL_ORDER_ID] = $info['order_id'];
				if(is_gt_zero_num($sub_id)){
					$search_arr[ORD_DTL_SUB_ORDER_ID] = $sub_id;
				} 
				$info['order_details']= $objtbl_order_details->readArray($search_arr,$result_found,1,1);
				$result_found = 0;
				unset($objtbl_order_details); 
				unset($search_arr);
				
				
				//..Get order applied proms list
				$objtbl_order_applied_proms = new tbl_order_applied_proms();
				$info['applied_proms_details'] = $objtbl_order_applied_proms->readArray(array(ORD_DTL_ORDER_ID => $info['order_id']),$result_found,1,1);
				$result_found = 0;
				unset($objtbl_order_applied_proms);				
				// print_r($info['applied_proms_details']);		
				
				//..Calculate the promotion discount amount
				$promdisc_applied=0; 
				if(($info[ORDER_ISCLAIMED_PROMOTIONS]>0) && (($info[ORDER_DISCOUNT_AMT]>0) || (is_not_empty($info['applied_proms_details'])))){					 
					//..If discount is applied at order level
					if($info[ORDER_DISCOUNT_AMT]>0 && $info[ORDER_PROMOTION]>0){
						$promdisc_applied=$info[ORDER_DISCOUNT_AMT];
					}else{
						//.. Now loop through all the proms records
						//.. Get the sum of all applied disocunt
						foreach($info['applied_proms_details'] as $detail){
							$promdisc_applied=$promdisc_applied+$detail[ORDPROM_DISCOUNT_AMT];
						}
					}
				}
				
				
				//..get sub order_details
				$objtbl_sub_orders= new tbl_sub_orders();				 
				$search_arr = array(SUB_ORDER_ID => $info['order_id'],ORDER_TYPE=>$info[ORDER_TYPE]);
				if(is_gt_zero_num($flt_arr['route'])){
					$search_arr[SUB_ROUTE] = $flt_arr['route'];
				} 
				$search_arr['promotion_discount'] = $promdisc_applied;
				$info['sub_orders']= $objtbl_sub_orders->readArray($search_arr,$result_found,1); 
				$sub_order_cnt =  $result_found;
				$result_found = 0;
				unset($objtbl_sub_orders);
				unset($search_arr); 
				
				$totalAmt = 0;
				foreach($info['order_details'] as $kydish_cart=>$dish_cart){ 						
				  //..logic for teh contemporary discount			
			    $itm_price=round(($dish_cart['ord_dtl_price']-$dish_cart['ord_dtl_discount']),2);
					
					$info['order_details'][$kydish_cart]['ord_dtl_price'] = $itm_price;					
					$totalAmt = $totalAmt + ($dish_cart['ord_dtl_quantity'] * $itm_price);  
					//print_r($dish_cart['opt_val_details']);
					if(is_not_empty($dish_cart['opt_val_details'])){
						foreach($dish_cart['opt_val_details'] as $key_sbmndsh=>$val_sbmndsh){			 
							//$itm_opt_price=round(($val_sbmndsh['ord_det_opt_price']-($val_sbmndsh['ord_det_opt_price'] * ($val_sbmndsh['ord_det_opt_discount']/100.00))),2);
							$itm_opt_price=round(($val_sbmndsh['ord_det_opt_price']-$val_sbmndsh['ord_det_opt_discount']),2);
							$info['order_details'][$kydish_cart]['opt_val_details'][$key_sbmndsh]['ord_det_opt_price'] = $itm_opt_price;
					
							$totalAmt = $totalAmt + ($val_sbmndsh['ord_det_opt_qty'] * $itm_opt_price);  
						} 	
					}	 	 
				}				
				//..Apply the complete order discount logic here
				//$totalAmt=($totalAmt-$info['order_discount_amt']);
				$info['totalAmt'] = $totalAmt;
				/*if(is_gt_zero_num($info['order_promotion'])){
					$proms_applied[]=$info['order_promotion'];
				}
				$info['proms_applied']=$proms_applied;*/
				
				//..Check if the promotion discount > bill amount then 
				//..amount of promotion applied should always be less than the complete bill amount
				$tmp_chk=$totalAmt + $info[ORDER_MISC_CHARGE]- $promdisc_applied;
				if(is_gt_zero_num($promdisc_applied) && is_gt_zero_num($totalAmt) && ($tmp_chk<0)){
						$promdisc_applied=$promdisc_applied+$tmp_chk;
						$_SESSION[SES_FLASH_MSG] = '<div class="error">'.$_lang['tbl_orders']['info']['order_prom_exceed'].'</div>';
				}
				$info['promdisc_applied']=$promdisc_applied;
				$grAmt = $totalAmt + $info[ORDER_MISC_CHARGE]- $promdisc_applied;
				//$info['tax_amt']= $obj_tbl_orders->calOrderTaxAmt($grAmt,$info['order_tax']
				if($info[ORDER_DISCOUNT_AMT]>0 && $info[ORDER_PROMOTION]>0){
					$info['tax_amt']= $obj_tbl_orders->calOrderTaxAmt(($totalAmt+ $info[ORDER_MISC_CHARGE]),$info['order_tax']);
				}else{
					$info['tax_amt']= $obj_tbl_orders->calOrderTaxAmt($grAmt,$info['order_tax']);
				}				
				//..Update the disocunt amount to order..This is additional field 
				//..to get the discount amount directly for report and calulation purpose only
				self::UpdatePromDiscAmount($promdisc_applied,$info[ORDER_PROM_DISCNT],$info['order_id']);						
				//change@29Aug2013#1 -->
				//$info['gr_amt'] = $info['totalAmt'] + $info['tax_amt'];
				$info['gr_amt'] = $grAmt + $info['tax_amt'] + $info[ORDER_TIP];
				//..change@29Aug2013#1 <--
				//..change@7Aug2013#1			 
				$order_statuses = tbl_table_status::getOrder_Statuses($info[ORDER_TYPE],$info[ORDER_STATUS_ID]);
				$info['reverse_order_statuses'] =  $order_statuses['reverse_order_statuses'];  
				$info['remain_order_statuses'] =  $order_statuses['remain_order_statuses'];  
				
				$info['is_delayed'] = 0; 
				if(isValidDate($info[ORDER_DELAYED_AT])){
				 	$info['is_delayed'] = 1;
				}
				 
				//print_r($info);
				
				$info['isActive'] = 0;
				//..check deactive date is not set or 0
				if((is_not_empty($obj_tbl_orders->gettbl_orders_deactive_date())==false)  || (is_gt_zero_num(strtotime($obj_tbl_orders->gettbl_orders_deactive_date()))== false)){
					$info['isActive'] = 1;
				}else{
					//..check if deactive date > todays date
					if(strtotime($obj_tbl_orders->gettbl_orders_deactive_date()) > strtotime(date(DATE_FORMAT))){
						$info['isActive'] = 1;
					}
				}
			} 
			
			/*$info[ORDER_PROMOTION] = $obj_tbl_orders->getorder_promotion();
			$info[ORDER_DISCOUNT_AMT] = $obj_tbl_orders->getorder_discount_amt();
			$info[ORDER_DISCOUNT_ID] = $obj_tbl_orders->getorder_discount_id(); */
			
			//print_r($info);
		unset($obj_tbl_orders);
		return $info;
		}
	}//..End GetInfo
	
	//...fucntion to update the prom discount amount for ease of use only
	//..Update the disocunt amount to order..This is additional field 
	//..to get the discount amount directly for report and calulation purpose only
	public static function UpdatePromDiscAmount($promdisc_applied,$curr_discnt_amnt,$order_id){
				if((is_gt_zero_num($promdisc_applied)) && ($curr_discnt_amnt!=$promdisc_applied)){
						DB::ExecNonQry('UPDATE `'.TBL_ORDERS.'` SET `'.ORDER_PROM_DISCNT.'`='.$promdisc_applied.' WHERE `'.ORDER_ID.'`='.$order_id.';');										 
				}		
	}

	public static function GetFields($data){
		global $tbl_orders_active_condition;
		$arr = array();
		if(is_not_empty($data)){
			$qry ='SELECT '.$data['key_field'].','.$data['value_field'].' FROM '.TBL_ORDERS;
			if(is_gt_zero_num($data['isActive'])){
				$qry .= ' WHERE '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.$tbl_orders_active_condition;			
			}
			$res = mysql_query($qry); 
			if($res){
				while($row=mysql_fetch_assoc($res)){
					$arr[$row[$data['key_field']]] = $row[$data['value_field']];
				}
			}
		}
		return $arr;
	}//.. End of GetFields
	
	public function assign_emp($order_id,$emp_id){	
	  if(is_gt_zero_num($order_id) && is_gt_zero_num($emp_id)){
	  	if($this->readObject(array(ORDER_ID =>$order_id))){
			$this->setorder_emp_id($emp_id);	
			$this->insert();			
			return 1;			
	     }	
	  }
	  return 0; 
	}//..assign_emp
	
	
	/**
	* For Updating the status of the order.
	* @param integer $order_id
	* @param integer $status_id
	* @param integer $isFromSubOrder Checking for whether it is coming from SubOrder if is 1 then it will not send notification.
	* @return boolean
	*/
	public function update_ord_sts($order_id,$status_id,$isFromSubOrder=0){	   
	global $_lang;
	 
	  if(is_gt_zero_num($order_id) && is_gt_zero_num($status_id)){
			$changeTblStatus = 0;
	  	if($this->readObject(array(ORDER_ID =>$order_id))){
				$previous_status = $this->getorder_status_id();
  			$this->setorder_status_id($status_id);
  			#code->By info.shri@02JULY2013 for complete the order on check paid
  			//..if status is check paid then complete the order.			
				   
					if($status_id == TBL_STATUS_ORDERED){  
						$this->setorder_completed_on(date(EMPTY_DATE_FORMAT));	
						/*
						//.. send msg to customer
						 biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['customer']['order_restored'],$this->getorder_customer_id(),ALERT_ORDER,$this->getorder_customer_type());  
						 //.. send msg to employee						 if($_SESSION['guid'] != $this->getorder_emp_id()){
						 	biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['misc']['order_restored'],$this->getorder_emp_id(),ALERT_ORDER);
						 }						 
						 //.. send msg to kitchen
						 biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['misc']['order_restored'],ALERT_FOR_KITCHEN,ALERT_ORDER);
						 */
						 
						 //..Notifications based on teh statuses @26 Oct 2013 
						 if($previous_status == TBL_STATUS_ORDER_CANCELLED){
						 		tbl_sub_orders::restoreAllsubOrders($order_id);
						 } 
						 
						 if(is_gt_zero_num($isFromSubOrder) == FALSE){
						 	biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_PLACED,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());		
						 }
						 
						 //..changetblStatuse
						 $changeTblStatus = $status_id;										 
							
				  }elseif($status_id == TBL_STATUS_ORDER_CANCELLED){
						$this->setorder_completed_on(date(DATE_FORMAT));
						tbl_sub_orders::cancelAllsubOrders($order_id); 
						/*//.. send msg to customer
						 biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['customer']['order_cancelled'],$this->getorder_customer_id(),ALERT_ORDER,$this->getorder_customer_type());  
						 //.. send msg to employee
						 if($_SESSION['guid'] != $this->getorder_emp_id()){
						 	biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['misc']['order_cancelled'],$this->getorder_emp_id(),ALERT_ORDER);
						 }
						 //.. send msg to kitchen
						 biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['misc']['order_cancelled'],ALERT_FOR_KITCHEN,ALERT_ORDER); */
						 //..Notifications based on teh statuses @26 Oct 2013 
						  if(is_gt_zero_num($isFromSubOrder) == FALSE){
								biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_CANCELLED,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());		
						 	}
					}elseif($status_id == TBL_STATUS_CHECK){ 
							$this->setorder_completed_on(date(DATE_FORMAT));   
							tbl_sub_orders::checkPaidSubOrdersByOrder($order_id);
	        }elseif($status_id == TBL_STATUS_DELIVERED){
						if($this->getorder_type()==ORDER_TYPE_TAKE_OUT){
							$this->setorder_completed_on(date(DATE_FORMAT));
							tbl_sub_orders::mkStatusDeliveredSubOrdersByOrder($order_id); 
						}
						 //..changetblStatuse 
					}elseif($status_id == TBL_STATUS_ORDER_CONFIRM){
					  if(is_gt_zero_num($this->getorder_table_id()) && (is_gt_zero_num($this->getorder_session_id())==FALSE)){  
							$_SESSION[SES_FLASH_MSG] = '<div class="error">'.$_lang[TBL_ALERTS]['manager']['ORD_CONFIRM_ERR'].'</div>'; 
							return 2;
						}else{
							/*//..for the customer
		          biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['customer']['order_confirm'],$this->getorder_customer_id(),ALERT_ORDER, $this->getorder_customer_type());  
							//..for the kitchen 
							biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['misc']['order_added'],ALERT_FOR_KITCHEN,ALERT_ORDER);  */
							//..Notifications based on the statuses @26 Oct 2013 
							 if(is_gt_zero_num($isFromSubOrder) == FALSE){
									biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_CONFIRMED,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());
							}
						}
						 
					 if(is_gt_zero_num($this->getorder_table_id())){					  
						$noncnfords = self::getNonConfirmedOrders($this->getorder_table_id());
						if(is_not_empty($noncnfords)){
							$changeTblStatus = TBL_STATUS_ORDERED; 
						}else{ 
							$changeTblStatus = STS_ORDER_CONFIRMED;	
						}
					 }
					  
						 
	        }elseif($status_id == TBL_STATUS_ORDER_PICKED){
				//..add record to table to status record
				//..follwoing commented  code is suspecious needs to confirmed.
				
				/*
				//START
				$objtbl_table_status_link=new tbl_table_status_link();
				$isSuccess = $objtbl_table_status_link->create($this->getorder_table_id(), $this->getorder_customer_id(), TBL_STATUS_ORDER_PICKED, $this->getorder_emp_id(),$this->getorder_session_id());
				unset($objtbl_table_status_link);
				//END
				*/		
				
				/*//..for the customer
	          biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['customer']['ORDER_PICKED'],$this->getorder_customer_id(),ALERT_ORDER ,$this->getorder_customer_type() );  
						//..for the employee
						biz_send_alert($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$_lang[TBL_ALERTS]['manager']['ORDER_PICKED'],$this->getorder_emp_id(),ALERT_ORDER); */ 
						//..Notifications based on the statuses @26 Oct 2013 
						 if(is_gt_zero_num($isFromSubOrder) == FALSE){
							biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_READY_TO_PICK,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());
						 }
						 //..changetblStatuse
						 $changeTblStatus = TBL_STATUS_ORDER_PICKED;
			}else{
				  //.. for else  conditions
					if(is_gt_zero_num($isFromSubOrder) == FALSE){
						biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$this->getorder_status_id(),$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());
					}
					
			}
	        #code->end

  			$this->insert();
				//..change the table status
				if(is_gt_zero_num($changeTblStatus)){
					//..for table statuses 
					 $objtbl_sts_lnk = new tbl_table_status_link();  
						if(is_gt_zero_num($this->getorder_session_id())){
					 		$objtbl_sts_lnk->changeTblStatus($this->getorder_session_id(),$changeTblStatus,$this->getorder_emp_id()); 
					 }
					 unset($objtbl_sts_lnk);
				}
				
						  
				
  			return 1;
      }
	  }
	  return 0; 
	}//..update_ord_sts
	
	public static function completeOrdersBySession($sess_id,$status_id){
		if(is_gt_zero_num($sess_id) && is_gt_zero_num($status_id)){
	  		$res = mysql_query('UPDATE '.TBL_ORDERS.' SET '.order_status_id.'='.$status_id.' '.TBL_ORDERS_DEACTIVE_DATE.'=NOW() WHERE '.ORDER_SESSION_ID.' = '.$sess_id); 
			if($res){
				return 1;
			}
	   	}
	  return 0; 
	}
	
	//...Update the order status based on the table sattuses.
	public function changeOrderstatus($table_id,$cust_id,$emp_id,$status_id){ 
	  if(is_gt_zero_num($table_id) && is_gt_zero_num($status_id)){
	  	if($this->readObject(array(ORDER_TABLE_ID =>$table_id,ORDER_CUSTOMER_ID =>$cust_id ,ORDER_EMP_ID => $emp_id,OFFSET_TITLE=>0,LIMIT_TITLE=>1,SORT_BY=>DESC,SORT_ON=>ORDER_ID))){
			$this->setorder_status_id($status_id);	
			$this->insert();			
			return 1;			
	     }	
	  }
	  return 0; 
	}//..changeOrderstatus
	
	//.. Update the Global Var "lastEmpOrder" with respect to that table or employee
	public static function getLastEmpOrder($table_arr){
	 global  $lastEmpOrder; 
	 if(is_not_empty($table_arr)){
	 	$condition = '('.ORDER_TABLE_ID.' in ('.implode(',',array_keys($table_arr)).') OR '.ORDER_EMP_ID.'='.$_SESSION['guid'].') ';
	 }else{
	 	$condition = ORDER_EMP_ID.'='.$_SESSION['guid'].' ';
	 }
	
	 $res = mysql_query('SELECT MAX('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE '.$condition.' AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_CREATED_ON.' > '.date('Y-m-d')); 
		if($res){
			$orderid = mysql_result($res,0);
			if($orderid > $lastEmpOrder){
				$lastEmpOrder = $orderid;
			}
		}
	}//..getLastEmpOrder
	
	public static function getCustLastOrder($cust_name,$table_id,$day='',$cust_sess_id=0){ 
	    $sql =	'SELECT '.ORDER_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_CUSTOMER_NAME.'=\''.$cust_name.'\' '.(is_gt_zero_num($cust_sess_id)?' AND '.ORDER_SESSION_ID.'='.$cust_sess_id:'').' AND '.ORDER_TABLE_ID.'='.$table_id.' AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' ORDER BY '.ORDER_ID.' DESC LIMIT 0,1';
		$res = mysql_query($sql);
		if($res && is_gt_zero_num(mysql_num_rows($res))){
			return mysql_result($res,0);
		}
		return 0;
	}
	
	//..it will fetch customers last order based on table_session
	public static function getCustSessionLastOrder($session_id,$cust_email='',$ord_cust_id=0,$ord_cust_type=CUST_TYPE_LOGIN){
	 global $tbl_orders_active_condition;
		if(is_gt_zero_num($session_id)){
			 if(is_not_empty($cust_email)){ 
				$sql =	'SELECT MAX('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'='.$session_id.' AND '.ORDER_CUSTOMER_NAME.'=\''.$cust_email.'\' AND  '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.$tbl_orders_active_condition.' ORDER BY '.ORDER_ID.' DESC LIMIT 1'; 
			}else{
			 	$sql =	'SELECT MAX('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'='.$session_id.' AND  '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.$tbl_orders_active_condition.' ORDER BY '.ORDER_ID.' DESC LIMIT 1'; 
			}			
		}else{
			//..if table session is not there then fetch based on cookie
			 if(is_gt_zero_num($ord_cust_id)){
				 	$condition = ORDER_CUSTOMER_ID .'='.$ord_cust_id.' AND '.ORDER_CUSTOMER_TYPE.'=\''.$ord_cust_type.'\'';
			 }elseif(is_gt_zero_num($_SESSION[SES_COOKIE_UID])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION[SES_COOKIE_UID].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_COOKIE.'\'';
			}elseif(is_gt_zero_num($_SESSION['guid'])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION['guid'].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_LOGIN.'\'';
			}else{
				$condition = '0';
			}			 
			$sql =	'SELECT MAX('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE DATE('.ORDER_CREATED_ON.')=CURDATE() AND '.$condition.' AND '.$tbl_orders_active_condition.' AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].'  ORDER BY '.ORDER_ID.'  DESC LIMIT 1';
		}

		if(is_not_empty($sql)){
			$res = mysql_query($sql);
			if($res && is_gt_zero_num(mysql_num_rows($res))){
				return mysql_result($res,0);
			}	
		}			    
		return 0;
	}
	 
	//..Get the promotion applied amount
	public static function get_order_prom_discnt($info){
	  $result_found=0;
		//..Get order applied proms list
		$objtbl_order_applied_proms=new tbl_order_applied_proms();
		$info['applied_proms_details']= $objtbl_order_applied_proms->readArray(array(ORD_DTL_ORDER_ID => $info['order_id']),$result_found,1,1);
		unset($objtbl_order_applied_proms);					
		//..Calculate the promotion discount amount
		$promdisc_applied=0; 
		if(($info[ORDER_ISCLAIMED_PROMOTIONS]>0) && (($info[ORDER_DISCOUNT_AMT]>0) || (is_not_empty($info['applied_proms_details'])))){					 
			//..If discount is applied at order level
			if($info[ORDER_DISCOUNT_AMT]>0 && $info[ORDER_PROMOTION]>0){
				$promdisc_applied=$info[ORDER_DISCOUNT_AMT];
			}else{
				//.. Now loop through all the proms records
				//.. Get the sum of all applied disocunt
				foreach($info['applied_proms_details'] as $detail){
					$promdisc_applied=$promdisc_applied+$detail[ORDPROM_DISCOUNT_AMT];
				}
			}
		}
		return $promdisc_applied;
	}
	
	/**getOrdGrAmtBySession
	* Get Order Gross Amount By Table Session
	* @param int $session_id
	* @return array [orders] [id]=>[amt]  
	*  							[total]	=>Total Amount;
	*								[tax_amt]	=>tax Amount;
	*								[gr_amt]	=>grand Amount;
	*/
	public static function getOrdGrAmtBySession($session_id,$order_id=0,$ord_rest=0){
	   $info = array();
	   $total =  $misc_charge =  $tip_amt =  $tax_amt = 0.00;
	   $is_not_paid=0;
		 
		 $condition = ' WHERE '.ORDER_STATUS_ID.'<>'.TBL_STATUS_ORDER_CANCELLED;
	   if(is_gt_zero_num($session_id) || is_gt_zero_num($order_id)){
		 	 
		 if(is_gt_zero_num($session_id)){
		 	$condition .= ' AND '.ORDER_SESSION_ID.'='.$session_id;
		 }elseif(is_gt_zero_num($order_id)){
		 	$condition .= ' AND '.ORDER_ID.'='.$order_id;
		 }	
		 $ord_rest = is_gt_zero_num($ord_rest)?$ord_rest:$_SESSION[SES_RESTAURANT];
		 $condition .= ' AND '.ORDER_RESTAURANT.'='.$ord_rest.'';	 
	 	/*$sql = 'SELECT order_id, (SELECT (
		SUM( od.`ord_dtl_quantity` * od.`ord_dtl_price` ) + SUM( op.`ord_det_opt_qty` * op.`ord_det_opt_price` )
		) AS total
		FROM TBL_ORDER_DETAILS od
		LEFT OUTER JOIN TBL_ORDER_DETAILS_OPTIONS op ON od.`ord_dtl_id` =  op.`ord_det_opt_order_detail`
		WHERE od.`ord_dtl_order_id` = order_id) order_amount FROM tbl_orders WHERE '.ORDER_SESSION_ID.'='.$session_id;*/
		/*$sql = 'SELECT order_id,order_customer_name,order_tax,order_tip,order_status_id, (
				IFNULL( ( SELECT 
					SUM( 					
					IFNULL(od.`ord_dtl_quantity`,0) * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-(od.`ord_dtl_price` * (od.`ord_dtl_discount`/100))),od.`ord_dtl_price`)) AS t1
					FROM 
						'.TBL_ORDER_DETAILS.' od
					WHERE od.`ord_dtl_order_id` = order_id
				),0) + 
				 IFNULL((SELECT 
					SUM(IFNULL(op1.`ord_det_opt_qty`,0) * IF(op1.`ord_det_opt_discount` > 0, (op1.`ord_det_opt_price`-(op1.`ord_det_opt_price` * (op1.`ord_det_opt_discount`/100))),op1.`ord_det_opt_price`)) AS t2
				FROM 
					'.TBL_ORDER_DETAILS.' od1
				LEFT OUTER JOIN 
					'.TBL_ORDER_DETAILS_OPTIONS.' op1 
				ON 
					od1.`ord_dtl_id` = op1.`ord_det_opt_order_detail`
				WHERE 
					od1.`ord_dtl_order_id` = order_id
				),0)
			 ) as order_amount 
				FROM tbl_orders'.$condition ;*/
			$sql = 'SELECT order_id,order_customer_name,order_tax,order_tip,order_status_id,order_isclaimed_promotions,order_discount_amt,order_promotion, `order_misc_charge`,`order_is_tmp` ,  (
				IFNULL( ( SELECT 
					SUM( 					
					IFNULL(od.`ord_dtl_quantity`,0) * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-od.`ord_dtl_discount`),od.`ord_dtl_price`)) AS t1
					FROM 
						'.TBL_ORDER_DETAILS.' od
					WHERE od.`ord_dtl_order_id` = order_id
				),0) + 
				 IFNULL((SELECT 
					SUM(IFNULL(op1.`ord_det_opt_qty`,0) * IF(op1.`ord_det_opt_discount` > 0, (op1.`ord_det_opt_price`- op1.`ord_det_opt_discount`),op1.`ord_det_opt_price`)) AS t2
				FROM 
					'.TBL_ORDER_DETAILS.' od1
				LEFT OUTER JOIN 
					'.TBL_ORDER_DETAILS_OPTIONS.' op1 
				ON 
					od1.`ord_dtl_id` = op1.`ord_det_opt_order_detail`
				WHERE 
					od1.`ord_dtl_order_id` = order_id
				),0)
			 ) as order_amount 
				FROM tbl_orders'.$condition ;	
				 
			
		$res = mysql_query($sql);
		$prom_discnt_amt=0; 
		if($res){
				 while($row=mysql_fetch_assoc($res)){		 	 	
					$tmp_ord_misc_charge = $row[ORDER_MISC_CHARGE];
					$tmp_tip = $row['order_tip'];
					$tmp_prom_discnt_amt= self::get_order_prom_discnt($row);
					
					//..amount for tax calcuation = order_amount + misc_charge - discount 
					$tmp_ord_tot_amt =  $row['order_amount'] + $tmp_ord_misc_charge - $tmp_prom_discnt_amt;  
					//$tmp_tax = self::calOrderTaxAmt($tmp_ord_tot_amt, $row['order_tax']);
					$tmp_tax = self::calOrderTaxAmt($row['order_amount'], $row['order_tax']);
					if($row[ORDER_DISCOUNT_AMT]>0 && $row[ORDER_PROMOTION]>0){
						$tmp_tax = self::calOrderTaxAmt(($row['order_amount']+ $tmp_ord_misc_charge), $row['order_tax']);
					}else{
						$tmp_tax = self::calOrderTaxAmt($tmp_ord_tot_amt, $row['order_tax']);
					}
					//echo "$tmp_ord_tot_amt<br/>";
					$tmp_ord_gr_amt = $tmp_ord_tot_amt + $tmp_tax + $tmp_tip; 
					$info['orders'][$row['order_id']] = $tmp_ord_gr_amt;
					$info['customers'][$row['order_id']] = $row['order_customer_name'];
					if($row['order_status_id']!=TBL_STATUS_CHECK){
					 	$is_not_paid=1;
					}				 
					$tmp_prom_discnt_amt= self::get_order_prom_discnt($row);
					 
					$total = $total + $row['order_amount'];					
					$tax_amt = $tax_amt + $tmp_tax ;
					$tip_amt = $tip_amt + $tmp_tip ; 
					$prom_discnt_amt= $prom_discnt_amt + $tmp_prom_discnt_amt;  
					$misc_charge = $misc_charge + $tmp_ord_misc_charge;
					$gr_total = $gr_total + $tmp_ord_gr_amt;
				}
			}	
		/*
		if($res){
				 while($row=mysql_fetch_assoc($res)){		 	 	
					//$info['orders'][$row['order_id']] = $row['order_amount'];
					$tmp_tax = self::calOrderTaxAmt($row['order_amount'], $row['order_tax']);
					$tmp_tip = $row['order_tip'];
					//$info['orders'][$row['order_id']] = $row['order_amount'] + $tmp_tax; 
					$info['orders'][$row['order_id']] = $row['order_amount'] + $tmp_tax + $row['order_tip'];
					$info['customers'][$row['order_id']] = $row['order_customer_name'];
					if($row['order_status_id']!=TBL_STATUS_CHECK){
					 	$is_not_paid=1;
					}				 
					$tmp_prom_discnt_amt= self::get_order_prom_discnt($row);
					//$total = $total + $row['order_amount'];
					//$total = $total + $row['order_amount']-$row['order_discount_amt'];	
					//..change @29Aug2013#1
					$total = $total + $row['order_amount'];					
					$tax_amt = $tax_amt + $tmp_tax ;
					$tip_amt = $tip_amt + $tmp_tip ; 
					$prom_discnt_amt= $prom_discnt_amt + $tmp_prom_discnt_amt;  
				}
			}			
			*/
	    }
		if($is_not_paid==1)
			$info['is_all_paid']=0;
		else
			$info['is_all_paid']=1;	
			
		$info['total'] = $total;
		$info['tax_amt'] = $tax_amt; 
		$info['tip_amt'] = $tip_amt;
		$info['misc_charge'] = $misc_charge;
		$info['prom_discnt_amt'] = $prom_discnt_amt;
		//print_r($info);	
		if($prom_discnt_amt>0)
				$tmp_chk=$total + $misc_charge - $prom_discnt_amt;
		//else
						
		if(is_gt_zero_num($prom_discnt_amt) && is_gt_zero_num($total) && ($tmp_chk<0)){
				$prom_discnt_amt=$prom_discnt_amt+$tmp_chk;
				//$_SESSION[SES_FLASH_MSG] = '<div class="error">'.$_lang['tbl_orders']['info']['order_prom_exceed'].'</div>';
		}	
		//$info['gr_amt'] = $total + $tax_amt + $tip_amt-$prom_discnt_amt;	
		$info['gr_amt'] = $gr_total;
		return $info;
	}	

	/** it will return all order based on table_session
  *@param integer $session_id -> table_customer_session_id
  *@param integer $isCustomer -> whether asked by Customer
  *@return array of order_id
  */
	public static function getAllCustSessionOrders($session_id,$isCustomer=0){
		$info = array();  
		if(is_gt_zero_num($session_id)){
		if($isCustomer){
			$sql =	'SELECT '.ORDER_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'='.$session_id.' AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_CUSTOMER_NAME.'="'.(is_not_empty($_SESSION['user'])?$_SESSION['user']:'').'"';  
		}else{
			$sql =	'SELECT '.ORDER_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'='.$session_id.' AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT]; 
		}
			 
		$res = mysql_query($sql);
			if($res && is_gt_zero_num(mysql_num_rows($res))){
				while($row=mysql_fetch_row($res)){
					$info[] = $row[0]; 
				}
			}
		}
		return $info;
	} 
	
	
	public static function isPendingOrdersForTables(){		 
		if(is_gt_zero_num($session_id)){
			$sql =	'SELECT GROUP_CONCAT('.ORDER_TABLE_ID.') FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'=0 AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT]; 
		$res = mysql_query($sql);
			if($res && is_gt_zero_num(mysql_num_rows($res))){
				return mysql_result($res,0);
			}
		}
		return '';
	}
	
	public static function getNonConfirmedOrders($order_table_id,$mkConfirmed=0){		  
	 $res = array(); 
		 if(is_gt_zero_num($order_table_id)){
				$arr =  self::readArray(array(ORDER_TABLE_ID=>$order_table_id,ORDER_STATUS_ID=>TBL_STATUS_ORDERED,'ord_live_only'=>1,ORDER_RESTAURANT=>$_SESSION[SES_RESTAURANT]));   
	 		if($mkConfirmed != 0){
			 $res = 0;
			 $obj = new tbl_orders();
			if($mkConfirmed== 1){
				//..for making all unconfirmed the order to confirmed	
					foreach($arr as $order_key=>$order_info){
						 //print_r($order_info[ORDER_ID]);
						 $obj->update_ord_sts($order_info[ORDER_ID],TBL_STATUS_ORDER_CONFIRM);
						$res = 1;
					} 
			}elseif($mkConfirmed == -1){
				//..for making all unconfirmed the order to cancelled 
				foreach($arr as $order_key=>$order_info){
					$obj->update_ord_sts($order_info[ORDER_ID],TBL_STATUS_ORDER_CANCELLED);
					$res = 1;
				} 
			}
			unset($obj);
		 }else{
		 	$res = $arr ; 
		 }
		}  
		return $res;
	}
	
	public static function getNonPaidOrders($order_table_id,$cancel_unpaid_orders = 0){		
	  $arr = array(); 
		if(is_gt_zero_num($order_table_id)){
			$arr =  self::readArray(array(ORDER_TABLE_ID=>$order_table_id,'isNonPaid'=>1,'isActive'=>1,'ord_live_only'=>1)); 			
			if(is_gt_zero_num($cancel_unpaid_orders) && is_not_empty($arr)){
				$obj = new tbl_orders();
				foreach($arr as $val){
					if(is_gt_zero_num($val[ORDER_ID])){
						$obj->update_ord_sts($val[ORDER_ID],TBL_STATUS_ORDER_CANCELLED);
					}
				}
				unset($obj); 
			}			
		} 
		return $arr;
	}
	
/**
* update new sever after the transfer is done
* @param undefined $table_id
* @param undefined $new_server
* 
*/
	public static function update_new_sever($table_id,$new_server){		
	  $arr = array(); 
		if(is_gt_zero_num($table_id)){
			$arr = self::readArray(array(ORDER_TABLE_ID=>$table_id,'isTempAllowed' => 0,'isNonPaidExcConfirm'=>1,'isActive'=>1,'ord_live_only'=>1)); 			
			if(is_not_empty($arr)){
				$obj = new tbl_orders();	
				foreach($arr as $val){
					if(is_gt_zero_num($val[ORDER_ID])){
						$obj->assign_emp($val[ORDER_ID],$new_server);
					}
				}
				unset($obj); 
			}			
		} 
		return $arr;
	}
	
	//..Fetch only booked orders
	public static function getMyBookedOrders(){	
		if(is_gt_zero_num($_SESSION['guid']) || is_gt_zero_num($_SESSION[SES_COOKIE_UID])){
			
			if( is_gt_zero_num($_SESSION[SES_COOKIE_UID])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION[SES_COOKIE_UID].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_COOKIE.'\'';
			}elseif( is_gt_zero_num($_SESSION['guid'])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION['guid'].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_LOGIN.'\'';
			}else{
				$condition = '0';
			}
			
			$sql =	'SELECT GROUP_CONCAT('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.'=0'.' AND '.ORDER_TABLE_ID.'=0 AND DATE('.ORDER_CREATED_ON.') = CURDATE() AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '. $condition; 			
			$res = mysql_query($sql);
			if($res && is_gt_zero_num(mysql_num_rows($res))){
				return mysql_result($res,0);
			}
		}
		return '';
	}
	
	/**
	* Convert Given TakeOut Order To Dine-In Order 
	* @param int $order_id
	* @param string $cust_nm
	* @param int $table_id
	* @return int
	*/
	public static function cnvTkoutOrderToDine($order_id,$cust_nm,$table_id){ 
		if(is_gt_zero_num($order_id) &&  is_gt_zero_num($table_id) && is_not_empty($cust_nm)){
			//$user_id = checkNcreateUserCookieId($cust_nm);
			$info = tbl_dining_table::GetInfo($table_id);
			$party_size = 0;
			if(is_not_empty($info)){ 
			   	$party_size = $info['table_seating_capacity']; 
			}
			$cust_sess_id = checkNcreateSession($table_id,$cust_nm,0,1,$party_size); 
			$order_emp_id= GetDfltTblEmployee($table_id);  
	  		return  DB::ExecNonQry('UPDATE '.TBL_ORDERS.' SET '.ORDER_TABLE_ID.'='.$table_id.','.ORDER_EMP_ID.'='.$order_emp_id.' ,'.ORDER_TYPE.'=\''.ORDER_TYPE_AT_LOCATION.'\','.ORDER_SESSION_ID.' = '.$cust_sess_id.' WHERE '.ORDER_ID.'='.$order_id);
		}
		return OPERATION_FAIL; 
	}
	 
	 
	/**
	* Add my booked orders to dine in.
	*/   
	public static function addTableSessToMyBookedOrders(){ 
	  if(is_gt_zero_num($_SESSION[SES_TABLE]) && is_not_empty($_SESSION[SES_CUST_NM]) && (is_gt_zero_num($_SESSION['guid']) || is_gt_zero_num($_SESSION[SES_COOKIE_UID]))){  
		  $order_type = '';
		  $cust_sess_id = tbl_table_customer_session::GetCurrentActiveCustSession($_SESSION[SES_TABLE]);  
			 
			if(is_gt_zero_num($cust_sess_id)==false){
				$cust_sess_id = 0;
			} 
			if( is_gt_zero_num($_SESSION[SES_COOKIE_UID])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION[SES_COOKIE_UID].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_COOKIE.'\'';
				$order_type = ORDER_TYPE_ONLINE_DINE;
			}elseif( is_gt_zero_num($_SESSION['guid'])){
				$condition = ORDER_CUSTOMER_ID .'='.$_SESSION['guid'].' AND '.ORDER_CUSTOMER_TYPE.'=\''.CUST_TYPE_LOGIN.'\'';
			}else{
				$condition = '0';
			} 
	  		$order_emp_id= GetDfltTblEmployee($_SESSION[SES_TABLE]); 
				/*echo 'UPDATE '.TBL_ORDERS.' SET '.ORDER_TABLE_ID.'='.$_SESSION[SES_TABLE].','.ORDER_EMP_ID.'='.$order_emp_id.(is_not_empty($order_type)?' ,'.ORDER_TYPE.'=\''.$order_type.'\'':'').','.ORDER_SESSION_ID.' = '.$cust_sess_id.' WHERE DATE('.ORDER_CREATED_ON.') = CURDATE() AND '.ORDER_TABLE_ID.'=0 AND '.ORDER_SESSION_ID.'=0 AND '.$condition;exit;*/
				//$qry='UPDATE '.TBL_ORDERS.' SET '.ORDER_TABLE_ID.'='.$_SESSION[SES_TABLE].','.ORDER_EMP_ID.'='.$order_emp_id.(is_not_empty($order_type)?' ,'.ORDER_TYPE.'=\''.$order_type.'\'':'').','.ORDER_SESSION_ID.' = '.$cust_sess_id.' WHERE DATE('.ORDER_CREATED_ON.') = CURDATE() AND '.ORDER_TABLE_ID.'=0 AND '.ORDER_SESSION_ID.'=0 AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.$condition;
				$qry='UPDATE '.TBL_ORDERS.' SET '.ORDER_TABLE_ID.'='.$_SESSION[SES_TABLE].','.ORDER_EMP_ID.'='.$order_emp_id.(is_not_empty($order_type)?' ,'.ORDER_TYPE.'=\''.ORDER_TYPE_AT_LOCATION.'\'':'').','.ORDER_SESSION_ID.' = '.$cust_sess_id.' WHERE DATE('.ORDER_CREATED_ON.') = CURDATE() AND '.ORDER_TABLE_ID.'=0 AND '.ORDER_SESSION_ID.'=0 AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_TYPE.'="'.ORDER_TYPE_ONLINE_DINE.'" AND '.$condition;
   		$res = mysql_query($qry);
				
			return $res;
	   
	 }  
	  return 0;
	}
	
	public static function updateAllPendingOrders($table_id,$tbl_sess_id){
	  if(is_gt_zero_num($table_id) && is_gt_zero_num($tbl_sess_id)){ 
	  		$res = mysql_query('UPDATE '.TBL_ORDERS.' SET '.ORDER_SESSION_ID.' = '.$tbl_sess_id.'  WHERE DATE('.ORDER_CREATED_ON.') = CURDATE() AND '.ORDER_TABLE_ID.'='.$table_id.' AND '.ORDER_TYPE.' <> \''.ORDER_TYPE_TAKE_OUT.'\'  AND '.ORDER_SESSION_ID.'=0 AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT]);
			return $res;
	  }  
	  return 0;
	}	
	
	//..Update status of all table session orders to check paid and make it completed
	public static function updateAllTblSessOrdChkPaid($tbl_sess_id,$ord_rest=0){
		$ord_rest = is_gt_zero_num($ord_rest)? $ord_rest : $_SESSION[SES_RESTAURANT];
	  if( is_gt_zero_num($tbl_sess_id)){
	  		$res = mysql_query('UPDATE '.TBL_ORDERS.' SET '.ORDER_STATUS_ID.' = '.TBL_STATUS_CHECK.','.ORDER_COMPLETED_ON.'=NOW() WHERE '.ORDER_SESSION_ID.'='.$tbl_sess_id.' AND '.ORDER_RESTAURANT.'='.$ord_rest);
			return $res;
	  }  
	  return 0;
	}	
	
	public static function getOrderIdByAmtRange($range1,$range2){
		$order_ids = array();
		/*$sql = 'SELECT order_id, (SELECT (
		SUM( od.`ord_dtl_quantity` * od.`ord_dtl_price` ) + SUM( op.`ord_det_opt_qty` * op.`ord_det_opt_price` )
		) AS total
		FROM TBL_ORDER_DETAILS od
		LEFT OUTER JOIN TBL_ORDER_DETAILS_OPTIONS op ON od.`ord_dtl_id` =  op.`ord_det_opt_order_detail`
		WHERE od.`ord_dtl_order_id` = order_id) order_amount FROM tbl_orders having order_amount between('.$range1.' AND '.$range2.')';*/
		//..changed By info.shri@03JULY2013
		/*$sql = 'SELECT `order_id`, 
		(
			SELECT (
			IFNULL(SUM( od.`ord_dtl_quantity` * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-(od.`ord_dtl_price` * (od.`ord_dtl_discount`/100))),od.`ord_dtl_price`)),0) + IFNULL(SUM(op.`ord_det_opt_qty` * IF(op.`ord_det_opt_discount` > 0, (op.`ord_det_opt_price`-(op.`ord_det_opt_price` * (op.`ord_det_opt_discount`/100))),op.`ord_det_opt_price`)),0)  + `tbl_orders`.`order_tip`
			) AS `total`  
			FROM `'.TBL_ORDER_DETAILS.'` od
			LEFT OUTER JOIN `'.TBL_ORDER_DETAILS_OPTIONS.'` op ON od.`ord_dtl_id` =  op.`ord_det_opt_order_detail`
			WHERE od.`ord_dtl_order_id` = `tbl_orders`.`order_id`
		) `order_amount` 
		FROM `tbl_orders` 
		HAVING  '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].'   AND `order_amount` BETWEEN '.$range1.' AND '.$range2;*/ 
		
		$sql = 'SELECT `order_id`,  '.ORDER_RESTAURANT.',  
		(
			SELECT (
			IFNULL(SUM( od.`ord_dtl_quantity` * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-od.`ord_dtl_discount`),od.`ord_dtl_price`)),0) + IFNULL(SUM(op.`ord_det_opt_qty` * IF(op.`ord_det_opt_discount` > 0, (op.`ord_det_opt_price`- op.`ord_det_opt_discount`),op.`ord_det_opt_price`)),0)  + `tbl_orders`.`order_tip`
			) AS `total`  
			FROM `'.TBL_ORDER_DETAILS.'` od
			LEFT OUTER JOIN `'.TBL_ORDER_DETAILS_OPTIONS.'` op ON od.`ord_dtl_id` =  op.`ord_det_opt_order_detail`
			WHERE od.`ord_dtl_order_id` = `tbl_orders`.`order_id`
			AND `tbl_orders`.`'.ORDER_STATUS_ID.'` <> '.TBL_STATUS_ORDER_CANCELLED.'
		) `order_amount` 
		FROM `tbl_orders` 
		HAVING   '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].'   AND `order_amount` BETWEEN '.$range1.' AND '.$range2;
		//echo $sql;
		$res = mysql_query($sql); 
		if($res){
			while($row=mysql_fetch_assoc($res)){
				$order_ids[] = $row['order_id'];
			}
		}
		return $order_ids;		
}
	
	/**
	* calculate order tax amount according to tax % & order amount 
	* @param float $amt  - amount of the order
	* @param float $tax	 - tax (in percentage) of order
	* @return float
	*/
	public static function calOrderTaxAmt($amt,$tax){
			return round(($tax * ($amt/100.00)),2);
	}
	 
	/**
	* Get Order Type Title
	* @param 	string $type
	* @param  integer $isPrefix 
	* @return string 
	*/
	public static function getOrderTypeTitle($type,$isPrefix = 0){
		$str = '';$prefix = '';
		if(is_not_empty($type)){
			switch ($type){
				case ORDER_TYPE_AT_LOCATION : 
										$str = 'At location'; 
										$prefix = ''; 
										break;
				case ORDER_TYPE_TAKE_OUT : 
										$str = 'Take-Out'; 
										$prefix = 'Take-Out'; 
										break;
				case ORDER_TYPE_DELIVERY : 
										$str = 'Delivery'; 
										$prefix = 'Delivery'; 
										break;
				case ORDER_TYPE_ONLINE_DINE : 
										$str = 'Dine-In'; 
										$prefix = 'Dine-in'; 
										break; 
			}
		}
		return (is_gt_zero_num($isPrefix)?$prefix:$str);
		
	}
	
	public static function getPastOrders($order_id){
		if(is_gt_zero_num($order_id)){
			$order_info = self::GetInfo($order_id);			 
		}
	}
	
	private static function sendConfirmationSMS($order_id){
		 $info =  self::GetInfo($order_id);
		 $msg = 'Hi, your order is confirmed. You can pickup your order in '.$info[ORDER_TAKEOUT_TIME].' mins';
		 tbl_order_confirmation_codes::sendSMS($info[ORDER_CUSTOMER_NAME],$msg); 
	}
	private static function sendConfirmationMail($order_id){
		if(is_gt_zero_num($order_id)){
			$info =  self::GetInfo($order_id);
			if(is_not_empty($info)){ 
			//print_r($info); echo TBL_STATUS_CHECK;
			if($info[ORDER_STATUS_ID] < TBL_STATUS_CHECK){
				$obj = new tbl_orders();
				$obj->update_ord_sts($order_id,TBL_STATUS_ORDER_CONFIRM);
				unset($obj);
				if(is_not_empty($info[ORDER_TAKEOUT_EMAIL])){
					orderConfirmEmail($info[ORDER_TAKEOUT_EMAIL],$info[ORDER_CUSTOMER_NAME],$info[ORDER_TAKEOUT_TIME]);
			 }
			} 
		 }
		}
		return true; 
	}
	
	public static function confirmTakeOutOrder($order_id,$takeout_time,$isOnlineOrder=0){
		if(is_gt_zero_num($order_id) && is_not_empty($takeout_time)){
			if(is_gt_zero_num($isOnlineOrder)){
				 $qry = 'UPDATE '.TBL_ORDERS.' SET  '.ORDER_STATUS_ID.'='.TBL_STATUS_ORDER_CONFIRM.' , '.ORDER_TAKEOUT_TIME.' = '.$takeout_time.'  WHERE '.ORDER_ID.'='.$order_id;
			}else{
				 $qry = 'UPDATE '.TBL_ORDERS.' SET '.ORDER_TAKEOUT_TIME.' = '.$takeout_time.'  WHERE '.ORDER_ID.'='.$order_id;
			}
			$res = mysql_query($qry); 
		  
			if($res){ 
			  if(is_gt_zero_num($isOnlineOrder)){
			  	     tbl_orders::sendConfirmationSMS($order_id);	 
				}else{
					 self::sendConfirmationMail($order_id);
				}				 
			} 
			return 1;
		} 
		return 0;
	}
   
  public static function mkTkOutOrderReady($order_id=0){
	   global  $tbl_orders_active_condition;
	   if(is_gt_zero_num($order_id)){
	   	$obj = new tbl_orders();
	   	$obj->update_ord_sts( $order_id ,TBL_STATUS_ORDER_PICKED);
	   	unset($obj);
	   	return 1;
	   }else{	
	   	$sql = 'SELECT '.ORDER_ID.','.ORDER_TAKEOUT_TIME.' FROM '.TBL_ORDERS.' WHERE '.ORDER_TYPE.'=\''.ORDER_TYPE_TAKE_OUT.'\'  AND '.ORDER_STATUS_ID.'='.TBL_STATUS_ORDER_CONFIRM.' AND DATE_ADD('.ORDER_CREATED_ON.', INTERVAL (SELECT IFNULL('.ORDER_TAKEOUT_TIME.',0) FROM '.TBL_ORDERS.' T WHERE T.'.ORDER_ID.' = '.ORDER_ID.' LIMIT 0,1) MINUTE) < NOW() AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND  '.$tbl_orders_active_condition;
	   	$res = mysql_query($sql);
	   	if($res){
	   		$obj = new tbl_orders();
	   		while($row=mysql_fetch_assoc($res)){
	   			$obj->update_ord_sts( $row['order_id'] ,TBL_STATUS_ORDER_PICKED); 
	   			return 1;
	   		}
	   		unset($obj);
	   	}
	   }		
	   
	   	return 0;
	}
	
	
	public static function mkConfirmDelayOrders(){ 
		global $order_confirm_time,$tbl_orders_active_condition;
	 if(is_gt_zero_num($order_confirm_time)){ 
		$orders = array();
		
		$active_session = tbl_table_customer_session::getActiveSessionForAlltables();
		 
		if(is_not_empty($active_session)){
			 
	 $res = mysql_query ('SELECT '.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_STATUS_ID.' = '.TBL_STATUS_ORDERED.'  AND '.$tbl_orders_active_condition.' AND TIME('.ORDER_CREATED_ON.' + INTERVAL '.$order_confirm_time.' MINUTE) <= CURTIME() AND '.ORDER_SESSION_ID.' IN ('.$active_session.') AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_ID.'  NOT IN (SELECT '.ALERT_POST_ID.' FROM '.TBL_ALERTS.' WHERE '.ALERT_POST_TYPE.'=\''.ALERT_ORD_CONFIRM_DELAY.'\')');
	 
	   
	 if($res){ 
	 	while($row=mysql_fetch_assoc($res)){
			$orders[$row[ORDER_ID]] = $row; 
		}
	 }	
	 
	 if(is_not_empty($orders)){
	 	 
		 	$ord_delay_msg = 'Order Confirmation Delayed';
		 	foreach($orders as $order_id=>$ord_info){
				//..notify manager
				biz_send_alert($ord_info[ORDER_TABLE_ID],$ord_info[ORDER_CUSTOMER_NAME],$order_id,$ord_delay_msg,ALERT_FOR_MANGER,ALERT_ORD_CONFIRM_DELAY,NULL,NULL,NULL,STS_ORDER_CONFIRM_DELAY); 
			}
			return OPERATION_SUCCESS; 			
		 }   
		} 																			
	 } 
	 return OPERATION_FAIL; 
	}
	
	public static function getAllOrdersOfSessionByOrder($order_id){
		$strop = '';
		if(is_gt_zero_num($order_id)){
		 $strop =	DB::ExecScalarQry('SELECT GROUP_CONCAT('.ORDER_ID.') FROM '.TBL_ORDERS.' WHERE '.ORDER_SESSION_ID.' = (SELECT '.ORDER_SESSION_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_ID.'='.$order_id.')');
		 
		} 
		return $strop;
	}
	
	/**
	* Apply the tip to all the orders of the session.
	* @param int $order_id
	* @param number $order_tip
	* @param int $is_individual (optional)
	* 
  */ 
	public static function applyOrderTipToAllOrders($order_id,$order_tip,$is_individual=0){
		$strop = '';
		if(is_gt_zero_num($order_id) && is_gt_zero_num($order_tip)){
			 $order_count = 0;
			 $each_order_tip = 0;
			if($is_individual){
				$strorders = $order_id;
				$each_order_tip = $order_tip;
			}else{
				$strorders = self::getAllOrdersOfSessionByOrder($order_id); 
			if(is_not_empty($strorders)){
				$allorders = biz_explode(',',$strorders); 
				$order_count = count($allorders); 
			  
				if(is_gt_zero_num($order_count)){
					 $each_order_tip = round($order_tip  / ($order_count * 1.00),2); 
				}
			 }
			} 
			//echo $each_order_tip;exit;
			
			if(is_gt_zero_num($each_order_tip)){
				return	DB::ExecNonQry('UPDATE '.TBL_ORDERS.' SET '.ORDER_TIP.' = \''.$each_order_tip.'\' WHERE '.ORDER_ID.' IN ('.$strorders.')');
			} 
		} 
		return OPERATION_FAIL;
	}
	
	
	
	
	public static function mkDelayOrders(){
	 global $order_delay_time;
	 //if(is_gt_zero_num($order_delay_time)){
		$orders = array();
		$active_session = tbl_table_customer_session::getActiveSessionForAlltables();
		if(is_not_empty($active_session)){
			//$active_session = '0'; 
	 		$res = mysql_query ('SELECT '.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_STATUS_ID.' = '.TBL_STATUS_ORDER_CONFIRM.' AND ('.ORDER_DELAYED_AT.' is NULL OR '.ORDER_DELAYED_AT.' = 0)  AND  TIME('.ORDER_CREATED_ON.' + INTERVAL IFNULL('.ORDER_TAKEOUT_TIME.','.(is_gt_zero_num($order_delay_time) ? $order_delay_time : '0').') MINUTE) <= CURTIME() AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_SESSION_ID.' IN ('.$active_session.')');
	   
		 if($res){ 
		 	while($row=mysql_fetch_assoc($res)){
				$orders[$row[ORDER_ID]] = $row; 
			}
		 }	 
		 if(is_not_empty($orders)){
		 	$order_ids = biz_implode(',',array_keys($orders));
		  
		 	if(is_not_empty($order_ids)){
				 
		 	/*
			//change@20Aug2013#2
			 $res2 =  mysql_query('UPDATE '.TBL_ORDERS.' SET '.ORDER_STATUS_ID.'= '.TBL_STATUS_ORDER_DELAYED.'  WHERE '.ORDER_ID.' IN ('.$order_ids.')'); */
			 $res2 =  mysql_query('UPDATE '.TBL_ORDERS.' SET '.ORDER_DELAYED_AT.'= \''.date(DATE_FORMAT).'\'  WHERE '.ORDER_ID.' IN ('.$order_ids.')');
			 if($res2){
			 	$ord_delay_msg = 'Order Delayed';
			 	foreach($orders as $order_id=>$ord_info){
					if(is_gt_zero_num($ord_info[ORDER_EMP_ID])){
						biz_send_alert($ord_info[ORDER_TABLE_ID],$ord_info[ORDER_CUSTOMER_NAME],$order_id,$ord_delay_msg, $ord_info[ORDER_EMP_ID], ALERT_ORDER,NULL,NULL,NULL,STS_ORDER_DELAYED);
					}
					biz_send_alert($ord_info[ORDER_TABLE_ID],$ord_info[ORDER_CUSTOMER_NAME],$order_id,$ord_delay_msg,ALERT_FOR_MANGER, ALERT_ORDER,NULL,NULL,NULL,STS_ORDER_DELAYED);
				}
			 }
		 return OPERATION_SUCCESS; 
		} 
	 }
	}  
	//}
	 return OPERATION_FAIL; 
	}
	
	
	/**
	* get all orders details for the particualar customer session
	* @param integer $sess_id
	* @return array
	*/
	
	public static function getAllOrderDetailBySession($sess_id,$order_id=0){
		$info = array();
		if(is_gt_zero_num($sess_id) || is_gt_zero_num($order_id)){
		$info['customer_session'] = array();
		if(is_gt_zero_num($sess_id)){
			$info['customer_session'] = tbl_table_customer_session::GetInfo($sess_id);
			$arr = array(ORDER_SESSION_ID=>$sess_id);  
		}else{
			$arr = array(ORD_DTL_ORDER_ID=>$order_id);  
		}
			$arr['non_cancelled_order']  = 1;
		$ses_ord_dtl = tbl_order_details::readArray($arr,$res_fnt,1,1);
		if(is_gt_zero_num($order_id)){
			$info['amounts'] = self::getOrdGrAmtBySession(0,$order_id); 
		}else{
			$info['amounts'] = self::getOrdGrAmtBySession($sess_id); 
		}
		
		foreach($ses_ord_dtl as $kydish_cart=>$dish_cart){ 					
		//..if order_id is given only take that orders detail
			if(is_gt_zero_num($order_id) && ($order_id != $dish_cart['ord_dtl_order_id'])) continue; 
		 

		$info['order_details'][$dish_cart['ord_dtl_order_id']][$kydish_cart] = $dish_cart;
					//$itm_price=round(($dish_cart['ord_dtl_price']-($dish_cart['ord_dtl_price'] * ($dish_cart['ord_dtl_discount']/100.00))),2);
					$itm_price=round(($dish_cart['ord_dtl_price']-$dish_cart['ord_dtl_discount']),2);
					//..logic for the promotion discount
					if(is_gt_zero_num($dish_cart['ordprom_discount_amt'])){
						$itm_price=($itm_price-$dish_cart['ordprom_discount_amt']);
						$proms_applied[]=$dish_cart['ordprom_promotion'];	
					}
					$info['order_details'][$dish_cart['ord_dtl_order_id']][$kydish_cart]['ord_dtl_price'] = $itm_price;					
					$totalAmt = $totalAmt + ($dish_cart['ord_dtl_quantity'] * $itm_price);  
					//print_r($dish_cart['opt_val_details']);
					if(is_not_empty($dish_cart['opt_val_details'])){
						foreach($dish_cart['opt_val_details'] as $key_sbmndsh=>$val_sbmndsh){			 
							//$itm_opt_price=round(($val_sbmndsh['ord_det_opt_price']-($val_sbmndsh['ord_det_opt_price'] * ($val_sbmndsh['ord_det_opt_discount']/100.00))),2);
							$itm_opt_price=round(($val_sbmndsh['ord_det_opt_price']-$val_sbmndsh['ord_det_opt_discount']),2);
							$info['order_details'][$dish_cart['ord_dtl_order_id']][$kydish_cart]['opt_val_details'][$key_sbmndsh]['ord_det_opt_price'] = $itm_opt_price;
					
							$totalAmt = $totalAmt + ($val_sbmndsh['ord_det_opt_qty'] * $itm_opt_price);  
						} 	
					}	 	 
				}		 
	  }	 
		return $info;		
	}	
	
	
	/**
	* Send email for order receipt
	* @param integer $order_id
	* @param string $customer_email
	* @param string $payment_choice
	* @return boolean
	*/
	public static function emailOrderReceipt($order_id,$customer_email,$payment_choice='INDIVIDUAL'){
		global  $website,$sending_email,$_lang;
	 if(is_gt_zero_num($order_id) && is_not_empty($customer_email)){
	 			$tbl_ordersinfo = tbl_orders::GetInfo($order_id);
				$restaurant_info = tbl_restaurent::GetInfo($tbl_ordersinfo[ORDER_RESTAURANT]);
		if($payment_choice == 'INDIVIDUAL'){
			$all_ses_ord_dtl = tbl_orders::getAllOrderDetailBySession($tbl_ordersinfo[ORDER_SESSION_ID],$order_id); 
		}else{
			$all_ses_ord_dtl = tbl_orders::getAllOrderDetailBySession($tbl_ordersinfo[ORDER_SESSION_ID]);
		}
		 
		$strOp = '';
 if ($all_ses_ord_dtl['order_details']){
 	$strOp .='<table style="width:99%;border:1px solid #111;margin-bottom:5px;background:#fff;color:#000;font-family: Arial !important;font-size:12px;">'.RET;
	 
 if($all_ses_ord_dtl['customer_session']){
 	$strOp .='<tr>'.RET;
	$strOp .='<td style="text-align:left;">'.$tbl_ordersinfo['dine_table'].'</td>'.RET;
	$strOp .='<td style="text-align:center;">'.$tbl_ordersinfo['order_session_id'].'</td>'.RET;
	$strOp .='<td style="text-align:right;">#Gst '.$all_ses_ord_dtl['customer_session']['tbl_cust_sess_party_size'].'</td>'.RET;
	$strOp .='</tr>'.RET; 
 }
	
	  
	$strOp .= '<tr>'.RET;
	$strOp .= '<td colspan="3" style="text-align: center !important;">'.$tbl_ordersinfo['order_created_on'].'</td>'.RET;
	$strOp .= '</tr>'.RET;
	 
	$grd_tot = $tot =0 ;

foreach ($all_ses_ord_dtl['order_details'] as $key=>$ord_dtl){
		$strOp .='<tr>'.RET;
	$strOp .= '<th colspan="3" style="text-align: center !important;border-top: 1px dotted #000;border-bottom: 1px dotted #000;">'.$all_ses_ord_dtl['amounts']['customers'][$key].'</th>'.RET;
	$strOp .= '</tr>'.RET;
	
	$sub_tot =0 ;
	
 foreach ($ord_dtl as $kydish_cart=>$dish_cart){
 	
		$tot = $dish_cart['ord_dtl_price'] * $dish_cart['ord_dtl_quantity'];
		 
	$strOp .= '<tr class="sub_main">'.RET;
	$strOp .= '<td style="text-align:center;">'.(is_gt_zero_num($dish_cart['ord_dtl_quantity']) ? $dish_cart['ord_dtl_quantity'] : '').'</td>'.RET;
	$strOp .= '<td>'.$dish_cart['title'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight:bold;">'.$tot.'</td>'.RET;
	$sub_tot = $sub_tot + $tot;
	$strOp .= '</tr>'.RET;
	
 if ($dish_cart["opt_val_details"]){  
	foreach($dish_cart['opt_val_details'] as $optItm){
	 
  $tot=0;  	 
	$tot = $optItm['ord_det_opt_price'] * $optItm['ord_det_opt_qty'];
					
  $strOp .= '<tr>'.RET;
	$strOp .= '<td style="text-align:center;" >'.((is_gt_zero_num($optItm['ord_det_opt_price']))? $optItm['ord_det_opt_qty'] : '').'</td>'.RET;
	$strOp .= '<td>&nbsp;&nbsp;'.$optItm['opt_value'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight:bold;">'.$tot.'</td>'.RET;
	$sub_tot = $sub_tot + $tot;
	$strOp .= '</tr>'.RET; 
   }
 }
    	
} 
	$strOp .= '<tr>'.RET;
	$strOp .= '<td colspan="2" style="text-align:right;font-weight: bold;">SubTotal</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$sub_tot.'</td>'.RET;
	$strOp .= '</tr>'.RET;
	$grd_tot = $sub_tot + $grd_tot;
}
  
 
	$strOp .= '<tr>'.RET;
	$strOp .= '<td colspan="2" style="text-align:right;font-weight: bold;">'.$_lang['tbl_orders']['label']['order_tax'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$all_ses_ord_dtl['amounts']['tax_amt'].'</td>'.RET;
	$strOp .= '</tr>'.RET;
	$strOp .= '<tr >'.RET;
	$strOp .= '<td colspan="2" style="text-align:right;font-weight: bold;">'.$_lang['tbl_orders']['label']['order_promotion_disc'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$all_ses_ord_dtl['amounts']['prom_discnt_amt'].'</td>'.RET;
	$strOp .= '</tr>'.RET;
	
	$strOp .= '<tr>'.RET;
	$strOp .= '<td colspan="2" style="text-align:right;font-weight: bold;">'.$_lang['tbl_orders']['label']['order_tip'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$all_ses_ord_dtl['amounts']['tip_amt'].'</td>'.RET;
	$strOp .= '</tr>'.RET;
	$strOp .= '<tr>'.RET;
	$strOp .= '<td colspan="2" style="text-align:right;font-weight: bold;">'.$_lang['tbl_orders']['label']['order_misc_charge'].'</td>'.RET;
	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$all_ses_ord_dtl['amounts']['misc_charge'].'</td>'.RET;
	$strOp .= '</tr>'.RET;
	$strOp .= '<tfoot>'.RET;
	$grd_tot = $grd_tot + $all_ses_ord_dtl['amounts']['tax_amt'] + $all_ses_ord_dtl['amounts']['tip_amt'] + $all_ses_ord_dtl['amounts']['misc_charge'] - $all_ses_ord_dtl['amounts']['prom_discnt_amt']; 
	
	$strOp .= '<tr>'.RET;
	$strOp .= '<th style="text-align:right;border-top:1px solid #000;">'.$_lang['main']['cart']['total'].'</th>'.RET;
	$strOp .= '<th style="text-align:right;font-weight: bold;border-top:1px solid #000;" colspan="2">'.$grd_tot.'</th>'.RET;
	$strOp .= '</tr>'.RET;
	$strOp .= '</tfoot>'.RET;
	$strOp .= '</table>'.RET; 
 }

	$subject =  $restaurant_info[RESTAURENT_NAME].' - Order Receipt';
	// Always set content-type when sending HTML email
	$headers  = "MIME-Version: 1.0 "."\r\n";
	$headers .= "Content-Type: text/html; charset=ISO-8859-1 "."\r\n";
	
	$headers .= "From: ".$restaurant_info[RESTAURENT_NAME]."<".$restaurant_info[RESTAURENT_EMAIL]. ">\r\n";
	$headers .= "Reply-To: ".$restaurant_info[RESTAURENT_NAME]."<".$restaurant_info[RESTAURENT_EMAIL]. ">\r\n";
	$content = "<html><body style=\"font-family: Arial !important;font-size:12px;\">";
 	$content .= "Hi, <br/><br/>";
	$content .= "{$strOp}" ; 
	$content .="<br/>Thanks<br/>";
	$content .="<a href='{$website}'>{$restaurant_info[RESTAURENT_NAME]}</a>";
		 //echo $content;exit;
	   return mail($customer_email, $subject, $content, $headers,'-f'.$restaurant_info[RESTAURENT_EMAIL]); 
	 }	
		return false;
	}
	
	
	
	
	
	public static function getOrderTipDistribution($tip_dis_id,$emplist=''){
		$qry = 'SELECT '.ORDER_EMP_ID.', IF('.ORDER_EMP_ID.' =0,  \'-\', (SELECT  CONCAT(`staff_fname`,\' \',`staff_lname`) FROM  `tbl_staff` WHERE  `staff_member_id` =  `'.ORDER_EMP_ID.'`)) AS server, SUM('.ORDER_TIP.') AS shared_amt FROM '.TBL_ORDERS.' WHERE  '.ORDER_TIP_DISTRIBUTION.'='.$tip_dis_id.' AND '.ORDER_EMP_ID.' <> 0  '.(is_not_empty($emplist)? ' AND '.ORDER_EMP_ID .' IN ('.$emplist.')' :'').' GROUP BY '.ORDER_EMP_ID.''; 
		//echo $qry; 
		$arr = array();
		$res = mysql_query($qry);
		if($res){
			while($row = mysql_fetch_assoc($res)){
				$arr[$row[ORDER_EMP_ID]] = $row;
			}
		}
		return $arr;
	}
	
	
	public static function getCurrentStatus($order_id){ 
		if(is_gt_zero_num($order_id)){
			return DB::ExecScalarQry('SELECT '.ORDER_STATUS_ID.' FROM '.TBL_ORDERS.' WHERE '.ORDER_ID.'='.$order_id,'0');
		} 
		return '0';
	}
	
	//..Validate the order and send it to the pos system
	public static function _validate_order_to_ethor_pos($order_id,$payment_choice = 'INDIVIDUAL'){
	if(is_gt_zero_num($order_id)){
		$obj=array();
		$obj['order_id']='';
		$obj['order_number']=$order_id;
		$obj['invoice_number']=$order_id;
		
		$obj['order_status']='UNPROCESSED';
		$obj['order_date']=date(DATE_FORMAT);
		$obj['required_date']=date(DATE_FORMAT);
		$obj['payment']=true;
		//..Customer info
		$obj['customer']['first_name']='san';
		$obj['customer']['last_name']='kokate';
		$obj['customer']['email_address']='san@gmail.com';
		$obj['customer']['phone_number']['area_code']='602';
		$obj['customer']['phone_number']['number']='2374133';
				
		$tbl_ordersinfo=array();		
		$tbl_ordersinfo = tbl_orders::GetInfo($order_id);
				
		if($payment_choice == 'INDIVIDUAL'){
			$all_ses_ord_dtl = tbl_orders::getAllOrderDetailBySession($tbl_ordersinfo[ORDER_SESSION_ID],$order_id);			 
		}else{
			$all_ses_ord_dtl = tbl_orders::getAllOrderDetailBySession($tbl_ordersinfo[ORDER_SESSION_ID]);
		}
		
				
		$obj['order_payments']['payment_tendered']=$all_ses_ord_dtl['amounts']['gr_amt'];
		$obj['order_payments']['payment_type']="C";
		
		$obj['subtotal']=$all_ses_ord_dtl['amounts']['total'];
 		$obj['total_tax']=$all_ses_ord_dtl['amounts']['tax_amt'];
		$obj['tip']=$all_ses_ord_dtl['amounts']['tip_amt'];
		$obj['discount']=$all_ses_ord_dtl['amounts']['prom_discnt_amt'];
		$obj['final_total']=$all_ses_ord_dtl['amounts']['gr_amt'];
		
		$obj['table_id']=$all_ses_ord_dtl['customer_session']['tbl_cust_sess_table_id'];
		
		$ord_detail=$tbl_ordersinfo['order_details'];	
		if($ord_detail['order_type']=='DELIVERY'){
			$_ord_type='delivery';
			//..If order is of delivery type
			$obj['delivery_address']['street_number']='';
			$obj['delivery_address']['street']='';
			$obj['delivery_address']['city']='';
			$obj['delivery_address']['province_state']='';
			$obj['delivery_address']['postal_zip']='';
			$obj['delivery_instructions']='';
		}else{
			if($ord_detail['order_type']=='TAKE-OUT'){
				$_ord_type='pickup';
			}else{
				$_ord_type='dine_in';
			}
			//..if order is of delivery type
			$obj['delivery_address']['street_number']='';
			$obj['delivery_address']['street']='';
			$obj['delivery_address']['city']='';
			$obj['delivery_address']['province_state']='';
			$obj['delivery_address']['postal_zip']='';
			$obj['delivery_instructions']='';
		}
		$obj['order_type']=$_ord_type;		
		//..Fetch all order details..
		$i=0;
		foreach($ord_detail as $kydish_cart=>$dish_cart){ 

			//$ord_info['order_items']['quantity']=$dish_cart['ord_dtl_quantity'];
			$obj['order_items'][$i]['menu_item_id']=$dish_cart['ethor_menu_item'];
			$obj['order_items'][$i]['menu_item_name']=$dish_cart['title'];						
			$obj['order_items'][$i]['notes']=$dish_cart['title'];
			 //print_r($dish_cart['opt_val_details']);
			if(is_not_empty($dish_cart['opt_val_details'])){
				$j=0;
				foreach($dish_cart['opt_val_details'] as $key_sbmndsh=>$val_sbmndsh){	
					
					//..variant id is only for the item having price
					if(is_gt_zero_num($val_sbmndsh['ord_det_opt_price'])){
						$obj['order_items'][$i]['quantity']=$val_sbmndsh['ord_det_opt_qty'];
						$obj['order_items'][$i]['variant_id']=$val_sbmndsh['ethor_variant'];
						$obj['order_items'][$i]['total']=$val_sbmndsh['ord_det_opt_price'];
					}else{
						//..Else are modifiers
						$obj['order_items'][$i]['content'][$j]['modifier_id']=$val_sbmndsh['ethor_variant']; 
						$j=$j+1;
					}
				}
			}						
			$i=$i+1;
		}
		print_r($obj);
		echo json_encode($obj);
			
			/*//..STEP-1] valdate order by ethor	
			//..Post the url to the service
			$url_to_val = "https://ethor-test.apigee.net/v1/stores/".$_SESSION['curr_restant'][RESTAURENT_ETHOR_STORE]."/orders/calculate?apikey=".ETHOR_API_KEY;
			//$_pass_param=urldecode(json_encode($obj));			
			$obj_ethor_api=new ethor_api();
			$response=$obj_ethor_api->_parse_url_get_response($url_to_val,1,$obj);
			if(is_not_empty($response)){
				//..validate successfull
				//..STEP-2] create order by ethor	
				$url_to_create = "https://ethor-test.apigee.net/v1/stores/".$_SESSION['curr_restant'][RESTAURENT_ETHOR_STORE]."/orders/create?apikey=".ETHOR_API_KEY;
				$response=$obj_ethor_api->_parse_url_get_response($url_to_create,1,$obj);
				if(is_not_empty($response)){
					if(is_not_empty($response['order_id'])){
						//..Update the order
						$this->_updt_ethor_order($order_id,$response['order_id']);
						return 1;
					}
				}else{
					return 0;
				}
			}else{
				return 0;
			}*/
			
			
		}else{
			return 0;	
		}		
	}
	/*
"order_items": [
{
"quantity": "1",
"menu_item_id": "EYTZ9KEVKU",
"variant_id": "TRTRR3DIIA",
"notes": "TESTORDERbyGuven",
"menu_item_name": "BottledWater",
"total": 1.29
}
"order_payments": [
{
"payment_tendered": 2.00,
"payment_type": "C"
}
*/

public static function getOrderHTML($orderId){ 
	    $order_info = self::GetInfo($orderId); 
	    global $_lang;
	   $strOp='';
	   $strOp .='<table class="listTable"><tr><th class="fieldItem">&nbsp;</th><th class="valueItem"> ORDER #'.$order_info['order_id'].'</th></tr>';
//$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_table_id'].'<i>:</i></td><td class="valueItem">'.$order_info['dine_table'].'</td></tr>';
//$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_emp_id'].'<i>:</i></td><td class="valueItem"> '.$order_info['server'].' </td></tr>';
$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_customer_name'].'<i>:</i></td><td class="valueItem"> '.$order_info['order_customer_name'].'</td></tr>';
//$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_note'].'<i>:</i></td><td class="valueItem">'.(is_not_empty($order_info['order_note']) ? $order_info['order_note'] : '--') .'</td></tr>';  
$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_created_on'].'<i>:</i></td><td class="valueItem">'.date(DATE_FORMAT, strtotime($order_info['order_created_on'])).'</td></tr>';
//$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_completed_on'].'<i>:</i></td><td class="valueItem">'.( is_not_empty($order_info['order_completed_on']) ? date(DATE_FORMAT, strtotime($order_info['order_completed_on'])) : '' ).'</td></tr>';
$strOp .='<tr><td class="fieldItem">'.$_lang['tbl_orders']['label']['order_status_id'].'<i>:</i></td><td class="valueItem">'.$order_info['status'].'</td></tr>';
 $strOp .='</table>';
	   
	   if(is_not_empty($order_info['order_details'])){
	   	$strOp .= '<table class="biz_data_grid" style="width:99%;">';
	   	$strOp .= '<tr>';
	   	$strOp .= '<th style="width:2%;">No</th>';
	   	$strOp .= '<th style="width:40%;">Item </th>';
	   	$strOp .= '<th style="width:2%;text-align:center;">Quantity</th>';
	   	$strOp .= '<th style="width:20%;text-align:right;">Rate</th>';
	   	$strOp .= '<th style="width:20%;text-align:right;">Total </th>';
	   	$strOp .= '</tr>';
	   	$grd_tot =0;
	   	$tot=0;
	   	$count=0;
	   	foreach($order_info['order_details']  as $kydish_cart=>$dish_cart){

	   		$tot = $dish_cart['ord_dtl_price'] * $dish_cart['ord_dtl_quantity']; 
	   		$count++;
	   		$strOp .= '<tr class="sub_main">';
	   		$strOp .= '<td>'.$count.'</td>';
	   		$strOp .= '<td>'.$dish_cart['title'].'</td>';
	   		$strOp .= '<td style="text-align:center;">';
	   		if($dish_cart['ord_dtl_price'] && $dish_cart['ord_dtl_price'] > 0){
	   			$strOp .=$dish_cart['ord_dtl_quantity'] ;
	   		}else{

	   			$strOp .= '--';
	   		}
	   		$strOp .= '</td>';
	   		$strOp .= '<td style="text-align:right;">'.$dish_cart['ord_dtl_price'].'</td>';
	   		$strOp .= '<td style="text-align:right;font-weight:bold;">'.$tot.'</td>';
	   		$grd_tot=$tot +$grd_tot;
	   		$strOp .= '</tr>';
	   		if(is_not_empty($dish_cart["opt_val_details"])){ 
	   			$index=0;
	   			foreach($dish_cart["opt_val_details"] as $optItm){
	   				$tot = 0;$index = $index + 1;
	   				$tot =$optItm['ord_det_opt_price'] + $optItm['ord_det_opt_qty'] ;
	   				$strOp .= '<tr><td>&nbsp;</td>';
	   				$strOp .= '<td>'.$index.' '.$optItm['opt_value'].'</td>';
	   				$strOp .= '<td style="text-align:center;">'.$optItm['ord_det_opt_qty'].'</td>';
	   				$strOp .= '<td style="text-align:right;">'.$optItmp['ord_det_opt_price'].'</td>';
	   				$strOp .= '<td style="text-align:right;font-weight:bold;">'.$tot.'</td>';
	   				$strOp .= '</tr>';
	   				$grd_tot = $tot+$grd_tot;
	   			}
	   		} 
	   	}
	   	$strOp .= '<tr class="customers">';
	   	$strOp .= '<td colspan="4" style="text-align:right;font-weight: bold;">Tax</td>';
	   	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$order_info['tax_amt'].'</td>';
	   	$strOp .= '</tr>';
	   	$strOp .= '<tr class="customers">';
	   	$strOp .= '<td colspan="3">'.$order_info['order_misc_desc'].'</td>';
	   	$strOp .= '<td style="text-align:right;font-weight: bold;">Misc. Charges</td>';
	   	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$order_info['order_misc_charge'].'</td>';
	   	$strOp .= '</tr>';
	   	$strOp .= '<tr class="customers">';
	   	$strOp .= '<td colspan="4" style="text-align:right;font-weight: bold;">Promotioanl Disc</td>';
	   	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$order_info['promdisc_applied'].'</td></tr>';
	   	$strOp .= '<tr class="customers">';
	   	$strOp .= '<td colspan="4" style="text-align:right;font-weight: bold;">Order Tip</td>';
	   	$strOp .= '<td style="text-align:right;font-weight: bold;">'.$order_info['order_tip'].'</td>';
	   	$strOp .= '</tr>';
	   	$strOp .= '<tfoot>'; 
	   	$grd_tot = $grd_tot + $order_info['tax_amt'] + $order_info['order_misc_charge'] + $order_info['order_tip']  - $order_info['promdisc_applied'];
	   	$strOp .= '<tr><th colspan="4" style="text-align:right;">Total</th><th style="text-align:right;font-weight: bold;">'.$grd_tot.'</th></tr></tfoot>';
	   	$strOp .= '</table>'; 

	   } 
 		return $strOp;
	} 
	
	//...function to delete order and linked table data
	public static function _delete_liked_data($order_id){
		DB::ExecNonQry("DELETE FROM `tbl_orders` WHERE `order_id`={$order_id};");
		DB::ExecNonQry("DELETE FROM `tbl_order_details` WHERE `ord_dtl_order_id`={$order_id};");
		DB::ExecNonQry("DELETE FROM `tbl_order_applied_proms` WHERE `ord_dtl_order_id`={$order_id};");
		DB::ExecNonQry("DELETE FROM `pds_redim_cupons` WHERE `order_id`={$order_id};");
	}
	
	//...function to redeem reward for order
	public static function _redeem_order_reward($order_id){
		$_proms_applied=DB::ExecQry("SELECT * FROM `pds_redim_cupons` WHERE `order_id`={$order_id} AND `biz_redimed`=1;");
		if(is_not_empty($_proms_applied)){
			foreach($_proms_applied as $_ech_prom){
				//..Check if promotion is of reward type 
				//..then add reward id,user id and the reward points
				$_rwd_det=biz_rewards::_get_rwd_id_for_prom_id($_ech_prom['promotion_id']);
				
				if(is_not_empty($_rwd_det) && is_gt_zero_num($_rwd_det['rwd_id'])){					
					DB::ExecNonQry("UPDATE `pds_redim_cupons` SET `rwd_deals_sel`=".$_rwd_det['rwd_id'].",`rwd_points`=".$_rwd_det['rwd_point_limit'].",`rwd_usr_id`=".$_ech_prom['user_id']."  WHERE `order_id`={$order_id} AND `id`=".$_ech_prom['id']);
				}
			}
		}
	}				
 
}//..End tbl_orders 
?>