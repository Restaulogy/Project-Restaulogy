<?php/**********************************************************************tbl_emp_shift_assignment.class.phpGenerated by STRUCTY 2013.07.12 11:30:39.Copyright 2011 Structy, Frédéric Aebi. All rights reserved.**********************************************************************/define('TBL_EMP_SHIFT_ASSIGNMENT', 'tbl_emp_shift_assignment'); define('EMP_SFT_ID', 'emp_sft_id'); define('EMP_SFT_EMPLOYEE', 'emp_sft_employee'); define('EMP_SFT_SHIFT', 'emp_sft_shift'); define('EMP_SFT_DATE', 'emp_sft_date'); define('EMP_SFT_TABLES', 'emp_sft_tables'); define('EMP_SFT_START_DATE', 'emp_sft_start_date'); define('EMP_SFT_END_DATE', 'emp_sft_end_date'); define('TBL_EMP_SHIFT_ASSIGNMENT_ACTIVE_DATE',  EMP_SFT_START_DATE);define('TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE',  EMP_SFT_END_DATE);$tbl_emp_shift_assignment_active_condition= ' ('.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' is NULL OR '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' = 0 OR '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' > CURDATE( )) ';class tbl_emp_shift_assignment {	private $emp_sft_id;	private $emp_sft_employee;	private $emp_sft_shift;	private $emp_sft_date;	private $emp_sft_tables;	private $emp_sft_start_date;	private $emp_sft_end_date;	private $tbl_emp_shift_assignment_active_date;	private $tbl_emp_shift_assignment_deactive_date;	public $table_list;	public $employee_name;	public $emp_shift_title;	public $emp_shift_start_time;	public $emp_shift_end_time;		public function setemp_sft_id($pArg='0') {$this->emp_sft_id=$pArg;}	public function setemp_sft_employee($pArg='0') {$this->emp_sft_employee=$pArg;}	public function setemp_sft_shift($pArg='0') {$this->emp_sft_shift=$pArg;}	public function setemp_sft_date($pArg='0') {$this->emp_sft_date=$pArg;}	public function setemp_sft_tables($pArg='0') {$this->emp_sft_tables=$pArg;}	public function setemp_sft_start_date($pArg='0') {$this->emp_sft_start_date=$pArg;}	public function setemp_sft_end_date($pArg='0') {$this->emp_sft_end_date=$pArg;}	public function settbl_emp_shift_assignment_active_date($pArg='0') {$this->tbl_emp_shift_assignment_active_date=$pArg;}	public function settbl_emp_shift_assignment_deactive_date($pArg='0') {$this->tbl_emp_shift_assignment_deactive_date=$pArg;}	public function getemp_sft_id() {return $this->emp_sft_id;}	public function getemp_sft_employee() {return $this->emp_sft_employee;}	public function getemp_sft_shift() {return $this->emp_sft_shift;}	public function getemp_sft_date() {return $this->emp_sft_date;}	public function getemp_sft_tables() {return $this->emp_sft_tables;}	public function getemp_sft_start_date() {return $this->emp_sft_start_date;}	public function getemp_sft_end_date() {return $this->emp_sft_end_date;}	public function gettbl_emp_shift_assignment_active_date() {return $this->tbl_emp_shift_assignment_active_date;}	public function gettbl_emp_shift_assignment_deactive_date() {return $this->tbl_emp_shift_assignment_deactive_date;}	public function readObject($array = array()) {		$qry = 'SELECT  *, `shift_name`, `shift_start_time`, `shift_end_time`, CONCAT(staff_fname,\' \', staff_lname) `employee_name`, (SELECT GROUP_CONCAT('.EMP_SFT_TBL_TABLE.') FROM '.TBL_EMP_SHIFT_TABLE.' WHERE '.EMP_SFT_TBL_EMPLOYEESHIFT.'='.TBL_EMP_SHIFT_ASSIGNMENT.'.'.EMP_SFT_ID.') `tables`,					( SELECT 							IFNULL( GROUP_CONCAT( table_number ) ,  \'--\' )  				FROM 							'.TBL_DINING_TABLE.' 						WHERE 							'.TBL_DINING_TABLE.'.`table_id` in (SELECT '.EMP_SFT_TBL_TABLE.' FROM '.TBL_EMP_SHIFT_TABLE.' WHERE '.EMP_SFT_TBL_EMPLOYEESHIFT.'='.TBL_EMP_SHIFT_ASSIGNMENT.'.'.EMP_SFT_ID.')  					) AS `table_list` '.RET.'FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' LEFT OUTER JOIN '.TBL_STAFF.' ON '.EMP_SFT_EMPLOYEE.'='.STAFF_MEMBER_ID.' LEFT OUTER JOIN '.TBL_SHIFT.' ON '.EMP_SFT_SHIFT.'='.SHIFT_ID.' '.RET; 		 		$and = "WHERE".RET;				//..Condition to check if tables are for that schedule		if(is_not_empty($array['check_tables_there']) && $array['check_tables_there'] == 1) {			$qry .= $and." ".EMP_SFT_ID." IN ( SELECT DISTINCT ".EMP_SFT_TBL_EMPLOYEESHIFT." FROM  ".TBL_EMP_SHIFT_TABLE." ) ".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_ID] != "") {			$qry .= $and.EMP_SFT_ID." = '".$array[EMP_SFT_ID]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_EMPLOYEE] != "") {			$qry .= $and.EMP_SFT_EMPLOYEE." = '".$array[EMP_SFT_EMPLOYEE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_SHIFT] != "") {			$qry .= $and.EMP_SFT_SHIFT." = '".$array[EMP_SFT_SHIFT]."'".RET;			$and = "AND".RET;		}		if($array[SES_RESTAURANT] != "") {			$qry .= $and.chkShiftInRestaurant(EMP_SFT_SHIFT,$array[SES_RESTAURANT]).RET;			$and = "AND".RET;		}				if($array[EMP_SFT_DATE] != "") {			$qry .= $and.EMP_SFT_DATE." = '".$array[EMP_SFT_DATE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_TABLES] != "") {			$qry .= $and.EMP_SFT_TABLES." = '".$array[EMP_SFT_TABLES]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_START_DATE] != "") {			$qry .= $and.EMP_SFT_START_DATE." = '".$array[EMP_SFT_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_END_DATE] != "") {			$qry .= $and.EMP_SFT_END_DATE." = '".$array[EMP_SFT_END_DATE]."'".RET;			$and = "AND".RET;		}//echo $qry;	$result = mysql_query($qry);		if($result) {			while ($row = mysql_fetch_array($result)) {				$record = $row;				break;//end after first record			}			if(count($record[0]) == 0) {				return array();			} else {				$this->setemp_sft_id($record[EMP_SFT_ID]);				$this->setemp_sft_employee($record[EMP_SFT_EMPLOYEE]);				$this->setemp_sft_shift($record[EMP_SFT_SHIFT]);				$this->setemp_sft_date($record[EMP_SFT_DATE]);				$this->setemp_sft_tables($record['tables']);				$this->setemp_sft_start_date($record[EMP_SFT_START_DATE]);				$this->setemp_sft_end_date($record[EMP_SFT_END_DATE]);				$this->table_list = $record['table_list'];				$this->employee_name = $record['employee_name'];				$this->emp_shift_title = $record['shift_name'];				$this->emp_shift_start_time = $record['shift_start_time'];				$this->emp_shift_end_time = $record['shift_end_time'];				$this->settbl_emp_shift_assignment_active_date($record[TBL_EMP_SHIFT_ASSIGNMENT_ACTIVE_DATE]);				$this->settbl_emp_shift_assignment_deactive_date($record[TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE]);				return true;			}		}	}	public static function readArray($array = array(),&$result_found=0,$isArray=1,$get_live_only=0) {		global $tbl_emp_shift_assignment_active_condition;	/*	$qry = 'SELECT *, 						CONCAT(staff_fname,\' \', staff_lname) `employee_name`, 					( SELECT 							IFNULL( GROUP_CONCAT( table_number ) ,  \'--\' )  				FROM 							'.TBL_DINING_TABLE.' 						WHERE 							FIND_IN_SET( '.TBL_DINING_TABLE.'.`table_id`,  '.TBL_EMP_SHIFT_ASSIGNMENT.'.'.EMP_SFT_TABLES.' )					) AS `table_list` '.RET.'FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' LEFT OUTER JOIN '.TBL_STAFF.' ON '.EMP_SFT_EMPLOYEE.'='.STAFF_MEMBER_ID.''.RET; */			/*$qry = 'SELECT  *, `shift_name`, `shift_start_time`, `shift_end_time`,  CONCAT(staff_fname,\' \', staff_lname) `employee_name`, (SELECT  GROUP_CONCAT('.EMP_SFT_TBL_TABLE.') FROM '.TBL_EMP_SHIFT_TABLE.' WHERE '.EMP_SFT_TBL_EMPLOYEESHIFT.'='.TBL_EMP_SHIFT_ASSIGNMENT.'.'.EMP_SFT_ID.' AND `emp_sft_tbl_id` = (SELECT MAX(`emp_sft_tbl_id`) FROM `tbl_emp_shift_table`)  ORDER BY `'.EMP_SFT_TBL_ID.'`) `tables`,					( SELECT 							IFNULL( GROUP_CONCAT( table_number ) ,  \'--\' )  				FROM 							'.TBL_DINING_TABLE.' 						WHERE 							'.TBL_DINING_TABLE.'.`table_id` in (SELECT '.EMP_SFT_TBL_TABLE.' FROM '.TBL_EMP_SHIFT_TABLE.' WHERE '.EMP_SFT_TBL_EMPLOYEESHIFT.'='.TBL_EMP_SHIFT_ASSIGNMENT.'.'.EMP_SFT_ID.' AND `emp_sft_tbl_id` = (SELECT MAX(`emp_sft_tbl_id`) FROM `tbl_emp_shift_table`)  ORDER BY `'.EMP_SFT_TBL_ID.'`)   					) AS `table_list` '.RET.'FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' LEFT OUTER JOIN '.TBL_STAFF.' ON '.EMP_SFT_EMPLOYEE.'='.STAFF_MEMBER_ID.' RIGHT OUTER JOIN '.TBL_SHIFT.' ON '.SHIFT_ID.'='.EMP_SFT_SHIFT.''.RET; 					*/				$qry = 'SELECT  *, `shift_name`, `shift_start_time`, `shift_end_time`,  CONCAT(staff_fname,\' \', staff_lname) `employee_name` '.RET.'FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' LEFT OUTER JOIN '.TBL_STAFF.' ON '.EMP_SFT_EMPLOYEE.'='.STAFF_MEMBER_ID.' RIGHT OUTER JOIN '.TBL_SHIFT.' ON '.SHIFT_ID.'='.EMP_SFT_SHIFT.''.RET;	  		$and = "WHERE".RET; 				if($array[EMP_SFT_ID] != "") {			$qry .= $and.EMP_SFT_ID." = '".$array[EMP_SFT_ID]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_EMPLOYEE] != "") {			$qry .= $and.EMP_SFT_EMPLOYEE." = '".$array[EMP_SFT_EMPLOYEE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_SHIFT] != "") {			$qry .= $and.EMP_SFT_SHIFT." = '".$array[EMP_SFT_SHIFT]."'".RET;			$and = "AND".RET;		}				if($array[SES_RESTAURANT] != "") {			$qry .= $and.chkShiftInRestaurant(EMP_SFT_SHIFT,$array[SES_RESTAURANT]).RET;			$and = "AND".RET;		}		if($array[EMP_SFT_DATE] != "") {			//$qry .= $and.EMP_SFT_DATE." = '".$array[EMP_SFT_DATE]."'".RET;			$qry .= $and."DATE(".EMP_SFT_DATE.") = '".date('Y-m-d',strtotime($array[EMP_SFT_DATE]))."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_TABLES] != "") {			//$qry .= $and.EMP_SFT_TABLES." = '".$array[EMP_SFT_TABLES]."'".RET;			//$qry .= $and."FIND_IN_SET(`".EMP_SFT_TABLES."`,'".$array[EMP_SFT_TABLES]."')".RET;			//$qry .= $and."FIND_IN_SET('".$array[EMP_SFT_TABLES]."', `".EMP_SFT_TABLES."`)".RET; 			$qry .= $and.EMP_SFT_ID." IN (SELECT ".EMP_SFT_TBL_EMPLOYEESHIFT." FROM ".TBL_EMP_SHIFT_TABLE." WHERE ".EMP_SFT_TBL_TABLE." = ".$array[EMP_SFT_TABLES]." ".(is_gt_zero_num($get_live_only)? " AND ".EMP_SFT_TBL_START_TIME." <= '".date(TIME_FORMAT)."' AND ".EMP_SFT_TBL_END_TIME.">= '".date(TIME_FORMAT)."' " : "").")".RET; 			$and = "AND".RET;		}		if($array[EMP_SFT_START_DATE] != "") {			$qry .= $and.EMP_SFT_START_DATE." = '".$array[EMP_SFT_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_END_DATE] != "") {			$qry .= $and.EMP_SFT_END_DATE." = '".$array[EMP_SFT_END_DATE]."'".RET;			$and = "AND".RET;		}				if(is_not_empty($array['emp_sft_from_dt']) && is_not_empty($array['emp_sft_to_dt'])) {			 $qry .= $and.EMP_SFT_DATE." >= '".date(DAY_FORMAT,strtotime($array['emp_sft_from_dt']))."' AND ".EMP_SFT_DATE." <= '".date(DAY_FORMAT,strtotime($array['emp_sft_to_dt']))."'".RET;			 			$and = "AND".RET;		}				if(is_gt_zero_num($array["isActive"])) {			$qry .= $and.$tbl_emp_shift_assignment_active_condition;;			$and = "AND".RET;		}				if(is_gt_zero_num($array['isActiveSchedule'])) {			$qry .= $and."DATE(".EMP_SFT_DATE.") >= '".date('Y-m-d')."'".RET;			$and = "AND".RET;		}				if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		$qry .=" ORDER BY ".$array[SORT_ON]." ".$array[SORT_BY];		}		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];		}else{			$qry_with_limit  = $qry;		}	   //echo "qry_with_limit=$qry_with_limit<br>";		//exit;		 //echo $qry.'<hr/>';		$result = mysql_query ($qry_with_limit);		$r1 = mysql_query($qry);		if($r1){			$result_found = mysql_num_rows($r1);		} 	  		$class_objects = array();		if($result) {			while ($record = mysql_fetch_assoc($result)) {				//..get only live table only..fetch from shift tables 				//if($get_live_only==1){					$output= tbl_emp_shift_table::getLiveTablesOnly($record[EMP_SFT_ID],$get_live_only);					if(is_not_empty($output)){						$record['tables'] =$output['table_ids'];						$record['table_list']=$output['table_names'];					}									//}								$isActive= chk_if_record_active($record[TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE]);				/*//..check deactive date is not set or 0				if((is_not_empty($record[TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE]))== false)){					$isActive = 1; 				}else{					//..check the deactive date is greater than todays date					if(strtotime($record[TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){						$isActive = 1;					}				}*/				if($isArray){					$class_object = array();					$class_object['emp_sft_id']=$record[EMP_SFT_ID];					$class_object['emp_sft_employee']=$record[EMP_SFT_EMPLOYEE];					$class_object['emp_sft_shift']=$record[EMP_SFT_SHIFT];					$class_object['emp_sft_date']=$record[EMP_SFT_DATE];					$class_object['emp_sft_tables']=$record['tables'];					$class_object['emp_sft_start_date']=$record[EMP_SFT_START_DATE];					$class_object['emp_sft_end_date']=$record[EMP_SFT_END_DATE];					$class_object['employee_name'] = $record['employee_name'];					$class_object['tables_arr'] =  biz_explode(',',$record['tables']);					$class_object['table_list'] = $record['table_list'];					$class_object['shift_name'] = $record['shift_name'];							$class_object['shift_start_time'] = $record['shift_start_time'];							$class_object['shift_end_time'] = $record['shift_start_time'];					$class_object["isActive"]=$isActive;				}else{					$class_object = new tbl_emp_shift_assignment();					$class_object->setemp_sft_id($record[EMP_SFT_ID]);					$class_object->setemp_sft_employee($record[EMP_SFT_EMPLOYEE]);					$class_object->setemp_sft_shift($record[EMP_SFT_SHIFT]);					$class_object->setemp_sft_date($record[EMP_SFT_DATE]);					$class_object->setemp_sft_tables($record[EMP_SFT_TABLES]);					$class_object->setemp_sft_start_date($record[EMP_SFT_START_DATE]);					$class_object->setemp_sft_end_date($record[EMP_SFT_END_DATE]);				}				$class_objects[$record[EMP_SFT_ID]] = $class_object;			}		}		 		return $class_objects;	}//..End readArray	public function insert() {		if($this->getemp_sft_id() != '') {			$qry  = "UPDATE ".TBL_EMP_SHIFT_ASSIGNMENT.RET."SET".RET."			".EMP_SFT_ID." = '".$this->getemp_sft_id()."',".RET."			".EMP_SFT_EMPLOYEE." = '".$this->getemp_sft_employee()."',".RET."			".EMP_SFT_SHIFT." = '".$this->getemp_sft_shift()."',".RET."			".EMP_SFT_DATE." = '".$this->getemp_sft_date()."',".RET."			".EMP_SFT_TABLES." = '".$this->getemp_sft_tables()."',".RET."			".EMP_SFT_START_DATE." = '".$this->getemp_sft_start_date()."',".RET."			".EMP_SFT_END_DATE." = '".$this->getemp_sft_end_date()."'".RET.			"WHERE ".EMP_SFT_ID." = ".$this->getemp_sft_id().RET; 			mysql_query($qry);		} else {			$qry  = "INSERT INTO ".TBL_EMP_SHIFT_ASSIGNMENT." (".RET.			"".EMP_SFT_EMPLOYEE.", ".EMP_SFT_SHIFT.", ".EMP_SFT_DATE.", ".EMP_SFT_TABLES.", ".EMP_SFT_START_DATE.", ".EMP_SFT_END_DATE.RET.				") VALUES (".RET.			"'".$this->getemp_sft_employee()."',".RET.			"'".$this->getemp_sft_shift()."',".RET.			"'".$this->getemp_sft_date()."',".RET.			"'".$this->getemp_sft_tables()."',".RET.			"'".$this->getemp_sft_start_date()."',".RET.			"'".$this->getemp_sft_end_date()."'".RET.			")".RET;			$res = mysql_query($qry);			$this->setemp_sft_id(mysql_insert_id());		}	}//..End Insert	public static function delete($array = array()) {		$qry = "DELETE".RET."FROM ".TBL_EMP_SHIFT_ASSIGNMENT.RET;		$and = "WHERE".RET;						if(1) {			$qry .= $and.chkShiftInRestaurant(EMP_SFT_SHIFT).RET;			$and = "AND".RET;		}		if($array[EMP_SFT_ID] != "") {			$qry .= $and.EMP_SFT_ID." IN (".$array[EMP_SFT_ID].")".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_EMPLOYEE] != "") {			$qry .= $and.EMP_SFT_EMPLOYEE." = '".$array[EMP_SFT_EMPLOYEE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_SHIFT] != "") {			$qry .= $and.EMP_SFT_SHIFT." = '".$array[EMP_SFT_SHIFT]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_DATE] != "") {			$qry .= $and.EMP_SFT_DATE." = '".$array[EMP_SFT_DATE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_TABLES] != "") {			$qry .= $and.EMP_SFT_TABLES." = '".$array[EMP_SFT_TABLES]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_START_DATE] != "") {			$qry .= $and.EMP_SFT_START_DATE." = '".$array[EMP_SFT_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[EMP_SFT_END_DATE] != "") {			$qry .= $and.EMP_SFT_END_DATE." = '".$array[EMP_SFT_END_DATE]."'".RET;			$and = "AND".RET;		}		$res = mysql_query($qry);		if($res){			return OPERATION_SUCCESS;		};		return OPERATION_FAIL;	}//..End Delete	public function isAlreadyThere($emp_sft_employee ,$emp_sft_shift ,$emp_sft_date ,$emp_sft_tables ,$emp_sft_start_date ,$emp_sft_end_date) {		$unique_arr = array();			//$unique_arr[EMP_SFT_ID]=$emp_sft_id;			//$unique_arr[EMP_SFT_EMPLOYEE]=$emp_sft_employee;			//$unique_arr[EMP_SFT_SHIFT]=$emp_sft_shift;			//$unique_arr[EMP_SFT_DATE]=$emp_sft_date;			//$unique_arr[EMP_SFT_TABLES]=$emp_sft_tables;			//$unique_arr[EMP_SFT_START_DATE]=$emp_sft_start_date;			//$unique_arr[EMP_SFT_END_DATE]=$emp_sft_end_date;		if(is_not_empty($unique_arr)){			return $this->readObject($unique_arr);		}		return false;	}//..isAlreadyThere	public function create($emp_sft_employee ,$emp_sft_shift ,$emp_sft_date ,$emp_sft_tables ,$emp_sft_start_date ,$emp_sft_end_date) {		if(is_not_empty($emp_sft_employee)){			if($this->isAlreadyThere($emp_sft_employee ,$emp_sft_shift ,$emp_sft_date ,$emp_sft_tables ,$emp_sft_start_date ,$emp_sft_end_date)){				return OPERATION_DUPLICATE;			}else{				$this->setemp_sft_id("");				$this->setemp_sft_employee($emp_sft_employee);				$this->setemp_sft_shift($emp_sft_shift);				$this->setemp_sft_date($emp_sft_date);				//$this->setemp_sft_tables($emp_sft_tables);				$this->setemp_sft_start_date(date(DATE_FORMAT));				$this->insert();				$emp_sft_id = $this->getemp_sft_id();				if(is_not_empty($emp_sft_tables)){					tbl_emp_shift_table::bulk_insert($emp_sft_id,$emp_sft_tables);				}				return $emp_sft_id;			}		}		return OPERATION_FAIL;	}//..create	public function update($emp_sft_id, $emp_sft_employee, $emp_sft_shift, $emp_sft_date, $emp_sft_tables, $emp_sft_start_date, $emp_sft_end_date) {		if(is_gt_zero_num($emp_sft_id)){			if ($this->readObject(array(EMP_SFT_ID=>$emp_sft_id))){				$this->setemp_sft_employee($emp_sft_employee);				$this->setemp_sft_shift($emp_sft_shift);				$this->setemp_sft_date($emp_sft_date);				//$this->setemp_sft_tables($emp_sft_tables);				if(is_not_empty($emp_sft_tables)){					tbl_emp_shift_table::bulk_insert($emp_sft_id,$emp_sft_tables);				}				$this->insert();				return OPERATION_SUCCESS;			}		}		return OPERATION_FAIL;	}//..update	public function activate($emp_sft_id){		if(is_gt_zero_num($emp_sft_id)){			if ($this->readObject(array(EMP_SFT_ID=>$emp_sft_id))){				$qry  = "UPDATE ".TBL_EMP_SHIFT_ASSIGNMENT.RET."SET".RET."			".TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE." = '".date(EMPTY_DATE_FORMAT)."' WHERE ".EMP_SFT_ID."={$emp_sft_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end activate	public function deactivate($emp_sft_id){		if(is_gt_zero_num($emp_sft_id)){			if ($this->readObject(array(EMP_SFT_ID=>$emp_sft_id))){				$qry  = "UPDATE ".TBL_EMP_SHIFT_ASSIGNMENT.RET."SET".RET."			".TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE." = '".date(DATE_FORMAT)."' WHERE ".EMP_SFT_ID."={$emp_sft_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end deactivate	public static function GetInfo($emp_sft_id) {		$info = array();		if($emp_sft_id != ''){			$obj_tbl_emp_shift_assignment = new tbl_emp_shift_assignment();			if($obj_tbl_emp_shift_assignment->readObject(array('emp_sft_id'=>$emp_sft_id))){				$info['emp_sft_id']=$obj_tbl_emp_shift_assignment->getemp_sft_id();				$info['emp_sft_employee']=$obj_tbl_emp_shift_assignment->getemp_sft_employee();				$info['emp_sft_shift']=$obj_tbl_emp_shift_assignment->getemp_sft_shift();				$info['emp_sft_date']=$obj_tbl_emp_shift_assignment->getemp_sft_date();				$info['emp_sft_tables']=$obj_tbl_emp_shift_assignment->getemp_sft_tables();				$info['tables_arr']=biz_explode(',',$obj_tbl_emp_shift_assignment->getemp_sft_tables()); 				$info['table_list']=$obj_tbl_emp_shift_assignment->table_list; 				$info['employee_name']=$obj_tbl_emp_shift_assignment->employee_name; 				$info['shift_name'] = $obj_tbl_emp_shift_assignment->emp_shift_title;				$info['shift_start_time'] = $obj_tbl_emp_shift_assignment->emp_shift_start_time;				$info['shift_end_time'] = $obj_tbl_emp_shift_assignment->emp_shift_end_time;				$info['emp_sft_start_date']=$obj_tbl_emp_shift_assignment->getemp_sft_start_date();				$info['emp_sft_end_date']=$obj_tbl_emp_shift_assignment->getemp_sft_end_date();				$info['isActive']= chk_if_record_active($info['emp_sft_end_date']); 			}		unset($obj_tbl_emp_shift_assignment);		return $info;		}	}//..End GetInfo	public static function GetFields($data){		global $tbl_emp_shift_assignment_active_condition;		$arr = array();		if(is_not_empty($data)){			$qry ="SELECT ".$data['key_field'].",".$data['value_field']." FROM ".TBL_EMP_SHIFT_ASSIGNMENT."";			if(is_gt_zero_num($data['isActive'])){				$qry .= " WHERE ".$tbl_emp_shift_assignment_active_condition;			}			$res = mysql_query($qry); 			if($res){				while($row=mysql_fetch_assoc($res)){					$arr[$row[$data['key_field']]] = $row[$data['value_field']];				}			}		}		return $arr;	}//.. End of GetFields	  /**	* Update the list of employees with the shifts	* @param integer $shift	* @param date $date	* @param string $employees(optional) if empty then it will clear existing employee records from that shift & date	* @return boolean 	*/ 	public static function updateBulkEmployees($shift,$date,$employees=""){ 		if(is_gt_zero_num($shift) && isValidDate($date)){				$search_arr = array(EMP_SFT_SHIFT=>$shift,EMP_SFT_DATE=>$date,SES_RESTAURANT=>$_SESSION[SES_RESTAURANT]);  				 // check employees for updating 				 if(is_not_empty($employees)){				 		// split the employees string to array						$emp_arr = explode(',',$employees); 						$emp_arr = array_filter($emp_arr);										 		// get the previous records for the shift & date				 		$info =  self::readArray($search_arr);						$new_emp = array();						// assign each employee to emp arr 						foreach ($emp_arr as $emp){							$new_emp[$emp] = $emp; //mk key and value same						}						$del_emp_shift = array();						foreach($info as $key=>$val){							// chk the employee in the list							if(in_array($val[EMP_SFT_EMPLOYEE],$emp_arr)){								  //..if found remove from the new list							    unset($new_emp[$val[EMP_SFT_EMPLOYEE]]);							}else{								  //..if not found add shift to delete qry									$del_emp_shift[]  = $key;							}						}  						//.. Insert New Employees						if(is_not_empty($new_emp)){							$prm = array();							foreach($new_emp as $emp_id){								$prm[]= '('.$emp_id.','.$shift.',\''.$date.'\',NOW())';							}							if(is_not_empty($prm)){								$ins_qry = 'INSERT INTO '.TBL_EMP_SHIFT_ASSIGNMENT.' ('.RET.''.EMP_SFT_EMPLOYEE.', '.EMP_SFT_SHIFT.', '.EMP_SFT_DATE.', '.EMP_SFT_START_DATE.') VALUES '.implode(',',$prm).';';								mysql_query($ins_qry); 							} 						} 					 //..delete the shifts 					if(is_not_empty($del_emp_shift)){						$lst_to_del = implode(',',$del_emp_shift);						self::delete(array(EMP_SFT_ID=>$lst_to_del)); 					}										 }else{				 	// Now clear all records for shift & date				 	 self::delete($search_arr); 				 }				 return OPERATION_SUCCESS;		} 		return OPERATION_FAIL; 	}		 	/**  *Return the list of table by shift & date	* @param integer $shift (optional)	* @param date $date (optional)	* @return string 	*/   	public static function getTablesForShiftDate($shift,$date){ 		$lst = '';		if(is_not_empty($date) && is_gt_zero_num($shift)){			//$res = mysql_query('SELECT GROUP_CONCAT(emp_sft_tables) FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' WHERE '.chkShiftInRestaurant(EMP_SFT_SHIFT).' AND '.EMP_SFT_DATE.'=\''.$date.'\'  AND '.EMP_SFT_SHIFT.'='.$shift);			$lst = DB::ExecScalarQry('SELECT GROUP_CONCAT('.EMP_SFT_TBL_TABLE.') FROM '.TBL_EMP_SHIFT_TABLE.' WHERE '.EMP_SFT_TBL_EMPLOYEESHIFT.' IN (SELECT '.EMP_SFT_ID.' FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' WHERE '.chkShiftInRestaurant(EMP_SFT_SHIFT).' AND '.EMP_SFT_DATE.'=\''.$date.'\'  AND '.EMP_SFT_SHIFT.'='.$shift.')');  		} 		return $lst;	}   	/**	* Copy all the employee shift records from source date to desired date	* @param date source_dates	* @param date desired_dates	* @param boolean force_delete (optional)  for deleteing available records of the desired date   	* @return boolean	*/		public static function copy_emp_shft_byDay($source_dates,$desired_dates,$force_delete =0,$employee=0,$shift=0){		$is_success=0;		if(is_not_empty($source_dates) && is_not_empty($desired_dates)){			if(is_array($source_dates)==false){ 				$source_dates = array($source_dates);			}			if(is_array($desired_dates)==false){				$desired_dates = array($desired_dates);			}			$sql_qry = array();		} 		/*		print_r($source_dates);		print_r($desired_dates);		exit; 		*/				foreach($source_dates as $key=>$source_date){						$desire_date = date(DAY_FORMAT, strtotime($desired_dates[$key]));  			$source_date = date(DAY_FORMAT, strtotime($source_date));			if(isValidDate($desire_date)&& isValidDate($source_date)){				 				//..default search criteria				$search_arr = array(EMP_SFT_DATE=>$desire_date,SES_RESTAURANT=>$_SESSION[SES_RESTAURANT]);											//delete previous records if force delete is on 				if($force_delete){					self::delete($search_arr);					tbl_emp_shift_table::delete($search_arr);				}								//.. check records 				$info = self::readArray($search_arr,$res,1) ;				 				if(is_not_empty($info)){ 					//.. if records exist then donot insert the code				}else{					 					try{ 							$res =	 DB::ExecNonQry('INSERT INTO `tbl_emp_shift_assignment` (`emp_sft_employee`,`emp_sft_shift`,`emp_sft_date`,`emp_sft_tables`,`emp_sft_start_date`) SELECT  t.`emp_sft_employee`,t.`emp_sft_shift`, \''.$desire_date.'\' ,t.`emp_sft_tables`, \''.date(DATE_FORMAT).'\' FROM `tbl_emp_shift_assignment`  t WHERE '.chkShiftInRestaurant('t.`emp_sft_shift`').' AND  t.`emp_sft_date`=\''.$source_date.'\' '.(is_gt_zero_num($shift)?' AND t.`emp_sft_shift`='.$shift.'':'').' '.(is_gt_zero_num($employee)?' AND t.`emp_sft_employee`='.$employee.'':'').';');  					    if($res){								DB::ExecNonQry('								INSERT INTO `tbl_emp_shift_table` 								( `emp_sft_tbl_employeeshift`, `emp_sft_tbl_table`,`emp_sft_tbl_start_time`,`emp_sft_tbl_end_time` )  								SELECT 								 (									SELECT j.emp_sft_id 									FROM  `tbl_emp_shift_assignment` j 									WHERE 										j.emp_sft_shift = t.emp_sft_shift 										AND j.emp_sft_date = \''.$desire_date.'\' 										AND j.`emp_sft_employee`= t.emp_sft_employee 								 ) `emp_shift`, 								 tp.`emp_sft_tbl_table`, 								 s.shift_start_time, s.shift_end_time 								FROM 								`tbl_emp_shift_assignment` t 								RIGHT OUTER JOIN  								`tbl_emp_shift_table` tp  								ON t.`emp_sft_id` = tp.`emp_sft_tbl_employeeshift` 								LEFT OUTER JOIN   								`tbl_shift` s 								ON s.`shift_id` = t.`emp_sft_shift` 								WHERE tp.`emp_sft_tbl_istransfer`=0 								AND '.chkShiftInRestaurant('t.`emp_sft_shift`').'								AND t.`emp_sft_date`=\''.$source_date.'\' '.(is_gt_zero_num($shift)?' AND t.`emp_sft_shift`='.$shift.'':'').' '.(is_gt_zero_num($employee)?' AND t.`emp_sft_employee`='.$employee.'':'').';');								//return $res; 								//break ;							}												}catch (Exception $e) {     						echo 'Caught exception: ',  $e->getMessage(), "\n"; 					}									}				$is_success=1;							}  		} 		return $is_success; 		/*$qry = implode(NL,$sql_qry);*/	 		/*if(is_not_empty($qry)){			$res = mysql_query($qry);			if($res){				return true;			} 		} */	 		}		/**    * cancel the employee shifts assigned to particular employee	*/   	public static function cancelShiftsAssigned($emp){		if(is_not_empty($emp) && is_gt_zero_num($emp)){						$res = mysql_query('DELETE FROM '.TBL_EMP_SHIFT_ASSIGNMENT.' WHERE '.chkShiftInRestaurant(EMP_SFT_SHIFT).' AND DATE('.EMP_SFT_DATE.') >=\''.date('Y-m-d').'\'  AND '.EMP_SFT_EMPLOYEE.'='.$emp);			 			if($res){				return 1;			}		}				return 0;	} 		/**	* Check Employee is within current shift	* @param int $emp_id	* @param int $isLogin	* @return int	*/ 	public function checkEmployeeWithinShift($emp_id=0,$isLogin=1){ 		$val = OPERATION_FAIL;				$curr_shift = tbl_shift::getCurrentShift();		$curr_day = date(DAY_FORMAT);		//..Check if employee is in the shift		if(is_gt_zero_num($emp_id) && is_gt_zero_num($curr_shift) && is_not_empty($curr_day)){			if($this->readObject(array(EMP_SFT_DATE=>$curr_day,EMP_SFT_SHIFT=>$curr_shift,EMP_SFT_EMPLOYEE=>$emp_id,SES_RESTAURANT=>$_SESSION[SES_RESTAURANT]))){				$val = OPERATION_SUCCESS;					return $val;						} 		}				//..Condition to check only schedules		if(is_gt_zero_num($curr_shift) && is_not_empty($curr_day)){						if($this->readObject(array(EMP_SFT_DATE=>$curr_day,EMP_SFT_SHIFT=>$curr_shift,SES_RESTAURANT=>$_SESSION[SES_RESTAURANT],'check_tables_there'=>1))){								$val = OPERATION_SUCCESS;				return $val;				} 		}		 		//..Exception for the login check only before 10 mins allowed		if($isLogin && ($val == OPERATION_FAIL)){			 $timeTocheck = date('H:i:s',strtotime('+ 10 minutes'));			 $curr_shift = tbl_shift::getCurrentShift($timeTocheck);	  			 if(is_gt_zero_num($emp_id) && is_gt_zero_num($curr_shift) && is_not_empty($curr_day)){			 			if($this->readObject(array(EMP_SFT_DATE=>$curr_day,EMP_SFT_SHIFT=>$curr_shift,EMP_SFT_EMPLOYEE=>$emp_id,SES_RESTAURANT=>$_SESSION[SES_RESTAURANT]))){				$val = OPERATION_SUCCESS;				return val;					} 			}		} 		return $val;	}  		/**	* Get Shift Table wise Employee list	* @param int $result_found 	* @return 	*/ 	public static function GetShiftEmployeeTablewise($array = array(),&$result_found=0){ 			$tbl_lst=array();			//..Get the live shift based on the current time			$live_shift=GetLiveShift();				$live_shift_id=implode(',', array_keys($live_shift));					$qry = 'SELECT `emp_sft_id`,`emp_sft_tbl_id`,`emp_sft_employee`,`emp_sft_tbl_table`,`table_number`,`emp_sft_employee`, CONCAT(`staff_fname`,\' \', `staff_lname`) `employee_name` 							FROM `tbl_emp_shift_assignment`  							LEFT OUTER JOIN `tbl_emp_shift_table`  							ON `emp_sft_tbl_employeeshift`=`tbl_emp_shift_assignment`.`emp_sft_id` 							LEFT OUTER JOIN `tbl_staff`  							ON `emp_sft_employee`=`staff_member_id`							LEFT OUTER JOIN `tbl_dining_table` 							ON `emp_sft_tbl_table` = `table_id` 							WHERE `emp_sft_shift`='.$live_shift_id.' AND `emp_sft_date`=\''.date('Y-m-d').'\'  AND `'.EMP_SFT_TBL_START_TIME.'` <= \''.date(TIME_FORMAT).'\'  AND `'.EMP_SFT_TBL_END_TIME.'` >= \''.date(TIME_FORMAT).'\'  							GROUP BY `emp_sft_tbl_table`';				if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];		}else{			$qry_with_limit  = $qry;		}							$result = mysql_query ($qry_with_limit);		$r1 = mysql_query($qry);		if($r1){			$result_found = mysql_num_rows($r1);		} 					  		if (($result)&&(mysql_num_rows($result)> 0)){			   while ($row = mysql_fetch_assoc($result)) {			 		$tbl_lst[]=$row; 			}		}		return $tbl_lst;						}	/**	* Deactivate/Activate all EmployeeShifts By shifts acivation/deactivation.	* @param integer $shift	* @param integer $isActivate 	* @return boolean	*/	public static function mkActiveDeactiveByShift($shift,$isActivate=0){		 if(is_gt_zero_num($shift)){		 	if(is_gt_zero_num($isActivate)){				$qry  = 'UPDATE '.TBL_EMP_SHIFT_ASSIGNMENT.RET.'SET'.RET.' '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' = \''.date(EMPTY_DATE_FORMAT).'\' WHERE '.EMP_SFT_SHIFT.'='.$shift;			}else{				$qry  = 'UPDATE '.TBL_EMP_SHIFT_ASSIGNMENT.RET.'SET'.RET.' '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' = \''.date(DATE_FORMAT).'\' WHERE '.EMP_SFT_SHIFT.'='.$shift;			}				return DB::ExecNonQry($qry);		 }	}		/**	* Deactivate/Activate all EmployeeShifts By Employee acivation/deactivation.	* @param integer $shift	* @param integer $isActivate 	* @return boolean	*/	public static function mkActiveDeactiveByEmployee($employee,$isActivate=0){		 if(is_gt_zero_num($employee)){		 	if(is_gt_zero_num($isActivate)){				$qry  = 'UPDATE '.TBL_EMP_SHIFT_ASSIGNMENT.RET.'SET'.RET.' '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' = \''.date(EMPTY_DATE_FORMAT).'\' WHERE '.EMP_SFT_EMPLOYEE.'='.$employee;			}else{				$qry  = 'UPDATE '.TBL_EMP_SHIFT_ASSIGNMENT.RET.'SET'.RET.' '.TBL_EMP_SHIFT_ASSIGNMENT_DEACTIVE_DATE.' = \''.date(DATE_FORMAT).'\' WHERE '.EMP_SFT_EMPLOYEE.'='.$employee;			}				return DB::ExecNonQry($qry);		 }	}	}//..End tbl_emp_shift_assignment?>