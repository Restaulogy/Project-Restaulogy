<?php/**********************************************************************tbl_shift.class.phpGenerated by STRUCTY 2013.03.19 11:42:11.Copyright 2011 Structy, Frédéric Aebi. All rights reserved.**********************************************************************/define('TBL_SHIFT', 'tbl_shift'); define('SHIFT_ID', 'shift_id'); define('SHIFT_NAME', 'shift_name'); define('SHIFT_START_TIME', 'shift_start_time'); define('SHIFT_END_TIME', 'shift_end_time'); define('SHIFT_CREATED_ON', 'shift_created_on'); define('SHIFT_TERMINATED_ON', 'shift_terminated_on');define('SHIFT_RESTAURENT', 'shift_restaurent');  define('TBL_SHIFT_ACTIVE_DATE', 'shift_created_on');define('TBL_SHIFT_DEACTIVE_DATE', 'shift_terminated_on');$tbl_shift_active_condition= '('.TBL_SHIFT_ACTIVE_DATE.' <= NOW()) AND ('.TBL_SHIFT_DEACTIVE_DATE.' is NULL OR '.TBL_SHIFT_DEACTIVE_DATE.' = 0 OR '.TBL_SHIFT_DEACTIVE_DATE.' > NOW() ) ';class tbl_shift {	private $shift_id;	private $shift_name;	private $shift_start_time;	private $shift_end_time;	private $shift_created_on;	private $shift_terminated_on;	private $tbl_shift_active_date;	private $tbl_shift_deactive_date;	private $shift_restaurent;		public function setshift_id($pArg='0') {$this->shift_id=$pArg;}	public function setshift_name($pArg='0') {$this->shift_name=$pArg;}	public function setshift_start_time($pArg='0') {$this->shift_start_time=$pArg;}	public function setshift_end_time($pArg='0') {$this->shift_end_time=$pArg;}	public function setshift_created_on($pArg='0') {$this->shift_created_on=$pArg;}	public function setshift_terminated_on($pArg='0') {$this->shift_terminated_on=$pArg;}	public function setshift_restaurent($pArg='0') {$this->shift_restaurent=$pArg;}	public function settbl_shift_active_date($pArg='0') {$this->tbl_shift_active_date=$pArg;}	public function settbl_shift_deactive_date($pArg='0') {$this->tbl_shift_deactive_date=$pArg;}	public function getshift_id() {return $this->shift_id;}	public function getshift_name() {return $this->shift_name;}	public function getshift_start_time() {return $this->shift_start_time;}	public function getshift_end_time() {return $this->shift_end_time;}	public function getshift_created_on() {return $this->shift_created_on;}	public function getshift_terminated_on() {return $this->shift_terminated_on;}	public function getshift_restaurent() {return $this->shift_restaurent;}	public function gettbl_shift_active_date() {return $this->tbl_shift_active_date;}	public function gettbl_shift_deactive_date() {return $this->tbl_shift_deactive_date;}	public function readObject($array = array()) {		$qry = "SELECT *".RET."FROM ".TBL_SHIFT.RET;		$and = "WHERE".RET;		if($array[SHIFT_ID] != "") {			$qry .= $and.SHIFT_ID." = '".$array[SHIFT_ID]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_NAME] != "") {			$qry .= $and.SHIFT_NAME." = '".$array[SHIFT_NAME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_START_TIME] != "") {			$qry .= $and.SHIFT_START_TIME." = '".$array[SHIFT_START_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_END_TIME] != "") {			$qry .= $and.SHIFT_END_TIME." = '".$array[SHIFT_END_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_CREATED_ON] != "") {			$qry .= $and.SHIFT_CREATED_ON." = '".$array[SHIFT_CREATED_ON]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_TERMINATED_ON] != "") {			$qry .= $and.SHIFT_TERMINATED_ON." = '".$array[SHIFT_TERMINATED_ON]."'".RET;			$and = "AND".RET;		}				if($array[SHIFT_RESTAURENT] != "") {			$qry .= $and.SHIFT_RESTAURENT." = '".$array[SHIFT_RESTAURENT]."'".RET;			$and = "AND".RET;		}				if($array['not_shift_id'] != "") {			$qry .= $and.SHIFT_ID." <> ".$array['not_shift_id']."".RET;			$and = "AND".RET;		}	$result = mysql_query($qry);		if($result) {			while ($row = mysql_fetch_array($result)) {				$record = $row;				break;//end after first record			}			if(count($record[0]) == 0) {				return array();			} else {				$this->setshift_id($record[SHIFT_ID]);				$this->setshift_name($record[SHIFT_NAME]);				$this->setshift_start_time($record[SHIFT_START_TIME]);				$this->setshift_end_time($record[SHIFT_END_TIME]);				$this->setshift_created_on($record[SHIFT_CREATED_ON]);				$this->setshift_terminated_on($record[SHIFT_TERMINATED_ON]);				$this->settbl_shift_active_date($record[TBL_SHIFT_ACTIVE_DATE]);				$this->settbl_shift_deactive_date($record[TBL_SHIFT_DEACTIVE_DATE]);				$this->setshift_restaurent($record[SHIFT_RESTAURENT]);				return true;			}		}	}	public static function readArray($array = array(),&$result_found=0,$isArray=1,$ck_weekdys_avail=0,$dt_to_ck=NULL,$get_live_only=0) {			global $tbl_shift_active_condition;		$qry = "SELECT *".RET."FROM ".TBL_SHIFT.RET;		$and = "WHERE".RET;				if(is_null($dt_to_ck)){			$dt_to_ck=date(DATE_FORMAT);					}		if($array[SHIFT_ID] != "") {			$qry .= $and.SHIFT_ID." = '".$array[SHIFT_ID]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_NAME] != "") {			$qry .= $and.SHIFT_NAME." = '".$array[SHIFT_NAME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_START_TIME] != "") {			$qry .= $and.SHIFT_START_TIME." = '".$array[SHIFT_START_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_END_TIME] != "") {			$qry .= $and.SHIFT_END_TIME." = '".$array[SHIFT_END_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_CREATED_ON] != "") {			$qry .= $and.SHIFT_CREATED_ON." = '".$array[SHIFT_CREATED_ON]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_TERMINATED_ON] != "") {			$qry .= $and.SHIFT_TERMINATED_ON." = '".$array[SHIFT_TERMINATED_ON]."'".RET;			$and = "AND".RET;		}				if($get_live_only==1){			$qry .= $and.SHIFT_START_TIME." <= '".date("H:i:s")."' AND ".SHIFT_END_TIME.">= '".date("H:i:s")."'".RET;			$and = "AND".RET;					}				if($array[SHIFT_RESTAURENT] != "") {			$qry .= $and.SHIFT_RESTAURENT." = '".$array[SHIFT_RESTAURENT]."'".RET;			$and = "AND".RET;		} 		if(is_gt_zero_num($array["isActive"])) {			$qry .= $and.$tbl_shift_active_condition;;			$and = "AND".RET;		}		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];		}else{			$qry_with_limit  = $qry;		}		// echo "qry_with_limit=$qry_with_limit";		$result = mysql_query ($qry_with_limit);		$r1 = mysql_query($qry);		$result_found = mysql_num_rows($r1);		$class_objects = array();		if($result) {			while ($record = mysql_fetch_assoc($result)) {				$isActive= 0;				//if($record[TBL_SHIFT_ACTIVE_DATE]>=date(DATE_FORMAT)){				if((is_not_empty($record[TBL_SHIFT_DEACTIVE_DATE])==false)|| ($record[TBL_SHIFT_DEACTIVE_DATE]==EMPTY_DATE_FORMAT)|| ($record[TBL_SHIFT_DEACTIVE_DATE]==0) || ((strtotime($record[TBL_SHIFT_ACTIVE_DATE])<strtotime("now")) && (strtotime($record[TBL_SHIFT_DEACTIVE_DATE])>strtotime("now")))) {						$isActive = 1;				}				//echo "i am out [".$record[TBL_SHIFT_ACTIVE_DATE]." - ".$record[TBL_SHIFT_DEACTIVE_DATE]."]<br>";				/*				if(strtotime($record[TBL_SHIFT_ACTIVE_DATE])>=strtotime(date(DATE_FORMAT))){					if((is_not_empty($record[TBL_SHIFT_DEACTIVE_DATE])==false)|| ($record[TBL_SHIFT_DEACTIVE_DATE]==EMPTY_DATE_FORMAT)|| ($record[TBL_SHIFT_DEACTIVE_DATE]==0) || (is_gt_zero_num(strtotime($record[TBL_SHIFT_DEACTIVE_DATE])== false))){						$is_active=1;							}else{											//..check the deactive date is greater than todays date						if(strtotime($endDate) > strtotime(date(DATE_FORMAT))){							$is_active = 1;						}					}					}					*/				//$isActive=chk_if_record_active($record[TBL_SHIFT_DEACTIVE_DATE]);				 				//..Logic to fetch only weekdays availability 				 if($ck_weekdys_avail==1){ 					$objtbl_shift_weekdays=new tbl_shift_weekdays();					$cor_weekDay_rec=$objtbl_shift_weekdays->GetShiftInfo($record[SHIFT_ID]);					if(is_not_empty($cor_weekDay_rec)){						$todays_day=strtolower(date("l",strtotime($dt_to_ck)));						if(strtoupper($cor_weekDay_rec["sft_wkdy_{$todays_day}"])=="N"){							continue;						} 					}					unset($objtbl_shift_weekdays);				 } 				/*				$isActive= 0;				//..check deactive date is not set or 0				if(chk_empty_date($record[TBL_SHIFT_DEACTIVE_DATE])){					$isActive = 1; 				}else{										//..check the deactive date is greater than todays date					if(strtotime($record[TBL_SHIFT_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){						$isActive = 1;					}				}				*/								if($isArray){					$class_object = array();					$class_object['shift_id']=$record[SHIFT_ID];					$class_object['shift_name']=$record[SHIFT_NAME];					$class_object['shift_start_time']=$record[SHIFT_START_TIME];					$class_object['shift_end_time']=$record[SHIFT_END_TIME];					$class_object['shift_created_on']=$record[SHIFT_CREATED_ON];					$class_object['shift_terminated_on']=$record[SHIFT_TERMINATED_ON];					$class_object[SHIFT_RESTAURENT] = $record[SHIFT_RESTAURENT];					 					$class_object['isActive']=$isActive;				}else{					$class_object = new tbl_shift();					$class_object->setshift_id($record[SHIFT_ID]);					$class_object->setshift_name($record[SHIFT_NAME]);					$class_object->setshift_start_time($record[SHIFT_START_TIME]);					$class_object->setshift_end_time($record[SHIFT_END_TIME]);					$class_object->setshift_created_on($record[SHIFT_CREATED_ON]);					$class_object->setshift_terminated_on($record[SHIFT_TERMINATED_ON]);					$class_object->setshift_restaurent($record[SHIFT_RESTAURENT]);					 				}				$class_objects[$record[SHIFT_ID]] = $class_object;			}		}		return $class_objects;	}//..End readArray	public function insert() {		if($this->getshift_id() != '') {			$qry  = "UPDATE ".TBL_SHIFT.RET."SET".RET."			".SHIFT_ID." = '".$this->getshift_id()."',".RET."			".SHIFT_NAME." = '".$this->getshift_name()."',".RET."			".SHIFT_START_TIME." = '".$this->getshift_start_time()."',".RET."			".SHIFT_END_TIME." = '".$this->getshift_end_time()."',".RET."			".SHIFT_CREATED_ON." = '".$this->getshift_created_on()."',".RET."						".SHIFT_TERMINATED_ON." = '".$this->getshift_terminated_on()."'".RET.			"WHERE ".SHIFT_ID." = ".$this->getshift_id().RET;		/*".SHIFT_RESTAURENT." = '".$this->getshift_restaurent()."',".RET." */			mysql_query($qry);		} else {			$qry  = "INSERT INTO ".TBL_SHIFT." (".RET.			"".SHIFT_NAME.", ".SHIFT_START_TIME.", ".SHIFT_END_TIME.", ".SHIFT_RESTAURENT.", ".SHIFT_CREATED_ON.", ".SHIFT_TERMINATED_ON.RET.				") VALUES (".RET.			"'".$this->getshift_name()."',".RET.			"'".$this->getshift_start_time()."',".RET.			"'".$this->getshift_end_time()."',".RET.			"'".$this->getshift_restaurent()."',".RET.			"'".$this->getshift_created_on()."',".RET.			"'".$this->getshift_terminated_on()."'".RET. 			")".RET;			$res = mysql_query($qry);			$this->setshift_id(mysql_insert_id());		}	}//..End Insert	public static function delete($array = array()) {		$qry = "DELETE".RET."FROM ".TBL_SHIFT.RET;		$and = "WHERE".RET;		if($array[SHIFT_ID] != "") {			//$qry .= $and.SHIFT_ID." = '".$array[SHIFT_ID]."'".RET;			$qry .= $and.SHIFT_ID." IN (".$array[SHIFT_ID].")".RET;			$and = "AND".RET;		}		if($array[SHIFT_NAME] != "") {			$qry .= $and.SHIFT_NAME." = '".$array[SHIFT_NAME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_START_TIME] != "") {			$qry .= $and.SHIFT_START_TIME." = '".$array[SHIFT_START_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_END_TIME] != "") {			$qry .= $and.SHIFT_END_TIME." = '".$array[SHIFT_END_TIME]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_CREATED_ON] != "") {			$qry .= $and.SHIFT_CREATED_ON." = '".$array[SHIFT_CREATED_ON]."'".RET;			$and = "AND".RET;		}		if($array[SHIFT_TERMINATED_ON] != "") {			$qry .= $and.SHIFT_TERMINATED_ON." = '".$array[SHIFT_TERMINATED_ON]."'".RET;			$and = "AND".RET;		}				if($array[SHIFT_RESTAURENT] != "") {			$qry .= $and.SHIFT_RESTAURENT." = '".$array[SHIFT_RESTAURENT]."'".RET;			$and = "AND".RET;		}		$res = mysql_query($qry);		if($res){			return OPERATION_SUCCESS;		};		return OPERATION_FAIL;	}//..End Delete	public function isAlreadyThere($shift_name ,$shift_start_time ,$shift_end_time ,$shift_restaurent,$shift_id=0) {		$unique_arr = array();			//$unique_arr[SHIFT_ID]=$shift_id;		  $unique_arr[SHIFT_NAME]=$shift_name; 			$unique_arr[SHIFT_RESTAURENT] = $shift_restaurent; 			$unique_arr['isActive'] = 1;			if(is_gt_zero_num($shift_id))  $unique_arr['not_shift_id'] = $shift_id;			$unique_arr[SHIFT_CREATED_ON]=$shift_created_on;			//$unique_arr[SHIFT_TERMINATED_ON]=$shift_terminated_on;		if(is_not_empty($unique_arr)){			$isMatched1 =  $this->readObject($unique_arr);		}			$unique_arr = array();			$unique_arr[SHIFT_START_TIME]=$shift_start_time;			$unique_arr[SHIFT_END_TIME]=$shift_end_time;			$unique_arr[SHIFT_RESTAURENT] = $shift_restaurent;			$unique_arr['isActive'] = 1;			if(is_gt_zero_num($shift_id))  $unique_arr['not_shift_id'] = $shift_id;		if(is_not_empty($unique_arr)){			$isMatched2 =  $this->readObject($unique_arr);		}	 		 		  if($isMatched1 || $isMatched2){				return true;			}			return false;	}//..isAlreadyThere	public function create($shift_name ,$shift_start_time ,$shift_end_time ,$shift_restaurent=0,$shift_created_on='',$shift_terminated_on='') {		if(is_not_empty($shift_name)){			if($this->isAlreadyThere($shift_name ,$shift_start_time ,$shift_end_time ,$shift_restaurent,$shift_created_on)){				return OPERATION_DUPLICATE;			}else{				$this->setshift_id('');				$this->setshift_name($shift_name);				$this->setshift_start_time($shift_start_time);				$this->setshift_end_time($shift_end_time);				$this->setshift_restaurent($shift_restaurent);								if(is_not_empty($shift_created_on))					$this->setshift_created_on(date(DATE_FORMAT,strtotime($shift_created_on)));				else					$this->setshift_created_on(date(DATE_FORMAT));								if(is_not_empty($shift_terminated_on))			  	$this->setshift_terminated_on(date(DATE_FORMAT,strtotime($shift_terminated_on)));										$this->insert();				return $this->getshift_id();			}		}		return OPERATION_FAIL;	}//..create	public function update($shift_id, $shift_name, $shift_start_time, $shift_end_time, $shift_restaurent=0,$shift_created_on='',$shift_terminated_on='') {		if(is_gt_zero_num($shift_id)){			if ($this->readObject(array(SHIFT_ID=>$shift_id))){		  	if($this->isAlreadyThere($shift_name ,$shift_start_time ,$shift_end_time , $this->getshift_restaurent(),$shift_id)){  					return OPERATION_DUPLICATE; 				}else{					$this->setshift_name($shift_name);					$this->setshift_start_time($shift_start_time);					$this->setshift_end_time($shift_end_time);										if(is_not_empty($shift_created_on))						$this->setshift_created_on(date(DATE_FORMAT,strtotime($shift_created_on)));					else						$this->setshift_created_on(date(DATE_FORMAT));										if(is_not_empty($shift_terminated_on))			  		$this->setshift_terminated_on(date(DATE_FORMAT,strtotime($shift_terminated_on)));												/*$this->setshift_restaurent($shift_restaurent);					$this->setshift_created_on($shift_created_on);					$this->setshift_terminated_on($shift_terminated_on);*/					$this->insert();					return OPERATION_SUCCESS;			 	}			}		}		return OPERATION_FAIL; }//..update	public function activate($shift_id){		if(is_gt_zero_num($shift_id)){			if ($this->readObject(array(SHIFT_ID=>$shift_id))){ 					$qry  = 'UPDATE '.TBL_SHIFT.RET.'SET'.RET.' '.TBL_SHIFT_DEACTIVE_DATE.' = \''.date(EMPTY_DATE_FORMAT).'\' WHERE '.SHIFT_ID.' IN ('.$shift_id.') ';				$res = mysql_query($qry);				if($res){					tbl_emp_shift_assignment::mkActiveDeactiveByShift($shift_id,1);					return 1;				}			}		}		return 0;	}//..end activate	public function deactivate($shift_id){		if(is_not_empty($shift_id)){			if ($this->readObject(array(SHIFT_ID=>$shift_id))){				$qry  = 'UPDATE '.TBL_SHIFT.RET.'SET'.RET.' '.TBL_SHIFT_DEACTIVE_DATE.' = \''.date(DATE_FORMAT).'\' WHERE '.SHIFT_ID.' IN ('.$shift_id.') ';				$res = mysql_query($qry);				if($res){					tbl_emp_shift_assignment::mkActiveDeactiveByShift($shift_id,0);					return 1;				}			}		}		return 0;	}//..end deactivate	public  static function GetInfo($shift_id) {		$info = array();				if($shift_id != ''){		$obj = new tbl_shift();			if($obj->readObject(array('shift_id'=>$shift_id))){				$info['shift_id']=$obj->getshift_id();				$info['shift_name']=$obj->getshift_name();				$info['shift_start_time']=$obj->getshift_start_time();				$info['shift_end_time']=$obj->getshift_end_time();				$info['shift_created_on']=$obj->getshift_created_on();				$info['shift_terminated_on']=$obj->getshift_terminated_on();				$info[SHIFT_RESTAURENT] = $obj->getshift_restaurent();				//..Get Weekday details				$shift_weekdays_deatil= new tbl_shift_weekdays();				$shift_weekdays_deatil= $shift_weekdays_deatil->GetShiftInfo($info['shift_id']);								if(is_not_empty($shift_weekdays_deatil)){					$info['weekdays_avail']=$shift_weekdays_deatil;				}								$info['isActive'] = 0;				//..check deactive date is not set or 0				if((is_not_empty($obj->gettbl_shift_deactive_date())==false)  || (is_gt_zero_num(strtotime($obj->gettbl_shift_deactive_date()))== false)){					$info['isActive'] = 1;				}else{					//..check the deactive date is greater than todays date					if(strtotime($obj->gettbl_shift_deactive_date()) >= strtotime(date(DATE_FORMAT))){						$info['isActive'] = 1;					}				}			}				unset($obj);		}		return $info;	}//..End GetInfo		public static function GetFields($data = array()){		global $tbl_shift_active_condition;		$arr = array(); 		if(is_not_empty($data)){			$qry = "SELECT ".$data['key_field'].",".$data['value_field']." FROM ".TBL_SHIFT." WHERE shift_restaurent = ".(is_gt_zero_num($_SESSION[SES_RESTAURANT]?$_SESSION[SES_RESTAURANT]:0));			if(is_gt_zero_num($data['isActive'])){				$qry  .= " AND ".$tbl_shift_active_condition;			}			 			$res = mysql_query($qry); 			if($res){				while($row=mysql_fetch_assoc($res)){					$arr[$row[$data['key_field']]] = $row[$data['value_field']];				}			}		}		return $arr;	}			/** * return active shift for those days  * @param date $start_date * @param date $end_date * @return array $result*/ 	public static function getdayWiseShifts($start_date){		$result = array();				 $qry = 'SELECT shift_name, emp_sft_date, sft_wkdy_shift, GROUP_CONCAT( emp_sft_employee ) `employees` , GROUP_CONCAT(CONCAT(staff_fname,\' \', staff_lname) )  `full_names` FROM tbl_emp_shift_assignment RIGHT OUTER JOIN tbl_shift_weekdays ON tbl_emp_shift_assignment.emp_sft_shift = tbl_shift_weekdays.sft_wkdy_shift INNER JOIN tbl_shift ON tbl_shift_weekdays.sft_wkdy_shift = tbl_shift.shift_id left outer join tbl_staff  on tbl_emp_shift_assignment.emp_sft_employee = tbl_staff.staff_member_id  WHERE emp_sft_date BETWEEN  \''.date('Y-m-d' ,strtotime($start_date)).'\' AND  \''.date('Y-m-d' ,strtotime($end_date)).'\' AND '.SHIFT_RESTAURENT.'='.$_SESSION[SES_RESTAURANT].' GROUP BY emp_sft_date, sft_wkdy_shift';		 		$res = mysql_query($qry); 		$info = array();		if($res){			while($row = mysql_fetch_assoc($res)){				$info[$row["emp_sft_date"]][$row[SFT_WKDY_SHIFT]] = $row;			}		}  		 		 $weekdayinfo = self::readArray(array(),$res,1);		// convert to strtotime()		$start_date = strtotime($start_date); 		$end_date = strtotime($end_date);		/*print_r($info);*/		$i = $start_date;		while($i<$end_date) {			$dt = date('d-m-y',$i);			$wk_dt =   date('Y-m-d',$i);			$day = strtolower(date('l',$i));			foreach($weekdayinfo as $key=>$val){				$result[$dt][$val[SFT_WKDY_SHIFT]]['isEnabled'] = $val["sft_wkdy_{$day}"]; 				if(is_not_empty($info[$wk_dt][$val[SFT_WKDY_SHIFT]])){					$result[$dt][$val[SFT_WKDY_SHIFT]]['employees'] = $info[$wk_dt][$val[SFT_WKDY_SHIFT]]['employees'];					$result[$dt][$val[SFT_WKDY_SHIFT]]['full_names'] = $info[$wk_dt][$val[SFT_WKDY_SHIFT]]['full_names'];				}				 			}						$i = strtotime('+1 day',$i); 		}		print_r($result);		return $result;	}	  /**	* Return current shift according to time 	* @param time $time (optional) by default will take now	* @return integer	*/ 	public static function getCurrentShift($time=NULL){		$shift_id = 0;		if(is_not_empty($time)){			$time = date('H:i:s',$time);		}else{			$time = date('H:i:s');		} 				//echo 'SELECT '.SHIFT_ID.' FROM '.TBL_SHIFT.' WHERE '.SHIFT_START_TIME.' <= \''.$time.'\' AND '.SHIFT_END_TIME.'>= \''.$time.'\' AND '.SHIFT_RESTAURENT.'='.$_SESSION[SES_RESTAURANT];		 		 $shift_id = DB::ExecScalarQry('SELECT '.SHIFT_ID.' FROM '.TBL_SHIFT.' WHERE '.SHIFT_START_TIME.' <= \''.$time.'\' AND '.SHIFT_END_TIME.'>= \''.$time.'\' AND '.SHIFT_RESTAURENT.'='.$_SESSION[SES_RESTAURANT]);		 		/*if($res){			$shift_id = mysql_result($res,0);		}*/		return $shift_id;	} }//..End tbl_shift?>