<?php/**********************************************************************tbl_sub_orders.class.phpGenerated by STRUCTY 2013.11.01 04:56:09.Copyright 2011 Structy, Frédéric Aebi. All rights reserved.**********************************************************************/define("TBL_SUB_ORDERS", "tbl_sub_orders"); define('SUB_ID', 'sub_id'); define('SUB_ORDER_ID', 'sub_order_id'); define('SUB_STATUS_ID', 'sub_status_id'); define('SUB_ROUTE', 'sub_route'); define('SUB_CONFIRMED_AT','sub_confirmed_at');define('SUB_DELAYED_AT', 'sub_delayed_at'); define('SUB_START_DATE', 'sub_start_date'); define('SUB_END_DATE', 'sub_end_date'); define("TBL_SUB_ORDERS_ACTIVE_DATE",  SUB_START_DATE);define("TBL_SUB_ORDERS_DEACTIVE_DATE",  SUB_END_DATE);$tbl_sub_orders_active_condition= " (".TBL_SUB_ORDERS_DEACTIVE_DATE." is NULL OR ".TBL_SUB_ORDERS_DEACTIVE_DATE." = 0 OR ".TBL_SUB_ORDERS_DEACTIVE_DATE." > CURDATE( )) ";class tbl_sub_orders {	private $sub_id;	private $sub_order_id;	private $sub_status_id;	private $sub_route;	private $sub_confirmed_at;	private $sub_delayed_at;	private $sub_start_date;	private $sub_end_date;	private $tbl_sub_orders_active_date;	private $tbl_sub_orders_deactive_date;	public function setsub_id($pArg="0") {$this->sub_id=$pArg;}	public function setsub_order_id($pArg="0") {$this->sub_order_id=$pArg;}	public function setsub_status_id($pArg="0") {$this->sub_status_id=$pArg;}	public function setsub_route($pArg="0") {$this->sub_route=$pArg;}	public function setsub_confirmed_at($pArg="0") {$this->sub_confirmed_at=$pArg;}	public function setsub_delayed_at($pArg="0") {$this->sub_delayed_at=$pArg;}	public function setsub_start_date($pArg="0") {$this->sub_start_date=$pArg;}	public function setsub_end_date($pArg="0") {$this->sub_end_date=$pArg;}	public function settbl_sub_orders_active_date($pArg="0") {$this->tbl_sub_orders_active_date=$pArg;}	public function settbl_sub_orders_deactive_date($pArg="0") {$this->tbl_sub_orders_deactive_date=$pArg;}	public function getsub_id() {return $this->sub_id;}	public function getsub_order_id() {return $this->sub_order_id;}	public function getsub_status_id() {return $this->sub_status_id;}	public function getsub_route() {return $this->sub_route;}	public function getsub_confirmed_at() {return $this->sub_confirmed_at;}	public function getsub_delayed_at() {return $this->sub_delayed_at;}	public function getsub_start_date() {return $this->sub_start_date;}	public function getsub_end_date() {return $this->sub_end_date;}	public function gettbl_sub_orders_active_date($pArg="0") {return $this->tbl_sub_orders_active_date;}	public function gettbl_sub_orders_deactive_date($pArg="0") {return $this->tbl_sub_orders_deactive_date;}	public function readObject($array = array()) {		$qry = "SELECT *, 		(				IFNULL( ( SELECT 					SUM( 										IFNULL(od.`ord_dtl_quantity`,0) * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-od.`ord_dtl_discount`),od.`ord_dtl_price`)) AS t1					FROM 						".TBL_ORDER_DETAILS." od					WHERE od.`ord_dtl_sub_order_id` = `sub_id`				),0) + 				 IFNULL((SELECT 					SUM(IFNULL(op1.`ord_det_opt_qty`,0) * IF(op1.`ord_det_opt_discount` > 0, (op1.`ord_det_opt_price`- op1.`ord_det_opt_discount`),op1.`ord_det_opt_price`)) AS t2				FROM 					".TBL_ORDER_DETAILS." od1				LEFT OUTER JOIN 					".TBL_ORDER_DETAILS_OPTIONS." op1 				ON 					od1.`ord_dtl_id` = op1.`ord_det_opt_order_detail`				WHERE 					od1.`ord_dtl_sub_order_id` = `sub_id`				),0)			 ) as sub_order_amt".RET."FROM ".TBL_SUB_ORDERS.RET;		$and = " WHERE".RET;		if($array[SUB_ID] != "") {			$qry .= $and.SUB_ID." = '".$array[SUB_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_ORDER_ID] != "") {			$qry .= $and.SUB_ORDER_ID." = '".$array[SUB_ORDER_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_STATUS_ID] != "") {			$qry .= $and.SUB_STATUS_ID." = '".$array[SUB_STATUS_ID]."'".RET;			$and = "AND".RET;		}				if($array[SUB_ROUTE] != "") {			$qry .= $and.SUB_ROUTE." = '".$array[SUB_ROUTE]."'".RET;			$and = "AND".RET;		}				if($array[SUB_CONFIRMED_AT] != "") {			$qry .= $and.SUB_CONFIRMED_AT." = '".$array[SUB_CONFIRMED_AT]."'".RET;			$and = "AND".RET;		}				if($array[SUB_DELAYED_AT] != "") {			$qry .= $and.SUB_DELAYED_AT." = '".$array[SUB_DELAYED_AT]."'".RET;			$and = "AND".RET;		}		if($array[SUB_START_DATE] != "") {			$qry .= $and.SUB_START_DATE." = '".$array[SUB_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[SUB_END_DATE] != "") {			$qry .= $and.SUB_END_DATE." = '".$array[SUB_END_DATE]."'".RET;			$and = "AND".RET;		} 	$result = mysql_query($qry);		if($result) {			while ($row = mysql_fetch_array($result)) {				$record = $row;				break;//end after first record			}			if(count($record[0]) == 0) {				return array();			} else {				$this->setsub_id($record[SUB_ID]);				$this->setsub_order_id($record[SUB_ORDER_ID]);				$this->setsub_status_id($record[SUB_STATUS_ID]);				$this->setsub_route($record[SUB_ROUTE]);				$this->setsub_confirmed_at($record[SUB_CONFIRMED_AT]);				$this->setsub_start_date($record[SUB_START_DATE]);				$this->setsub_delayed_at($record[SUB_DELAYED_AT]);				$this->setsub_end_date($record[SUB_END_DATE]);				$this->settbl_sub_orders_active_date($record[TBL_SUB_ORDERS_ACTIVE_DATE]);				$this->settbl_sub_orders_deactive_date($record[TBL_SUB_ORDERS_DEACTIVE_DATE]);				return true;			}		}	}	public static function readArray($array = array(),&$result_found=0,$isArray=1) {		global $tbl_sub_orders_active_condition;		$qry = "SELECT ".TBL_SUB_ORDERS.".*, 		(				IFNULL( ( SELECT 					SUM( 										IFNULL(od.`ord_dtl_quantity`,0) * IF(od.`ord_dtl_discount` > 0, ((od.`ord_dtl_price`-od.`ordprom_discount_amt`)-od.`ord_dtl_discount`),od.`ord_dtl_price`)) AS t1					FROM 						".TBL_ORDER_DETAILS." od					WHERE od.`ord_dtl_sub_order_id` = ".TBL_SUB_ORDERS.".`sub_id`				),0) + 				 IFNULL((SELECT 					SUM(IFNULL(op1.`ord_det_opt_qty`,0) * IF(op1.`ord_det_opt_discount` > 0, (op1.`ord_det_opt_price`- op1.`ord_det_opt_discount`),op1.`ord_det_opt_price`)) AS t2				FROM 					".TBL_ORDER_DETAILS." od1				LEFT OUTER JOIN 					".TBL_ORDER_DETAILS_OPTIONS." op1 				ON 					od1.`ord_dtl_id` = op1.`ord_det_opt_order_detail`				WHERE 					od1.`ord_dtl_sub_order_id` = ".TBL_SUB_ORDERS.".`sub_id`				),0)			 ) as sub_order_amt,order_tax,order_tip,order_misc_charge,		 ".STATUS_NAME." ".RET."FROM ".TBL_SUB_ORDERS." INNER JOIN ".TBL_ORDERS." ON ".TBL_SUB_ORDERS.".".SUB_ORDER_ID." = ".TBL_ORDERS.".".ORDER_ID." INNER JOIN ".TBL_STATUSES." ON ".TBL_STATUSES.".".STATUS_ID."=".TBL_SUB_ORDERS.".".SUB_STATUS_ID.RET;		$and = "WHERE".RET;	 		if($array[SUB_ID] != "") {			$qry .= $and.SUB_ID." = '".$array[SUB_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_ORDER_ID] != "") {			$qry .= $and.SUB_ORDER_ID." = '".$array[SUB_ORDER_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_STATUS_ID] != "") {			$qry .= $and.SUB_STATUS_ID." = '".$array[SUB_STATUS_ID]."'".RET;			$and = "AND".RET;		}				if($array[SUB_ROUTE] != "") {			$qry .= $and.SUB_ROUTE." = '".$array[SUB_ROUTE]."'".RET;			$and = "AND".RET;		} 				if($array[SUB_DELAYED_AT] != "") {			$qry .= $and.SUB_DELAYED_AT." = '".$array[SUB_DELAYED_AT]."'".RET;			$and = "AND".RET;		}		if($array[SUB_START_DATE] != "") {			$qry .= $and.SUB_START_DATE." = '".$array[SUB_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[SUB_END_DATE] != "") {			$qry .= $and.SUB_END_DATE." = '".$array[SUB_END_DATE]."'".RET;			$and = "AND".RET;		}		if(is_gt_zero_num($array["isActive"])) {			$qry .= $and.$tbl_sub_orders_active_condition;;			$and = "AND".RET;		}		if(is_not_empty($array[SORT_ON]) && is_not_empty($array[SORT_BY])) {		$qry .=" ORDER BY ".$array[SORT_ON]." ".$array[SORT_BY];		}		if(is_not_empty($array[OFFSET_TITLE]) && is_not_empty($array[LIMIT_TITLE])) {			$qry_with_limit  = $qry." LIMIT ".$array[OFFSET_TITLE].",".$array[LIMIT_TITLE];		}else{			$qry_with_limit  = $qry;		}		$result = mysql_query ($qry_with_limit);		$r1 = mysql_query($qry);		if($r1){			$result_found = mysql_num_rows($r1);		}		$class_objects = array();		if($result) {			while ($record = mysql_fetch_assoc($result)) {				$isActive= 0;				//..check deactive date is not set or 0				if((is_not_empty($record[TBL_SUB_ORDERS_DEACTIVE_DATE])==false) || (is_gt_zero_num(strtotime($record[TBL_SUB_ORDERS_DEACTIVE_DATE]))== false)){					$isActive = 1; 				}else{					//..check the deactive date is greater than todays date					if(strtotime($record[TBL_SUB_ORDERS_DEACTIVE_DATE]) > strtotime(date(DATE_FORMAT))){						$isActive = 1;					}				}				if($isArray){					$class_object 									= array();					$class_object[SUB_ID]						=	$record[SUB_ID];					$class_object[SUB_ORDER_ID]			=	$record[SUB_ORDER_ID];									$class_object[SUB_STATUS_ID]		=	$record[SUB_STATUS_ID];					$class_object[SUB_ROUTE]				=	$record[SUB_ROUTE];					$class_object[SUB_DELAYED_AT]		=	$record[SUB_DELAYED_AT];					$class_object[SUB_START_DATE]		=	$record[SUB_START_DATE];					$class_object[SUB_END_DATE]			=	$record[SUB_END_DATE];					$class_object[SUB_CONFIRMED_AT]	=	$record[SUB_CONFIRMED_AT]; 					$class_object['sub_order_amt']	=	$record['sub_order_amt']; 										//$tmp_tip = self::calOrderTipForSubOrder($array[ORDER_TIP],$order_id);					//$tmp_misc_charge = self::calOrderMiscChargeForSubOrder($array[ORDER_MISC_CHARGE],$order_id);					$tmp_ord_amts = array('tip_amt'=>0,'misc_charge'=>0,'prom_disc'=>0);					$tmp_ord_amts['tip_amt'] = (is_gt_zero_num($record['order_tip']) ? ($record['order_tip']*1.00) : 0);				 $tmp_ord_amts['misc_charge'] = (is_gt_zero_num($record['order_misc_charge']) ? ($record['order_misc_charge']*1.00) : 0);				 $tmp_ord_amts['prom_disc'] = (is_gt_zero_num($array['promotion_discount']) ? ($array['promotion_discount']*1.00) : 0);				 					$tmp_sub_amts = self::calOrderAmountsForSubOrder($tmp_ord_amts,$record[SUB_ORDER_ID]);					 					$tmp_tip 					=		$tmp_sub_amts['tip_amt'];					$tmp_misc_charge 	=  	$tmp_sub_amts['misc_charge'];					$tmp_prom_disc 		=  	$tmp_sub_amts['prom_disc'];					$subTot = $record['sub_order_amt'] + $tmp_misc_charge -  $tmp_prom_disc;					$tmp_tax = tbl_orders::calOrderTaxAmt($subTot, $record['order_tax']);					$class_object['sub_tax_amt']	= $tmp_tax; 					$class_object['sub_tip'] = $tmp_tip;					$class_object['sub_gross_amt']	= $subTot + $tmp_tax + $tmp_tip; 					$class_object['sub_misc_charge'] =  $tmp_misc_charge;					$class_object['sub_prom_disc'] =  $tmp_prom_disc;					$class_object['is_delayed'] 	= 0;  					if(isValidDate($class_object[SUB_DELAYED_AT])){					 	$class_object['is_delayed'] = 1;					}					$class_object['is_confirmed'] 	= 0;  					if(isValidDate($class_object[SUB_CONFIRMED_AT])){					 	$class_object['is_confirmed'] = 1;					}					 					$order_statuses = tbl_table_status::getOrder_Statuses($array[ORDER_TYPE],$record[SUB_STATUS_ID]);					$class_object['reverse_order_statuses'] =  $order_statuses['reverse_order_statuses'];  					$class_object['remain_order_statuses'] =  $order_statuses['remain_order_statuses']; 										$type_prefix =  tbl_orders::getOrderTypeTitle($array[ORDER_TYPE],1); 					if(is_not_empty($type_prefix)){ 						if(stristr($record[STATUS_NAME],'Order ')){				 	 		$record[STATUS_NAME] = str_ireplace('Order ',$type_prefix.' ',$record[STATUS_NAME]);				 		}else{				 	 		$record[STATUS_NAME] = $type_prefix .' '.$record[STATUS_NAME];			 			} 					}					 $class_object[STATUS_NAME]			= $record[STATUS_NAME];					$class_object["isActive"]=$isActive;				}else{					$class_object = new tbl_sub_orders();					$class_object->setsub_id($record[SUB_ID]);					$class_object->setsub_order_id($record[SUB_ORDER_ID]);					$class_object->setsub_delayed_at($record[SUB_DELAYED_AT]);					$class_object->setsub_route($record[SUB_ROUTE]);					$class_object->setsub_status_id($record[SUB_STATUS_ID]);					$class_object->setsub_start_date($record[SUB_START_DATE]);					$class_object->setsub_end_date($record[SUB_END_DATE]);					$class_object->setsub_confirmed_at($record[SUB_CONFIRMED_AT]);				}				$class_objects[$record[SUB_ID]] = $class_object;			}		}		 		return $class_objects;	}//..End readArray	public function insert() {		if($this->getsub_id() != '') {			$qry  = "UPDATE ".TBL_SUB_ORDERS.RET."SET".RET."			".SUB_ID." = '".$this->getsub_id()."',".RET."			".SUB_ORDER_ID." = '".$this->getsub_order_id()."',".RET."			".SUB_STATUS_ID." = '".$this->getsub_status_id()."',".RET."			".SUB_ROUTE." = '".$this->getsub_route()."',".RET."			".SUB_CONFIRMED_AT." = '".$this->getsub_confirmed_at()."',".RET."			".SUB_DELAYED_AT." = '".$this->getsub_delayed_at()."',".RET."			".SUB_START_DATE." = '".$this->getsub_start_date()."',".RET."			".SUB_END_DATE." = '".$this->getsub_end_date()."'".RET.			"WHERE ".SUB_ID." = ".$this->getsub_id().RET;		 //echo $qry;exit;			mysql_query($qry);		} else {			$qry  = "INSERT INTO ".TBL_SUB_ORDERS." (".RET.			"".SUB_ORDER_ID.", ".SUB_STATUS_ID.", ".SUB_CONFIRMED_AT.", ".SUB_ROUTE.", ".SUB_START_DATE.", ".SUB_END_DATE.RET.				") VALUES (".RET.			"'".$this->getsub_order_id()."',".RET.			"'".$this->getsub_status_id()."',".RET.			"'".$this->getsub_confirmed_at()."',".RET.			"'".$this->getsub_route()."',".RET.			"'".$this->getsub_start_date()."',".RET.			"'".$this->getsub_end_date()."'".RET.			")".RET;			$res = mysql_query($qry);			$this->setsub_id(mysql_insert_id());		}	}//..End Insert	public static function delete($array = array()) {		$qry = "DELETE".RET."FROM ".TBL_SUB_ORDERS.RET;		$and = "WHERE".RET;		if($array[SUB_ID] != "") {			$qry .= $and.SUB_ID." = '".$array[SUB_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_ORDER_ID] != "") {			$qry .= $and.SUB_ORDER_ID." = '".$array[SUB_ORDER_ID]."'".RET;			$and = "AND".RET;		}		if($array[SUB_STATUS_ID] != "") {			$qry .= $and.SUB_STATUS_ID." = '".$array[SUB_STATUS_ID]."'".RET;			$and = "AND".RET;		}				if($array[SUB_ROUTE] != "") {			$qry .= $and.SUB_ROUTE." = '".$array[SUB_ROUTE]."'".RET;			$and = "AND".RET;		} 				if($array[SUB_CONFIRMED_AT] != "") {			$qry .= $and.SUB_CONFIRMED_AT." = '".$array[SUB_CONFIRMED_AT]."'".RET;			$and = "AND".RET;		} 				if($array[SUB_DELAYED_AT] != "") {			$qry .= $and.SUB_DELAYED_AT." = '".$array[SUB_DELAYED_AT]."'".RET;			$and = "AND".RET;		} 		if($array[SUB_START_DATE] != "") {			$qry .= $and.SUB_START_DATE." = '".$array[SUB_START_DATE]."'".RET;			$and = "AND".RET;		}		if($array[SUB_END_DATE] != "") {			$qry .= $and.SUB_END_DATE." = '".$array[SUB_END_DATE]."'".RET;			$and = "AND".RET;		}		$res = mysql_query($qry);		if($res){			return OPERATION_SUCCESS;		};		return OPERATION_FAIL;	}//..End Delete	public function isAlreadyThere($sub_order_id ,$sub_status_id,$sub_route) {		$unique_arr = array();			//$unique_arr[SUB_ID]=$sub_id;			//$unique_arr[SUB_ORDER_ID]=$sub_order_id;			//$unique_arr[SUB_STATUS_ID]=$sub_status_id;			//$unique_arr[SUB_START_DATE]=$sub_start_date;			//$unique_arr[SUB_END_DATE]=$sub_end_date;		if(is_not_empty($unique_arr)){			return $this->readObject($unique_arr);		}		return false;	}//..isAlreadyThere	public function create($sub_order_id ,$sub_status_id,$sub_route) {		if(is_not_empty($sub_order_id)){			if($this->isAlreadyThere($sub_order_id ,$sub_status_id,$sub_route)){				return OPERATION_DUPLICATE;			}else{				$this->setsub_id("");				$this->setsub_order_id($sub_order_id);				$this->setsub_status_id($sub_status_id);				if($sub_status_id == TBL_STATUS_ORDER_CONFIRM){					$this->setsub_confirmed_at(date(DATE_FORMAT));				}else{					$this->setsub_confirmed_at(date(EMPTY_DATE_FORMAT));				} 				$this->setsub_route($sub_route);				$this->setsub_start_date(date(DATE_FORMAT));				$this->insert();				self::chkNupdtStatusForOrderBySubOrder($this->getsub_id());				return $this->getsub_id();			}		}		return OPERATION_FAIL;	}//..create	public function update($sub_id, $sub_order_id, $sub_status_id, $sub_start_date, $sub_end_date) {		if(is_gt_zero_num($sub_id)){			if ($this->readObject(array(SUB_ID=>$sub_id))){				$this->setsub_order_id($sub_order_id);				$this->setsub_status_id($sub_status_id);				$this->insert();				return OPERATION_SUCCESS;			}		}		return OPERATION_FAIL;	}//..update	public function activate($sub_id){		if(is_gt_zero_num($sub_id)){			if ($this->readObject(array(SUB_ID=>$sub_id))){				$qry  = "UPDATE ".TBL_SUB_ORDERS.RET."SET".RET."			".TBL_SUB_ORDERS_DEACTIVE_DATE." = '".date(EMPTY_DATE_FORMAT)."' WHERE ".SUB_ID."={$sub_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end activate	public function deactivate($sub_id){		if(is_gt_zero_num($sub_id)){			if ($this->readObject(array(SUB_ID=>$sub_id))){				$qry  = "UPDATE ".TBL_SUB_ORDERS.RET."SET".RET."			".TBL_SUB_ORDERS_DEACTIVE_DATE." = '".date(DATE_FORMAT)."' WHERE ".SUB_ID."={$sub_id}";				$res = mysql_query($qry);				if($res){					return 1;				}			}		}		return 0;	}//..end deactivate	public static function GetInfo($sub_id) {		$info = array();		if($sub_id != ""){			$obj_tbl_sub_orders = new tbl_sub_orders();			if($obj_tbl_sub_orders->readObject(array("sub_id"=>$sub_id))){				$info["sub_id"]=$obj_tbl_sub_orders->getsub_id();				$info["sub_order_id"]=$obj_tbl_sub_orders->getsub_order_id();				$info["sub_status_id"]=$obj_tbl_sub_orders->getsub_status_id();				$info["sub_route"]=$obj_tbl_sub_orders->getsub_route();				$info["sub_start_date"]=$obj_tbl_sub_orders->getsub_start_date();				$info["sub_end_date"]=$obj_tbl_sub_orders->getsub_end_date();				$info["sub_delayed_at"]=$obj_tbl_sub_orders->getsub_delayed_at();				$info["sub_confirmed_at"]=$obj_tbl_sub_orders->getsub_confirmed_at();								$info['is_confirmed'] = 0; 				if(isValidDate($info['sub_confirmed_at'])){				 	$info['is_confirmed'] = 1;				}				$info['is_delayed'] = 0; 				if(isValidDate($info['sub_delayed_at'])){				 	$info['is_delayed'] = 1;				}				$info["isActive"] = 0;				//..check deactive date is not set or 0				if((is_not_empty($obj_tbl_sub_orders->gettbl_sub_orders_deactive_date())==false)  || (is_gt_zero_num(strtotime($obj_tbl_sub_orders->gettbl_sub_orders_deactive_date()))== false)){					$info["isActive"] = 1;				}else{					//..check the deactive date is greater than todays date					if(strtotime($obj_tbl_sub_orders->gettbl_sub_orders_deactive_date()) > strtotime(date(DATE_FORMAT))){						$info["isActive"] = 1;					}				}			}		unset($obj_tbl_sub_orders);		return $info;		}	}//..End GetInfo	public static function GetFields($data){		global $tbl_sub_orders_active_condition;		$arr = array();		if(is_not_empty($data)){			$qry ="SELECT ".$data['key_field'].",".$data['value_field']." FROM ".TBL_SUB_ORDERS."";			if(is_gt_zero_num($data['isActive'])){				$qry .= " WHERE ".$tbl_sub_orders_active_condition;			}			$res = mysql_query($qry); 			if($res){				while($row=mysql_fetch_assoc($res)){					$arr[$row[$data['key_field']]] = $row[$data['value_field']];				}			}		}		return $arr;	}//.. End of GetFields			/**	* For Updating the status of the sub-order.	* @param integer $sub_order_id	* @param integer $status_id 	* @return boolean	*/	public function update_status($sub_order_id,$status_id){	   	global $_lang;	 	   if(is_gt_zero_num($sub_order_id) && is_gt_zero_num($status_id)){  	  	if($this->readObject(array(SUB_ID =>$sub_order_id))){ 				$previous_status = $this->getsub_status_id();  			$this->setsub_status_id($status_id); 				$order_info = tbl_orders::GetInfo($this->getsub_order_id());  				 #code->start  					if($status_id == TBL_STATUS_ORDERED){   						$this->setsub_confirmed_at(date(EMPTY_DATE_FORMAT)); 						 //..Notifications based on teh statuses @26 Oct 2013 							biz_send_status_notifications($order_info[ORDER_TABLE_ID],$order_info[ORDER_CUSTOMER_NAME],$this->getsub_id(),STS_ORDER_PLACED,$order_info[ORDER_EMP_ID],$order_info[ORDER_CUSTOMER_ID],$order_info[ORDER_CUSTOMER_TYPE],1);	 				  }elseif($status_id == TBL_STATUS_ORDER_CANCELLED){						//$this->setsub_end_date(date(DATE_FORMAT));   							biz_send_status_notifications($order_info[ORDER_TABLE_ID],$order_info[ORDER_CUSTOMER_NAME],$this->getsub_id(),STS_ORDER_CANCELLED,$order_info[ORDER_EMP_ID],$order_info[ORDER_CUSTOMER_ID],$order_info[ORDER_CUSTOMER_TYPE],1);	 					}elseif($status_id == TBL_STATUS_CHECK){ 							 $this->setsub_end_date(date(DATE_FORMAT));   	        }elseif($status_id == TBL_STATUS_DELIVERED){						if($order_info[ORDER_TYPE]==ORDER_TYPE_TAKE_OUT){							 $this->setsub_end_date(date(DATE_FORMAT)); 						}					}elseif($status_id == TBL_STATUS_ORDER_CONFIRM){						$this->setsub_confirmed_at(date(DATE_FORMAT)); 					  if(is_gt_zero_num($order_info[ORDER_TABLE_ID]) && (is_gt_zero_num($order_info[ORDER_SESSION_ID])==FALSE)){  							$_SESSION[SES_FLASH_MSG] = '<div class="error">'.$_lang[TBL_ALERTS]['manager']['ORD_CONFIRM_ERR'].'</div>'; 							return 2;						}else{						  biz_send_status_notifications($order_info[ORDER_TABLE_ID],$order_info[ORDER_CUSTOMER_NAME],$this->getsub_id(),STS_ORDER_CONFIRMED,$order_info[ORDER_EMP_ID],$order_info[ORDER_CUSTOMER_ID],$order_info[ORDER_CUSTOMER_TYPE],1);								//biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_CONFIRMED,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());						} 						 	        }elseif($status_id == TBL_STATUS_ORDER_PICKED){				//..add record to table to status record 							//biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),STS_ORDER_READY_TO_PICK,$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());							biz_send_status_notifications($order_info[ORDER_TABLE_ID],$order_info[ORDER_CUSTOMER_NAME],$this->getsub_id(),STS_ORDER_READY_TO_PICK,$order_info[ORDER_EMP_ID],$order_info[ORDER_CUSTOMER_ID],$order_info[ORDER_CUSTOMER_TYPE],1);										}elseif($status_id == TBL_STATUS_ORDER_DELAYED){				//..for sub order delayed update the sub order delayed at				$this->setsub_delayed_at(date(DATE_FORMAT));								//..if the order's delayed at is not set then update the order_delayed_at field.				if(isValidDate($order_info[ORDER_DELAYED_AT])==FALSE){					$objorder = new tbl_orders();					if($objorder->readObject(array(ORDER_ID=>$order_info[ORDER_ID]))){ 						$objorder->setorder_delayed_at(date(DATE_FORMAT));						$objorder->insert();					}				}							}else{				  //.. for else  conditions					//biz_send_status_notifications($this->getorder_table_id(),$this->getorder_customer_name(),$this->getorder_id(),$this->getorder_status_id(),$this->getorder_emp_id(),$this->getorder_customer_id(),$this->getorder_customer_type());					biz_send_status_notifications($order_info[ORDER_TABLE_ID],$order_info[ORDER_CUSTOMER_NAME],$this->getsub_id(),$this->getsub_status_id(),$order_info[ORDER_EMP_ID],$order_info[ORDER_CUSTOMER_ID],$order_info[ORDER_CUSTOMER_TYPE],1);				}	        #code->end			   			$this->insert();				self::chkNupdtStatusForOrderBySubOrder($sub_order_id);  			return OPERATION_SUCCESS;      }	  }	  return OPERATION_FAIL; 	}//..update_status		public static function chkAllSubOrderConfirmed($order_id){		$cnt = DB::ExecScalarQry('SELECT IFNULL(COUNT('.SUB_ID.'),0) FROM '.TBL_SUB_ORDERS.' WHERE '.SUB_ORDER_ID.'='.$order_id.' AND ('.SUB_CONFIRMED_AT.' is  NULL OR '.SUB_CONFIRMED_AT.' = 0)');		 		if(is_gt_zero_num($cnt)){			return 0;		} 		return 1;	}		public static function mkDelaySubOrders(){	 global $order_delay_time;	 	 //if(is_gt_zero_num($order_delay_time)){			$suborders = array();		$active_session = tbl_table_customer_session::getActiveSessionForAlltables();		if(is_not_empty($active_session)){			//$active_session = '0'; 	 		//$res = mysql_query ('SELECT '.SUB_ID.','.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' RIGHT OUTER JOIN '.TBL_SUB_ORDERS.' ON '.ORDER_ID.'='.SUB_ORDER_ID.' WHERE '.SUB_STATUS_ID.' = '.TBL_STATUS_ORDER_CONFIRM.' AND ('.SUB_DELAYED_AT.' is NULL OR '.SUB_DELAYED_AT.' = 0)  AND  TIME('.SUB_START_DATE.' + INTERVAL '.$order_delay_time.' MINUTE) <= CURTIME() AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_SESSION_ID.' IN ('.$active_session.')');			$res = mysql_query ('SELECT '.SUB_ID.','.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' RIGHT OUTER JOIN '.TBL_SUB_ORDERS.' ON '.ORDER_ID.'='.SUB_ORDER_ID.' WHERE ('.SUB_CONFIRMED_AT.' is NOT NULL OR '.SUB_CONFIRMED_AT.' <> 0) AND ('.SUB_DELAYED_AT.' is NULL OR '.SUB_DELAYED_AT.' = 0)  AND  TIME('.SUB_START_DATE.' + INTERVAL IFNULL('.ORDER_TAKEOUT_TIME.','.(is_gt_zero_num($order_delay_time)? $order_delay_time: '0').') MINUTE) <= CURTIME() AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.ORDER_SESSION_ID.' IN ('.$active_session.')');			 		 		 //#01--for making order delayed 		 //#01--Step 1 - get the order -id		 $order_id = 0;		 if($res){ 		 	while($row=mysql_fetch_assoc($res)){				$suborders[$row[SUB_ID]] = $row; 				$order_id = $row[ORDER_ID];			}		 }	 		 		 if(is_not_empty($suborders)){		 	$sub_ids = biz_implode(',',array_keys($suborders));						 		 	if(is_not_empty($sub_ids)){				 		 	/*			//change@20Aug2013#2			 $res2 =  mysql_query('UPDATE '.TBL_ORDERS.' SET '.ORDER_STATUS_ID.'= '.TBL_STATUS_ORDER_DELAYED.'  WHERE '.ORDER_ID.' IN ('.$order_ids.')'); */			 $res2 =  mysql_query('UPDATE '.TBL_SUB_ORDERS.' SET '.SUB_DELAYED_AT.'= \''.date(DATE_FORMAT).'\'  WHERE '.SUB_ID.' IN ('.$sub_ids.')');			 if($res2){			 	//#01-Step-2 - make order as delayed if not delayed previously				if(is_gt_zero_num($order_id)){					DB::ExecNonQry('UPDATE '.TBL_ORDERS.' SET '.ORDER_DELAYED_AT.'= \''.date(DATE_FORMAT).'\'  WHERE '.ORDER_ID.' = '.$order_id.' AND ('.ORDER_DELAYED_AT.' is NULL OR '.ORDER_DELAYED_AT.' = 0)');				}			 				 	$ord_delay_msg = 'Order Delayed';			 	foreach($suborders as $sub_id=>$subord_info){					if(is_gt_zero_num($subord_info[ORDER_EMP_ID])){						biz_send_alert($subord_info[ORDER_TABLE_ID],$subord_info[ORDER_CUSTOMER_NAME],$sub_id,$ord_delay_msg, $subord_info[ORDER_EMP_ID], ALERT_SUB_ORDER,CUST_TYPE_LOGIN,NULL,NULL,STS_ORDER_DELAYED);					}						biz_send_alert($subord_info[ORDER_TABLE_ID],$subord_info[ORDER_CUSTOMER_NAME],$sub_id,$ord_delay_msg,ALERT_FOR_MANGER, ALERT_SUB_ORDER,CUST_TYPE_LOGIN,NULL,NULL,STS_ORDER_DELAYED);				}			 }		 return OPERATION_SUCCESS; 		} 	 }	}  	//}	 return OPERATION_FAIL; 	}		/*	public static function chkNupdtStatusForOrderBySubOrder($sub_id){		 if(is_gt_zero_num($sub_id)){		 	 $info = self::GetInfo($sub_id); 			 if(is_not_empty($info)){			 	  $list = self::readArray(array(SUB_ORDER_ID=>$info[SUB_ORDER_ID]));					if(is_not_empty($list)){						$isSameStatus = 1; 						$isallConfirmed = 1; 						foreach($list as $item){							if($item[SUB_STATUS_ID]!=$info[SUB_STATUS_ID]){								$isSameStatus = 0; 							}							if($item['is_confirmed']!=$info['is_confirmed']){								$isallConfirmed = 0; 							}						}					}										if($isSameStatus){						$objOrder = new tbl_orders();						$objOrder->update_ord_sts($info[SUB_ORDER_ID],$info[SUB_STATUS_ID]);						unset($objOrder); 					}										if((is_gt_zero_num($isallConfirmed)==false) && (is_gt_zero_num($info['is_confirmed']))){						$objOrder = new tbl_orders();						$objOrder->update_ord_sts($info[SUB_ORDER_ID],TBL_STATUS_ORDERED);						unset($objOrder); 					} 					 			 }		 }	}	*/		public static function chkNupdtStatusForOrderBySubOrder($sub_id){		 if(is_gt_zero_num($sub_id)){		 	 $info = self::GetInfo($sub_id); 			 $order_status = 0;	  			 if(is_not_empty($info)){			 	  $list = self::readArray(array(SUB_ORDER_ID=>$info[SUB_ORDER_ID]));					if(is_not_empty($list)){ 						 	$minimum_key =	tbl_statuses::getStatusPickerKeyByStatus($info[SUB_STATUS_ID],"'TABLE','ORDER'",'ORDER');  						 	$order_status = $info[SUB_STATUS_ID];					 		 							foreach($list as $item){								$curr_key =  tbl_statuses::getStatusPickerKeyByStatus($item[SUB_STATUS_ID],"'TABLE','ORDER'",'ORDER');								 if($minimum_key >  $curr_key){								 		$minimum_key 	= $curr_key;										$order_status = $item[SUB_STATUS_ID];								 }							}					}										if(is_gt_zero_num($order_status)){						$objOrder = new tbl_orders();						$objOrder->update_ord_sts($info[SUB_ORDER_ID],$order_status,1);						unset($objOrder); 					} 					return OPERATION_SUCCESS; 			 }		 }		 return OPERATION_FAIL;	}		public static function checkPaidSubOrdersByOrder($order_ids){		 return DB::ExecNonQry('UPDATE '.TBL_SUB_ORDERS.' SET '.SUB_STATUS_ID.'= '.TBL_STATUS_CHECK.', '.SUB_START_DATE.'= NOW() WHERE '.SUB_ORDER_ID.' IN ('.$order_ids.')');	}		public static function mkStatusDeliveredSubOrdersByOrder($order_ids){		 return DB::ExecNonQry('UPDATE '.TBL_SUB_ORDERS.' SET '.SUB_STATUS_ID.'= '.TBL_STATUS_DELIVERED.', '.SUB_START_DATE.'= NOW() WHERE '.SUB_ORDER_ID.' IN ('.$order_ids.')');	}				public static function mkConfirmDelaySubOrders(){ 		global $order_confirm_time,$tbl_sub_orders_active_condition;	 if(is_gt_zero_num($order_confirm_time)){ 		$suborders = array();				$active_session = tbl_table_customer_session::getActiveSessionForAlltables();		 		if(is_not_empty($active_session)){			 	 $res = mysql_query ('SELECT '.SUB_ID.', '.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' RIGHT OUTER JOIN '.TBL_SUB_ORDERS.' ON '.ORDER_ID.'='.SUB_ORDER_ID.' WHERE '.SUB_STATUS_ID.' = '.TBL_STATUS_ORDERED.' AND ('.SUB_CONFIRMED_AT.' is NULL OR '.SUB_CONFIRMED_AT.' = 0)  AND '.$tbl_sub_orders_active_condition.' AND TIME('.SUB_START_DATE.' + INTERVAL '.$order_confirm_time.' MINUTE) <= CURTIME() AND '.ORDER_SESSION_ID.' IN ('.$active_session.') AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.SUB_ID.'  NOT IN (SELECT '.ALERT_POST_ID.' FROM '.TBL_ALERTS.' WHERE '.ALERT_POST_TYPE.'=\''.ALERT_SUB_ORDER.'\' AND '.ALERT_STATUS.'='.STS_ORDER_CONFIRM_DELAY.')');	 //echo 'SELECT '.SUB_ID.', '.ORDER_ID.','.ORDER_TABLE_ID.','.ORDER_CUSTOMER_NAME.','.ORDER_EMP_ID.' FROM '.TBL_ORDERS.' RIGHT OUTER JOIN '.TBL_SUB_ORDERS.' ON '.ORDER_ID.'='.SUB_ORDER_ID.' WHERE '.SUB_STATUS_ID.' = '.TBL_STATUS_ORDERED.' AND ('.SUB_CONFIRMED_AT.' is NULL OR '.SUB_CONFIRMED_AT.' = 0)  AND '.$tbl_sub_orders_active_condition.' AND TIME('.SUB_START_DATE.' + INTERVAL '.$order_confirm_time.' MINUTE) <= CURTIME() AND '.ORDER_SESSION_ID.' IN ('.$active_session.') AND '.ORDER_RESTAURANT.'='.$_SESSION[SES_RESTAURANT].' AND '.SUB_ID.'  NOT IN (SELECT '.ALERT_POST_ID.' FROM '.TBL_ALERTS.' WHERE '.ALERT_POST_TYPE.'=\''.ALERT_SUB_ORDER.'\' AND '.ALERT_STATUS.'='.STS_ORDER_CONFIRM_DELAY.')';	 	 if($res){ 	 	while($row=mysql_fetch_assoc($res)){			$suborders[$row[SUB_ID]] = $row; 		}	 }		 	 if(is_not_empty($suborders)){	 	 		 	$ord_delay_msg = 'Order Confirmation Delayed';		 	foreach($suborders as $sub_id=>$ord_info){				//..notify manager				biz_send_alert($ord_info[ORDER_TABLE_ID],$ord_info[ORDER_CUSTOMER_NAME],$sub_id,$ord_delay_msg,ALERT_FOR_MANGER,ALERT_SUB_ORDER,CUST_TYPE_LOGIN,NULL,NULL,STS_ORDER_CONFIRM_DELAY); 			}			return OPERATION_SUCCESS; 					 }   		} 																				 } 	 return OPERATION_FAIL; 	}			public static function calOrderTipForSubOrder($order_tip,$order_id){		if(is_gt_zero_num($order_tip)){		return DB::ExecScalarQry('SELECT IFNULL(('.$order_tip.'/COUNT('.SUB_ID.')),0) FROM '.TBL_SUB_ORDERS.'   where '.SUB_ORDER_ID.'='.$order_id);		}		return 0;			}	  public static function calOrderAmountsForSubOrder($order_amts,$order_id){		$arr = array('tip_amt'=>0,'misc_charge'=>0,'prom_disc'=>0);		if(is_not_empty($order_amts)){			 $cnt =  DB::ExecScalarQry('SELECT COUNT('.SUB_ID.') FROM '.TBL_SUB_ORDERS.'   where '.SUB_ORDER_ID.'='.$order_id); 			 			 if(is_gt_zero_num($cnt)){			 	 $arr['tip_amt'] = (is_gt_zero_num($order_amts['tip_amt']) ? ($order_amts['tip_amt']*1.00/$cnt) : 0);				 $arr['misc_charge'] = (is_gt_zero_num($order_amts['misc_charge']) ? ($order_amts['misc_charge']*1.00/$cnt) : 0);				 $arr['prom_disc'] = (is_gt_zero_num($order_amts['prom_disc']) ? ($order_amts['prom_disc']*1.00/$cnt) : 0); 				 			 } 		}		 return $arr;			}		public static function cancelAllsubOrders($order_id){		if(is_gt_zero_num($order_id)){ 			return DB::ExecNonQry('UPDATE '.TBL_SUB_ORDERS.' SET '.SUB_STATUS_ID.'='.TBL_STATUS_ORDER_CANCELLED.', '.SUB_END_DATE.'=\''.DATE(DATE_FORMAT).'\' WHERE '.SUB_ORDER_ID.'='.$order_id);		} 		return OPERATION_FAIL;	}		public static function restoreAllsubOrders($order_id){		if(is_gt_zero_num($order_id)){			return DB::ExecNonQry('UPDATE '.TBL_SUB_ORDERS.' SET '.SUB_STATUS_ID.'='.TBL_STATUS_ORDERED.', '.SUB_END_DATE.'=\'\' WHERE '.SUB_ORDER_ID.'='.$order_id);		} 		return OPERATION_FAIL;	} 		public static function getCurrentStatus($sub_id){ 		if(is_gt_zero_num($sub_id)){			return DB::ExecScalarQry('SELECT '.SUB_STATUS_ID.' FROM '.TBL_SUB_ORDERS.' WHERE '.SUB_ID.'='.$sub_id,'0');		} 		return '0';	}}//..End tbl_sub_orders?>